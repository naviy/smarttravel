//! Ext.debug.js
//

(function() {

Type.registerNamespace('Ext');

////////////////////////////////////////////////////////////////////////////////
// Ext.DataViewLabelEditorConfig

Ext.DataViewLabelEditorConfig = function Ext_DataViewLabelEditorConfig() {
    Ext.DataViewLabelEditorConfig.initializeBase(this);
}
Ext.DataViewLabelEditorConfig.prototype = {
    
    alignment: function Ext_DataViewLabelEditorConfig$alignment(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['alignment'] = value;
        return this;
    },
    
    allowBlur: function Ext_DataViewLabelEditorConfig$allowBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['allowBlur'] = value;
        return this;
    },
    
    allowDomMove: function Ext_DataViewLabelEditorConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_DataViewLabelEditorConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_DataViewLabelEditorConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_DataViewLabelEditorConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoSize: function Ext_DataViewLabelEditorConfig$autoSize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['autoSize'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_DataViewLabelEditorConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    cancelOnEsc: function Ext_DataViewLabelEditorConfig$cancelOnEsc(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['cancelOnEsc'] = value;
        return this;
    },
    
    clearCls: function Ext_DataViewLabelEditorConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_DataViewLabelEditorConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    completeOnEnter: function Ext_DataViewLabelEditorConfig$completeOnEnter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['completeOnEnter'] = value;
        return this;
    },
    
    constrain: function Ext_DataViewLabelEditorConfig$constrain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['constrain'] = value;
        return this;
    },
    
    contentEl: function Ext_DataViewLabelEditorConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_DataViewLabelEditorConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_DataViewLabelEditorConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_DataViewLabelEditorConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_DataViewLabelEditorConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    field: function Ext_DataViewLabelEditorConfig$field(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['field'] = value;
        return this;
    },
    
    fieldLabel: function Ext_DataViewLabelEditorConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    hidden: function Ext_DataViewLabelEditorConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideEl: function Ext_DataViewLabelEditorConfig$hideEl(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['hideEl'] = value;
        return this;
    },
    
    hideLabel: function Ext_DataViewLabelEditorConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_DataViewLabelEditorConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_DataViewLabelEditorConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_DataViewLabelEditorConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_DataViewLabelEditorConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    ignoreNoChange: function Ext_DataViewLabelEditorConfig$ignoreNoChange(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['ignoreNoChange'] = value;
        return this;
    },
    
    itemCls: function Ext_DataViewLabelEditorConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_DataViewLabelEditorConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_DataViewLabelEditorConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_DataViewLabelEditorConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_DataViewLabelEditorConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    offsets: function Ext_DataViewLabelEditorConfig$offsets(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['offsets'] = value;
        return this;
    },
    
    overCls: function Ext_DataViewLabelEditorConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_DataViewLabelEditorConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_DataViewLabelEditorConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_DataViewLabelEditorConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_DataViewLabelEditorConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    revertInvalid: function Ext_DataViewLabelEditorConfig$revertInvalid(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['revertInvalid'] = value;
        return this;
    },
    
    shadow: function Ext_DataViewLabelEditorConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    stateEvents: function Ext_DataViewLabelEditorConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_DataViewLabelEditorConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_DataViewLabelEditorConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_DataViewLabelEditorConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    swallowKeys: function Ext_DataViewLabelEditorConfig$swallowKeys(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['swallowKeys'] = value;
        return this;
    },
    
    tpl: function Ext_DataViewLabelEditorConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_DataViewLabelEditorConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    updateEl: function Ext_DataViewLabelEditorConfig$updateEl(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['updateEl'] = value;
        return this;
    },
    
    value: function Ext_DataViewLabelEditorConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    xtype: function Ext_DataViewLabelEditorConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewLabelEditorConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ScriptSharpAdaptor

Ext.ScriptSharpAdaptor = function Ext_ScriptSharpAdaptor() {
}
Ext.ScriptSharpAdaptor._registerClass = function Ext_ScriptSharpAdaptor$_registerClass(type, name, baseType) {
    /// <param name="type" type="Type">
    /// </param>
    /// <param name="name" type="String">
    /// </param>
    /// <param name="baseType" type="Type">
    /// </param>
    if (ss.isUndefined(type)) {
        return;
    }
    type.__typeName = name;
    type.__class = true;
    type.__baseType = baseType;
    type.__isExt = true;
}


////////////////////////////////////////////////////////////////////////////////
// Ext.AbstractConfig

Ext.AbstractConfig = function Ext_AbstractConfig() {
    /// <field name="o" type="Object">
    /// </field>
    this.o = {};
}
Ext.AbstractConfig.prototype = {
    
    custom: function Ext_AbstractConfig$custom(key, value) {
        /// <param name="key" type="String">
        /// </param>
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.AbstractConfig"></returns>
        this.o[key] = value;
        return this;
    },
    
    toDictionary: function Ext_AbstractConfig$toDictionary() {
        /// <returns type="Object"></returns>
        return this.o;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ActionConfig

Ext.ActionConfig = function Ext_ActionConfig() {
    Ext.ActionConfig.initializeBase(this);
}
Ext.ActionConfig.prototype = {
    
    disabled: function Ext_ActionConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ActionConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    handler: function Ext_ActionConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ActionConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    hidden: function Ext_ActionConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ActionConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    iconCls: function Ext_ActionConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ActionConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    itemId: function Ext_ActionConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ActionConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    scope: function Ext_ActionConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ActionConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    text: function Ext_ActionConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ActionConfig"></returns>
        this.o['text'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.AjaxConfig

Ext.AjaxConfig = function Ext_AjaxConfig() {
    Ext.AjaxConfig.initializeBase(this);
}
Ext.AjaxConfig.prototype = {
    
    defaultHeaders: function Ext_AjaxConfig$defaultHeaders(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.AjaxConfig"></returns>
        this.o['defaultHeaders'] = value;
        return this;
    },
    
    extraParams: function Ext_AjaxConfig$extraParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.AjaxConfig"></returns>
        this.o['extraParams'] = value;
        return this;
    },
    
    listeners: function Ext_AjaxConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.AjaxConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    method: function Ext_AjaxConfig$method(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.AjaxConfig"></returns>
        this.o['method'] = value;
        return this;
    },
    
    timeout: function Ext_AjaxConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.AjaxConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    url: function Ext_AjaxConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.AjaxConfig"></returns>
        this.o['url'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.BoxComponentConfig

Ext.BoxComponentConfig = function Ext_BoxComponentConfig() {
    Ext.BoxComponentConfig.initializeBase(this);
}
Ext.BoxComponentConfig.prototype = {
    
    allowDomMove: function Ext_BoxComponentConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_BoxComponentConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_BoxComponentConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_BoxComponentConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_BoxComponentConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_BoxComponentConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_BoxComponentConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_BoxComponentConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_BoxComponentConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_BoxComponentConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_BoxComponentConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_BoxComponentConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_BoxComponentConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_BoxComponentConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_BoxComponentConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_BoxComponentConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_BoxComponentConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_BoxComponentConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_BoxComponentConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_BoxComponentConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_BoxComponentConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_BoxComponentConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_BoxComponentConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_BoxComponentConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_BoxComponentConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_BoxComponentConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_BoxComponentConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_BoxComponentConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_BoxComponentConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_BoxComponentConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_BoxComponentConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_BoxComponentConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_BoxComponentConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_BoxComponentConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_BoxComponentConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_BoxComponentConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_BoxComponentConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_BoxComponentConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_BoxComponentConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_BoxComponentConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_BoxComponentConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_BoxComponentConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_BoxComponentConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_BoxComponentConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_BoxComponentConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_BoxComponentConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_BoxComponentConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_BoxComponentConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_BoxComponentConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_BoxComponentConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_BoxComponentConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_BoxComponentConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_BoxComponentConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_BoxComponentConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.BoxComponentConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ButtonConfig

Ext.ButtonConfig = function Ext_ButtonConfig() {
    Ext.ButtonConfig.initializeBase(this);
}
Ext.ButtonConfig.prototype = {
    
    allowDepress: function Ext_ButtonConfig$allowDepress(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['allowDepress'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ButtonConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ButtonConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ButtonConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    arrowAlign: function Ext_ButtonConfig$arrowAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['arrowAlign'] = value;
        return this;
    },
    
    autoEl: function Ext_ButtonConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ButtonConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ButtonConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ButtonConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ButtonConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ButtonConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ButtonConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ButtonConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ButtonConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ButtonConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    buttonSelector: function Ext_ButtonConfig$buttonSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['buttonSelector'] = value;
        return this;
    },
    
    clearCls: function Ext_ButtonConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickEvent: function Ext_ButtonConfig$clickEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['clickEvent'] = value;
        return this;
    },
    
    cls: function Ext_ButtonConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ButtonConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ButtonConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ButtonConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ButtonConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ButtonConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableToggle: function Ext_ButtonConfig$enableToggle(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['enableToggle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ButtonConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ButtonConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    handleMouseEvents: function Ext_ButtonConfig$handleMouseEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['handleMouseEvents'] = value;
        return this;
    },
    
    handler: function Ext_ButtonConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    height: function Ext_ButtonConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ButtonConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ButtonConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ButtonConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ButtonConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ButtonConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    icon: function Ext_ButtonConfig$icon(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['icon'] = value;
        return this;
    },
    
    iconAlign: function Ext_ButtonConfig$iconAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['iconAlign'] = value;
        return this;
    },
    
    iconCls: function Ext_ButtonConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ButtonConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ButtonConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ButtonConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ButtonConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ButtonConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ButtonConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ButtonConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    menu: function Ext_ButtonConfig$menu(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['menu'] = value;
        return this;
    },
    
    menuAlign: function Ext_ButtonConfig$menuAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['menuAlign'] = value;
        return this;
    },
    
    minWidth: function Ext_ButtonConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    overCls: function Ext_ButtonConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    overflowText: function Ext_ButtonConfig$overflowText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['overflowText'] = value;
        return this;
    },
    
    pageX: function Ext_ButtonConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ButtonConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ButtonConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    pressed: function Ext_ButtonConfig$pressed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['pressed'] = value;
        return this;
    },
    
    ptype: function Ext_ButtonConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ButtonConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ButtonConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ButtonConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    repeat: function Ext_ButtonConfig$repeat(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['repeat'] = value;
        return this;
    },
    
    scale: function Ext_ButtonConfig$scale(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['scale'] = value;
        return this;
    },
    
    scope: function Ext_ButtonConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stateEvents: function Ext_ButtonConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ButtonConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ButtonConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ButtonConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabIndex: function Ext_ButtonConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_ButtonConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    text: function Ext_ButtonConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    toggleGroup: function Ext_ButtonConfig$toggleGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['toggleGroup'] = value;
        return this;
    },
    
    toggleHandler: function Ext_ButtonConfig$toggleHandler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['toggleHandler'] = value;
        return this;
    },
    
    tooltip: function Ext_ButtonConfig$tooltip(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    tooltipType: function Ext_ButtonConfig$tooltipType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['tooltipType'] = value;
        return this;
    },
    
    tpl: function Ext_ButtonConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ButtonConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    type: function Ext_ButtonConfig$type(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['type'] = value;
        return this;
    },
    
    width: function Ext_ButtonConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ButtonConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ButtonConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ButtonConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ButtonGroupConfig

Ext.ButtonGroupConfig = function Ext_ButtonGroupConfig() {
    Ext.ButtonGroupConfig.initializeBase(this);
}
Ext.ButtonGroupConfig.prototype = {
    
    activeItem: function Ext_ButtonGroupConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ButtonGroupConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ButtonGroupConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_ButtonGroupConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_ButtonGroupConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ButtonGroupConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ButtonGroupConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ButtonGroupConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_ButtonGroupConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_ButtonGroupConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ButtonGroupConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ButtonGroupConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_ButtonGroupConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_ButtonGroupConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_ButtonGroupConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_ButtonGroupConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_ButtonGroupConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_ButtonGroupConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_ButtonGroupConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_ButtonGroupConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ButtonGroupConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ButtonGroupConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ButtonGroupConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ButtonGroupConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ButtonGroupConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ButtonGroupConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ButtonGroupConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_ButtonGroupConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_ButtonGroupConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_ButtonGroupConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_ButtonGroupConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_ButtonGroupConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_ButtonGroupConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_ButtonGroupConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_ButtonGroupConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_ButtonGroupConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    columns: function Ext_ButtonGroupConfig$columns(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    contentEl: function Ext_ButtonGroupConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ButtonGroupConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ButtonGroupConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_ButtonGroupConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ButtonGroupConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ButtonGroupConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ButtonGroupConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_ButtonGroupConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_ButtonGroupConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_ButtonGroupConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ButtonGroupConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ButtonGroupConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ButtonGroupConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_ButtonGroupConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_ButtonGroupConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_ButtonGroupConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_ButtonGroupConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_ButtonGroupConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_ButtonGroupConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_ButtonGroupConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_ButtonGroupConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ButtonGroupConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ButtonGroupConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_ButtonGroupConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_ButtonGroupConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ButtonGroupConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ButtonGroupConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ButtonGroupConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_ButtonGroupConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ButtonGroupConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ButtonGroupConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ButtonGroupConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ButtonGroupConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_ButtonGroupConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ButtonGroupConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ButtonGroupConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ButtonGroupConfig$layout(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ButtonGroupConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ButtonGroupConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ButtonGroupConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_ButtonGroupConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_ButtonGroupConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ButtonGroupConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ButtonGroupConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_ButtonGroupConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_ButtonGroupConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ButtonGroupConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ButtonGroupConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_ButtonGroupConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_ButtonGroupConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ButtonGroupConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ButtonGroupConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ButtonGroupConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ButtonGroupConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_ButtonGroupConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_ButtonGroupConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_ButtonGroupConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_ButtonGroupConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ButtonGroupConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ButtonGroupConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ButtonGroupConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ButtonGroupConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_ButtonGroupConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_ButtonGroupConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_ButtonGroupConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_ButtonGroupConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_ButtonGroupConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_ButtonGroupConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_ButtonGroupConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ButtonGroupConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_ButtonGroupConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_ButtonGroupConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ButtonGroupConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ButtonGroupConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ButtonGroupConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ButtonGroupConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ColorPaletteConfig

Ext.ColorPaletteConfig = function Ext_ColorPaletteConfig() {
    Ext.ColorPaletteConfig.initializeBase(this);
}
Ext.ColorPaletteConfig.prototype = {
    
    allowDomMove: function Ext_ColorPaletteConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    allowReselect: function Ext_ColorPaletteConfig$allowReselect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['allowReselect'] = value;
        return this;
    },
    
    applyTo: function Ext_ColorPaletteConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_ColorPaletteConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_ColorPaletteConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ColorPaletteConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ColorPaletteConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickEvent: function Ext_ColorPaletteConfig$clickEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['clickEvent'] = value;
        return this;
    },
    
    cls: function Ext_ColorPaletteConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ColorPaletteConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ColorPaletteConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ColorPaletteConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ColorPaletteConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ColorPaletteConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ColorPaletteConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    handler: function Ext_ColorPaletteConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    hidden: function Ext_ColorPaletteConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ColorPaletteConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ColorPaletteConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ColorPaletteConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ColorPaletteConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ColorPaletteConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ColorPaletteConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ColorPaletteConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ColorPaletteConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ColorPaletteConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ColorPaletteConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    overCls: function Ext_ColorPaletteConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_ColorPaletteConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ColorPaletteConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ColorPaletteConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_ColorPaletteConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    scope: function Ext_ColorPaletteConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stateEvents: function Ext_ColorPaletteConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ColorPaletteConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ColorPaletteConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ColorPaletteConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tpl: function Ext_ColorPaletteConfig$tpl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ColorPaletteConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    value: function Ext_ColorPaletteConfig$value(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    xtype: function Ext_ColorPaletteConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ColorPaletteConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ComponentConfig

Ext.ComponentConfig = function Ext_ComponentConfig() {
    Ext.ComponentConfig.initializeBase(this);
}
Ext.ComponentConfig.prototype = {
    
    allowDomMove: function Ext_ComponentConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_ComponentConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_ComponentConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_ComponentConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ComponentConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ComponentConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ComponentConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ComponentConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ComponentConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ComponentConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ComponentConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ComponentConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ComponentConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    hidden: function Ext_ComponentConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ComponentConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ComponentConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ComponentConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ComponentConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ComponentConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ComponentConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ComponentConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ComponentConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ComponentConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ComponentConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    overCls: function Ext_ComponentConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_ComponentConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ComponentConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ComponentConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_ComponentConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_ComponentConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ComponentConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ComponentConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ComponentConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tpl: function Ext_ComponentConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ComponentConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    xtype: function Ext_ComponentConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ComponentConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ContainerConfig

Ext.ContainerConfig = function Ext_ContainerConfig() {
    Ext.ContainerConfig.initializeBase(this);
}
Ext.ContainerConfig.prototype = {
    
    activeItem: function Ext_ContainerConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ContainerConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ContainerConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ContainerConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ContainerConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ContainerConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ContainerConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ContainerConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ContainerConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ContainerConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ContainerConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ContainerConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ContainerConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ContainerConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ContainerConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ContainerConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    clearCls: function Ext_ContainerConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ContainerConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ContainerConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ContainerConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ContainerConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_ContainerConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ContainerConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ContainerConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ContainerConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ContainerConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ContainerConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    forceLayout: function Ext_ContainerConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    height: function Ext_ContainerConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ContainerConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ContainerConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_ContainerConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ContainerConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ContainerConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ContainerConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ContainerConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ContainerConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ContainerConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ContainerConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ContainerConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ContainerConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ContainerConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ContainerConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ContainerConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ContainerConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    monitorResize: function Ext_ContainerConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ContainerConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ContainerConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ContainerConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ContainerConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ContainerConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ContainerConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ContainerConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ContainerConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ContainerConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    stateEvents: function Ext_ContainerConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ContainerConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ContainerConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ContainerConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ContainerConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ContainerConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ContainerConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ContainerConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ContainerConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ContainerConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ContainerConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ContainerConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.CycleButtonConfig

Ext.CycleButtonConfig = function Ext_CycleButtonConfig() {
    Ext.CycleButtonConfig.initializeBase(this);
}
Ext.CycleButtonConfig.prototype = {
    
    allowDepress: function Ext_CycleButtonConfig$allowDepress(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['allowDepress'] = value;
        return this;
    },
    
    allowDomMove: function Ext_CycleButtonConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_CycleButtonConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_CycleButtonConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    arrowAlign: function Ext_CycleButtonConfig$arrowAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['arrowAlign'] = value;
        return this;
    },
    
    arrowHandler: function Ext_CycleButtonConfig$arrowHandler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['arrowHandler'] = value;
        return this;
    },
    
    arrowTooltip: function Ext_CycleButtonConfig$arrowTooltip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['arrowTooltip'] = value;
        return this;
    },
    
    autoEl: function Ext_CycleButtonConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_CycleButtonConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_CycleButtonConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_CycleButtonConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_CycleButtonConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_CycleButtonConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_CycleButtonConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_CycleButtonConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_CycleButtonConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_CycleButtonConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    buttonSelector: function Ext_CycleButtonConfig$buttonSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['buttonSelector'] = value;
        return this;
    },
    
    changeHandler: function Ext_CycleButtonConfig$changeHandler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['changeHandler'] = value;
        return this;
    },
    
    clearCls: function Ext_CycleButtonConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickEvent: function Ext_CycleButtonConfig$clickEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['clickEvent'] = value;
        return this;
    },
    
    cls: function Ext_CycleButtonConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_CycleButtonConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_CycleButtonConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_CycleButtonConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_CycleButtonConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_CycleButtonConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableToggle: function Ext_CycleButtonConfig$enableToggle(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['enableToggle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_CycleButtonConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_CycleButtonConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    forceIcon: function Ext_CycleButtonConfig$forceIcon(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['forceIcon'] = value;
        return this;
    },
    
    handleMouseEvents: function Ext_CycleButtonConfig$handleMouseEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['handleMouseEvents'] = value;
        return this;
    },
    
    handler: function Ext_CycleButtonConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    height: function Ext_CycleButtonConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_CycleButtonConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_CycleButtonConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_CycleButtonConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_CycleButtonConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_CycleButtonConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    icon: function Ext_CycleButtonConfig$icon(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['icon'] = value;
        return this;
    },
    
    iconAlign: function Ext_CycleButtonConfig$iconAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['iconAlign'] = value;
        return this;
    },
    
    iconCls: function Ext_CycleButtonConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_CycleButtonConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_CycleButtonConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_CycleButtonConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_CycleButtonConfig$items(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_CycleButtonConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_CycleButtonConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_CycleButtonConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_CycleButtonConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    menu: function Ext_CycleButtonConfig$menu(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['menu'] = value;
        return this;
    },
    
    menuAlign: function Ext_CycleButtonConfig$menuAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['menuAlign'] = value;
        return this;
    },
    
    minWidth: function Ext_CycleButtonConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    overCls: function Ext_CycleButtonConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    overflowText: function Ext_CycleButtonConfig$overflowText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['overflowText'] = value;
        return this;
    },
    
    pageX: function Ext_CycleButtonConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_CycleButtonConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_CycleButtonConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    prependText: function Ext_CycleButtonConfig$prependText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['prependText'] = value;
        return this;
    },
    
    pressed: function Ext_CycleButtonConfig$pressed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['pressed'] = value;
        return this;
    },
    
    ptype: function Ext_CycleButtonConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_CycleButtonConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_CycleButtonConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_CycleButtonConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    repeat: function Ext_CycleButtonConfig$repeat(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['repeat'] = value;
        return this;
    },
    
    scale: function Ext_CycleButtonConfig$scale(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['scale'] = value;
        return this;
    },
    
    scope: function Ext_CycleButtonConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    showText: function Ext_CycleButtonConfig$showText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['showText'] = value;
        return this;
    },
    
    stateEvents: function Ext_CycleButtonConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_CycleButtonConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_CycleButtonConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_CycleButtonConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabIndex: function Ext_CycleButtonConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_CycleButtonConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    text: function Ext_CycleButtonConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    toggleGroup: function Ext_CycleButtonConfig$toggleGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['toggleGroup'] = value;
        return this;
    },
    
    toggleHandler: function Ext_CycleButtonConfig$toggleHandler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['toggleHandler'] = value;
        return this;
    },
    
    tooltip: function Ext_CycleButtonConfig$tooltip(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    tooltipType: function Ext_CycleButtonConfig$tooltipType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['tooltipType'] = value;
        return this;
    },
    
    tpl: function Ext_CycleButtonConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_CycleButtonConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    type: function Ext_CycleButtonConfig$type(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['type'] = value;
        return this;
    },
    
    width: function Ext_CycleButtonConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_CycleButtonConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_CycleButtonConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_CycleButtonConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.CycleButtonConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.DataViewConfig

Ext.DataViewConfig = function Ext_DataViewConfig() {
    Ext.DataViewConfig.initializeBase(this);
}
Ext.DataViewConfig.prototype = {
    
    allowDomMove: function Ext_DataViewConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_DataViewConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_DataViewConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_DataViewConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_DataViewConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_DataViewConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_DataViewConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_DataViewConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blockRefresh: function Ext_DataViewConfig$blockRefresh(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['blockRefresh'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_DataViewConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_DataViewConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_DataViewConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_DataViewConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_DataViewConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_DataViewConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_DataViewConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_DataViewConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_DataViewConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_DataViewConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    deferEmptyText: function Ext_DataViewConfig$deferEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['deferEmptyText'] = value;
        return this;
    },
    
    disabled: function Ext_DataViewConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_DataViewConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    emptyText: function Ext_DataViewConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    fieldLabel: function Ext_DataViewConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_DataViewConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_DataViewConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_DataViewConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_DataViewConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_DataViewConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_DataViewConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_DataViewConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_DataViewConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_DataViewConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_DataViewConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    itemSelector: function Ext_DataViewConfig$itemSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['itemSelector'] = value;
        return this;
    },
    
    labelSeparator: function Ext_DataViewConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_DataViewConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_DataViewConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadingText: function Ext_DataViewConfig$loadingText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['loadingText'] = value;
        return this;
    },
    
    margins: function Ext_DataViewConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    multiSelect: function Ext_DataViewConfig$multiSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['multiSelect'] = value;
        return this;
    },
    
    overClass: function Ext_DataViewConfig$overClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['overClass'] = value;
        return this;
    },
    
    overCls: function Ext_DataViewConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_DataViewConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_DataViewConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_DataViewConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_DataViewConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_DataViewConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_DataViewConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_DataViewConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    selectedClass: function Ext_DataViewConfig$selectedClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['selectedClass'] = value;
        return this;
    },
    
    simpleSelect: function Ext_DataViewConfig$simpleSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['simpleSelect'] = value;
        return this;
    },
    
    singleSelect: function Ext_DataViewConfig$singleSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['singleSelect'] = value;
        return this;
    },
    
    stateEvents: function Ext_DataViewConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_DataViewConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_DataViewConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_DataViewConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    style: function Ext_DataViewConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_DataViewConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_DataViewConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_DataViewConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackOver: function Ext_DataViewConfig$trackOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['trackOver'] = value;
        return this;
    },
    
    width: function Ext_DataViewConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_DataViewConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_DataViewConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_DataViewConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DataViewConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.DatePickerConfig

Ext.DatePickerConfig = function Ext_DatePickerConfig() {
    Ext.DatePickerConfig.initializeBase(this);
}
Ext.DatePickerConfig.prototype = {
    
    allowDomMove: function Ext_DatePickerConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_DatePickerConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_DatePickerConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_DatePickerConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_DatePickerConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    cancelText: function Ext_DatePickerConfig$cancelText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['cancelText'] = value;
        return this;
    },
    
    clearCls: function Ext_DatePickerConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_DatePickerConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_DatePickerConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_DatePickerConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_DatePickerConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    dayNames: function Ext_DatePickerConfig$dayNames(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['dayNames'] = value;
        return this;
    },
    
    disabled: function Ext_DatePickerConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_DatePickerConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    disabledDates: function Ext_DatePickerConfig$disabledDates(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['disabledDates'] = value;
        return this;
    },
    
    disabledDatesRE: function Ext_DatePickerConfig$disabledDatesRE(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['disabledDatesRE'] = value;
        return this;
    },
    
    disabledDatesText: function Ext_DatePickerConfig$disabledDatesText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['disabledDatesText'] = value;
        return this;
    },
    
    disabledDays: function Ext_DatePickerConfig$disabledDays(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['disabledDays'] = value;
        return this;
    },
    
    disabledDaysText: function Ext_DatePickerConfig$disabledDaysText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['disabledDaysText'] = value;
        return this;
    },
    
    fieldLabel: function Ext_DatePickerConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    format: function Ext_DatePickerConfig$format(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['format'] = value;
        return this;
    },
    
    handler: function Ext_DatePickerConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    hidden: function Ext_DatePickerConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_DatePickerConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_DatePickerConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_DatePickerConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_DatePickerConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_DatePickerConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_DatePickerConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_DatePickerConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_DatePickerConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_DatePickerConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_DatePickerConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    maxDate: function Ext_DatePickerConfig$maxDate(value) {
        /// <param name="value" type="Date">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['maxDate'] = value;
        return this;
    },
    
    maxText: function Ext_DatePickerConfig$maxText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['maxText'] = value;
        return this;
    },
    
    minDate: function Ext_DatePickerConfig$minDate(value) {
        /// <param name="value" type="Date">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['minDate'] = value;
        return this;
    },
    
    minText: function Ext_DatePickerConfig$minText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['minText'] = value;
        return this;
    },
    
    monthNames: function Ext_DatePickerConfig$monthNames(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['monthNames'] = value;
        return this;
    },
    
    monthYearText: function Ext_DatePickerConfig$monthYearText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['monthYearText'] = value;
        return this;
    },
    
    nextText: function Ext_DatePickerConfig$nextText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['nextText'] = value;
        return this;
    },
    
    okText: function Ext_DatePickerConfig$okText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['okText'] = value;
        return this;
    },
    
    overCls: function Ext_DatePickerConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_DatePickerConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    prevText: function Ext_DatePickerConfig$prevText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['prevText'] = value;
        return this;
    },
    
    ptype: function Ext_DatePickerConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_DatePickerConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_DatePickerConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    scope: function Ext_DatePickerConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    showToday: function Ext_DatePickerConfig$showToday(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['showToday'] = value;
        return this;
    },
    
    startDay: function Ext_DatePickerConfig$startDay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['startDay'] = value;
        return this;
    },
    
    stateEvents: function Ext_DatePickerConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_DatePickerConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_DatePickerConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_DatePickerConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    todayText: function Ext_DatePickerConfig$todayText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['todayText'] = value;
        return this;
    },
    
    todayTip: function Ext_DatePickerConfig$todayTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['todayTip'] = value;
        return this;
    },
    
    tpl: function Ext_DatePickerConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_DatePickerConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    xtype: function Ext_DatePickerConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.DatePickerConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.DirectConfig

Ext.DirectConfig = function Ext_DirectConfig() {
    Ext.DirectConfig.initializeBase(this);
}
Ext.DirectConfig.prototype = {
    
    listeners: function Ext_DirectConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.DirectConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.EditorConfig

Ext.EditorConfig = function Ext_EditorConfig() {
    Ext.EditorConfig.initializeBase(this);
}
Ext.EditorConfig.prototype = {
    
    alignment: function Ext_EditorConfig$alignment(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['alignment'] = value;
        return this;
    },
    
    allowBlur: function Ext_EditorConfig$allowBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['allowBlur'] = value;
        return this;
    },
    
    allowDomMove: function Ext_EditorConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_EditorConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_EditorConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_EditorConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoSize: function Ext_EditorConfig$autoSize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['autoSize'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_EditorConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    cancelOnEsc: function Ext_EditorConfig$cancelOnEsc(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['cancelOnEsc'] = value;
        return this;
    },
    
    clearCls: function Ext_EditorConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_EditorConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    completeOnEnter: function Ext_EditorConfig$completeOnEnter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['completeOnEnter'] = value;
        return this;
    },
    
    constrain: function Ext_EditorConfig$constrain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['constrain'] = value;
        return this;
    },
    
    contentEl: function Ext_EditorConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_EditorConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_EditorConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_EditorConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_EditorConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    field: function Ext_EditorConfig$field(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['field'] = value;
        return this;
    },
    
    fieldLabel: function Ext_EditorConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    hidden: function Ext_EditorConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideEl: function Ext_EditorConfig$hideEl(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['hideEl'] = value;
        return this;
    },
    
    hideLabel: function Ext_EditorConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_EditorConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_EditorConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_EditorConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_EditorConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    ignoreNoChange: function Ext_EditorConfig$ignoreNoChange(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['ignoreNoChange'] = value;
        return this;
    },
    
    itemCls: function Ext_EditorConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_EditorConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_EditorConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_EditorConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_EditorConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    offsets: function Ext_EditorConfig$offsets(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['offsets'] = value;
        return this;
    },
    
    overCls: function Ext_EditorConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_EditorConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_EditorConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_EditorConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_EditorConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    revertInvalid: function Ext_EditorConfig$revertInvalid(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['revertInvalid'] = value;
        return this;
    },
    
    shadow: function Ext_EditorConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    stateEvents: function Ext_EditorConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_EditorConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_EditorConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_EditorConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    swallowKeys: function Ext_EditorConfig$swallowKeys(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['swallowKeys'] = value;
        return this;
    },
    
    tpl: function Ext_EditorConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_EditorConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    updateEl: function Ext_EditorConfig$updateEl(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['updateEl'] = value;
        return this;
    },
    
    value: function Ext_EditorConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    xtype: function Ext_EditorConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.EditorConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ElementConfig

Ext.ElementConfig = function Ext_ElementConfig() {
    Ext.ElementConfig.initializeBase(this);
}
Ext.ElementConfig.prototype = {
    
    afterCls: function Ext_ElementConfig$afterCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['afterCls'] = value;
        return this;
    },
    
    afterStyle: function Ext_ElementConfig$afterStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['afterStyle'] = value;
        return this;
    },
    
    block: function Ext_ElementConfig$block(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['block'] = value;
        return this;
    },
    
    callback: function Ext_ElementConfig$callback(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['callback'] = value;
        return this;
    },
    
    concurrent: function Ext_ElementConfig$concurrent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['concurrent'] = value;
        return this;
    },
    
    duration: function Ext_ElementConfig$duration(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['duration'] = value;
        return this;
    },
    
    easing: function Ext_ElementConfig$easing(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['easing'] = value;
        return this;
    },
    
    endOpacity: function Ext_ElementConfig$endOpacity(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['endOpacity'] = value;
        return this;
    },
    
    remove: function Ext_ElementConfig$remove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['remove'] = value;
        return this;
    },
    
    scope: function Ext_ElementConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stopFx: function Ext_ElementConfig$stopFx(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['stopFx'] = value;
        return this;
    },
    
    useDisplay: function Ext_ElementConfig$useDisplay(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ElementConfig"></returns>
        this.o['useDisplay'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.FlashComponentConfig

Ext.FlashComponentConfig = function Ext_FlashComponentConfig() {
    Ext.FlashComponentConfig.initializeBase(this);
}
Ext.FlashComponentConfig.prototype = {
    
    allowDomMove: function Ext_FlashComponentConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_FlashComponentConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_FlashComponentConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_FlashComponentConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_FlashComponentConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_FlashComponentConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_FlashComponentConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_FlashComponentConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    backgroundColor: function Ext_FlashComponentConfig$backgroundColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['backgroundColor'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_FlashComponentConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_FlashComponentConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_FlashComponentConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_FlashComponentConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_FlashComponentConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_FlashComponentConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_FlashComponentConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_FlashComponentConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_FlashComponentConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_FlashComponentConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_FlashComponentConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_FlashComponentConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    expressInstall: function Ext_FlashComponentConfig$expressInstall(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['expressInstall'] = value;
        return this;
    },
    
    fieldLabel: function Ext_FlashComponentConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flashParams: function Ext_FlashComponentConfig$flashParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['flashParams'] = value;
        return this;
    },
    
    flashVars: function Ext_FlashComponentConfig$flashVars(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['flashVars'] = value;
        return this;
    },
    
    flashVersion: function Ext_FlashComponentConfig$flashVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['flashVersion'] = value;
        return this;
    },
    
    flex: function Ext_FlashComponentConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_FlashComponentConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_FlashComponentConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_FlashComponentConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_FlashComponentConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_FlashComponentConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_FlashComponentConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_FlashComponentConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_FlashComponentConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_FlashComponentConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_FlashComponentConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_FlashComponentConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_FlashComponentConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_FlashComponentConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_FlashComponentConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_FlashComponentConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_FlashComponentConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_FlashComponentConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_FlashComponentConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_FlashComponentConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_FlashComponentConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_FlashComponentConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_FlashComponentConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_FlashComponentConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_FlashComponentConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_FlashComponentConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_FlashComponentConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_FlashComponentConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_FlashComponentConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    url: function Ext_FlashComponentConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    width: function Ext_FlashComponentConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wmode: function Ext_FlashComponentConfig$wmode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['wmode'] = value;
        return this;
    },
    
    x: function Ext_FlashComponentConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_FlashComponentConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_FlashComponentConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FlashComponentConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.FxConfig

Ext.FxConfig = function Ext_FxConfig() {
    Ext.FxConfig.initializeBase(this);
}
Ext.FxConfig.prototype = {
    
    afterCls: function Ext_FxConfig$afterCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['afterCls'] = value;
        return this;
    },
    
    afterStyle: function Ext_FxConfig$afterStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['afterStyle'] = value;
        return this;
    },
    
    block: function Ext_FxConfig$block(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['block'] = value;
        return this;
    },
    
    callback: function Ext_FxConfig$callback(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['callback'] = value;
        return this;
    },
    
    concurrent: function Ext_FxConfig$concurrent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['concurrent'] = value;
        return this;
    },
    
    duration: function Ext_FxConfig$duration(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['duration'] = value;
        return this;
    },
    
    easing: function Ext_FxConfig$easing(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['easing'] = value;
        return this;
    },
    
    endOpacity: function Ext_FxConfig$endOpacity(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['endOpacity'] = value;
        return this;
    },
    
    remove: function Ext_FxConfig$remove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['remove'] = value;
        return this;
    },
    
    scope: function Ext_FxConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stopFx: function Ext_FxConfig$stopFx(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['stopFx'] = value;
        return this;
    },
    
    useDisplay: function Ext_FxConfig$useDisplay(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.FxConfig"></returns>
        this.o['useDisplay'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.HistoryConfig

Ext.HistoryConfig = function Ext_HistoryConfig() {
    Ext.HistoryConfig.initializeBase(this);
}
Ext.HistoryConfig.prototype = {
    
    listeners: function Ext_HistoryConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.HistoryConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.KeyNavConfig

Ext.KeyNavConfig = function Ext_KeyNavConfig() {
    Ext.KeyNavConfig.initializeBase(this);
}
Ext.KeyNavConfig.prototype = {
    
    defaultEventAction: function Ext_KeyNavConfig$defaultEventAction(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.KeyNavConfig"></returns>
        this.o['defaultEventAction'] = value;
        return this;
    },
    
    disabled: function Ext_KeyNavConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.KeyNavConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    forceKeyDown: function Ext_KeyNavConfig$forceKeyDown(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.KeyNavConfig"></returns>
        this.o['forceKeyDown'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.LayerConfig

Ext.LayerConfig = function Ext_LayerConfig() {
    Ext.LayerConfig.initializeBase(this);
}
Ext.LayerConfig.prototype = {
    
    afterCls: function Ext_LayerConfig$afterCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['afterCls'] = value;
        return this;
    },
    
    afterStyle: function Ext_LayerConfig$afterStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['afterStyle'] = value;
        return this;
    },
    
    block: function Ext_LayerConfig$block(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['block'] = value;
        return this;
    },
    
    callback: function Ext_LayerConfig$callback(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['callback'] = value;
        return this;
    },
    
    cls: function Ext_LayerConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    concurrent: function Ext_LayerConfig$concurrent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['concurrent'] = value;
        return this;
    },
    
    constrain: function Ext_LayerConfig$constrain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['constrain'] = value;
        return this;
    },
    
    dh: function Ext_LayerConfig$dh(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['dh'] = value;
        return this;
    },
    
    duration: function Ext_LayerConfig$duration(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['duration'] = value;
        return this;
    },
    
    easing: function Ext_LayerConfig$easing(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['easing'] = value;
        return this;
    },
    
    endOpacity: function Ext_LayerConfig$endOpacity(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['endOpacity'] = value;
        return this;
    },
    
    remove: function Ext_LayerConfig$remove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['remove'] = value;
        return this;
    },
    
    scope: function Ext_LayerConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    shadow: function Ext_LayerConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_LayerConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_LayerConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stopFx: function Ext_LayerConfig$stopFx(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['stopFx'] = value;
        return this;
    },
    
    useDisplay: function Ext_LayerConfig$useDisplay(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['useDisplay'] = value;
        return this;
    },
    
    zindex: function Ext_LayerConfig$zindex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.LayerConfig"></returns>
        this.o['zindex'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.LoadMaskConfig

Ext.LoadMaskConfig = function Ext_LoadMaskConfig() {
    Ext.LoadMaskConfig.initializeBase(this);
}
Ext.LoadMaskConfig.prototype = {
    
    msg: function Ext_LoadMaskConfig$msg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.LoadMaskConfig"></returns>
        this.o['msg'] = value;
        return this;
    },
    
    msgCls: function Ext_LoadMaskConfig$msgCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.LoadMaskConfig"></returns>
        this.o['msgCls'] = value;
        return this;
    },
    
    removeMask: function Ext_LoadMaskConfig$removeMask(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.LoadMaskConfig"></returns>
        this.o['removeMask'] = value;
        return this;
    },
    
    store: function Ext_LoadMaskConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.LoadMaskConfig"></returns>
        this.o['store'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.PagingToolbarConfig

Ext.PagingToolbarConfig = function Ext_PagingToolbarConfig() {
    Ext.PagingToolbarConfig.initializeBase(this);
}
Ext.PagingToolbarConfig.prototype = {
    
    activeItem: function Ext_PagingToolbarConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    afterPageText: function Ext_PagingToolbarConfig$afterPageText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['afterPageText'] = value;
        return this;
    },
    
    allowDomMove: function Ext_PagingToolbarConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_PagingToolbarConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_PagingToolbarConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_PagingToolbarConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_PagingToolbarConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_PagingToolbarConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_PagingToolbarConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_PagingToolbarConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_PagingToolbarConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    beforePageText: function Ext_PagingToolbarConfig$beforePageText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['beforePageText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_PagingToolbarConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_PagingToolbarConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_PagingToolbarConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_PagingToolbarConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_PagingToolbarConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_PagingToolbarConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_PagingToolbarConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    clearCls: function Ext_PagingToolbarConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_PagingToolbarConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_PagingToolbarConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_PagingToolbarConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_PagingToolbarConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_PagingToolbarConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_PagingToolbarConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_PagingToolbarConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_PagingToolbarConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    displayInfo: function Ext_PagingToolbarConfig$displayInfo(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['displayInfo'] = value;
        return this;
    },
    
    displayMsg: function Ext_PagingToolbarConfig$displayMsg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['displayMsg'] = value;
        return this;
    },
    
    emptyMsg: function Ext_PagingToolbarConfig$emptyMsg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['emptyMsg'] = value;
        return this;
    },
    
    enableOverflow: function Ext_PagingToolbarConfig$enableOverflow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['enableOverflow'] = value;
        return this;
    },
    
    fieldLabel: function Ext_PagingToolbarConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    firstText: function Ext_PagingToolbarConfig$firstText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['firstText'] = value;
        return this;
    },
    
    flex: function Ext_PagingToolbarConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    forceLayout: function Ext_PagingToolbarConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    height: function Ext_PagingToolbarConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_PagingToolbarConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_PagingToolbarConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_PagingToolbarConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_PagingToolbarConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_PagingToolbarConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_PagingToolbarConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_PagingToolbarConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_PagingToolbarConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_PagingToolbarConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_PagingToolbarConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_PagingToolbarConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_PagingToolbarConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    lastText: function Ext_PagingToolbarConfig$lastText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['lastText'] = value;
        return this;
    },
    
    layout: function Ext_PagingToolbarConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_PagingToolbarConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_PagingToolbarConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_PagingToolbarConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    monitorResize: function Ext_PagingToolbarConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    nextText: function Ext_PagingToolbarConfig$nextText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['nextText'] = value;
        return this;
    },
    
    overCls: function Ext_PagingToolbarConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageSize: function Ext_PagingToolbarConfig$pageSize(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['pageSize'] = value;
        return this;
    },
    
    pageX: function Ext_PagingToolbarConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_PagingToolbarConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_PagingToolbarConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    prependButtons: function Ext_PagingToolbarConfig$prependButtons(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['prependButtons'] = value;
        return this;
    },
    
    prevText: function Ext_PagingToolbarConfig$prevText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['prevText'] = value;
        return this;
    },
    
    ptype: function Ext_PagingToolbarConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_PagingToolbarConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    refreshText: function Ext_PagingToolbarConfig$refreshText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['refreshText'] = value;
        return this;
    },
    
    region: function Ext_PagingToolbarConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_PagingToolbarConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_PagingToolbarConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    stateEvents: function Ext_PagingToolbarConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_PagingToolbarConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_PagingToolbarConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_PagingToolbarConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    style: function Ext_PagingToolbarConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_PagingToolbarConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_PagingToolbarConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_PagingToolbarConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_PagingToolbarConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_PagingToolbarConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_PagingToolbarConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_PagingToolbarConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PagingToolbarConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.PanelConfig

Ext.PanelConfig = function Ext_PanelConfig() {
    Ext.PanelConfig.initializeBase(this);
}
Ext.PanelConfig.prototype = {
    
    activeItem: function Ext_PanelConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_PanelConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_PanelConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_PanelConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_PanelConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_PanelConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_PanelConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_PanelConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_PanelConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_PanelConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_PanelConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_PanelConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_PanelConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_PanelConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_PanelConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_PanelConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_PanelConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_PanelConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_PanelConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_PanelConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_PanelConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_PanelConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_PanelConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_PanelConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_PanelConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_PanelConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_PanelConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_PanelConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_PanelConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_PanelConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_PanelConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_PanelConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_PanelConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_PanelConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_PanelConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_PanelConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_PanelConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_PanelConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_PanelConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_PanelConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_PanelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_PanelConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_PanelConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_PanelConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_PanelConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_PanelConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_PanelConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_PanelConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_PanelConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_PanelConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_PanelConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_PanelConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_PanelConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_PanelConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_PanelConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_PanelConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_PanelConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_PanelConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_PanelConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_PanelConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_PanelConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_PanelConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_PanelConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_PanelConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_PanelConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_PanelConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_PanelConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_PanelConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_PanelConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_PanelConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_PanelConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_PanelConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_PanelConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_PanelConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_PanelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_PanelConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_PanelConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_PanelConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_PanelConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_PanelConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_PanelConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_PanelConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_PanelConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_PanelConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_PanelConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_PanelConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_PanelConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_PanelConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_PanelConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_PanelConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_PanelConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_PanelConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_PanelConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_PanelConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_PanelConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_PanelConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_PanelConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_PanelConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_PanelConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_PanelConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_PanelConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_PanelConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_PanelConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_PanelConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_PanelConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_PanelConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_PanelConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_PanelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_PanelConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_PanelConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_PanelConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.PanelConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ProgressBarConfig

Ext.ProgressBarConfig = function Ext_ProgressBarConfig() {
    Ext.ProgressBarConfig.initializeBase(this);
}
Ext.ProgressBarConfig.prototype = {
    
    allowDomMove: function Ext_ProgressBarConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ProgressBarConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animate: function Ext_ProgressBarConfig$animate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['animate'] = value;
        return this;
    },
    
    applyTo: function Ext_ProgressBarConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_ProgressBarConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ProgressBarConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ProgressBarConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ProgressBarConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ProgressBarConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_ProgressBarConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ProgressBarConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ProgressBarConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ProgressBarConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ProgressBarConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ProgressBarConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ProgressBarConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ProgressBarConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ProgressBarConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ProgressBarConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ProgressBarConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ProgressBarConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ProgressBarConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ProgressBarConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ProgressBarConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_ProgressBarConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ProgressBarConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ProgressBarConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ProgressBarConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ProgressBarConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ProgressBarConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ProgressBarConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ProgressBarConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ProgressBarConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ProgressBarConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ProgressBarConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ProgressBarConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ProgressBarConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_ProgressBarConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ProgressBarConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ProgressBarConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ProgressBarConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ProgressBarConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ProgressBarConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ProgressBarConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ProgressBarConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_ProgressBarConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ProgressBarConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ProgressBarConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ProgressBarConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ProgressBarConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    text: function Ext_ProgressBarConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    textEl: function Ext_ProgressBarConfig$textEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['textEl'] = value;
        return this;
    },
    
    tpl: function Ext_ProgressBarConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ProgressBarConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    value: function Ext_ProgressBarConfig$value(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_ProgressBarConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ProgressBarConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ProgressBarConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ProgressBarConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ProgressBarConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.QuickTipConfig

Ext.QuickTipConfig = function Ext_QuickTipConfig() {
    Ext.QuickTipConfig.initializeBase(this);
}
Ext.QuickTipConfig.prototype = {
    
    activeItem: function Ext_QuickTipConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_QuickTipConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_QuickTipConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    anchorOffset: function Ext_QuickTipConfig$anchorOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['anchorOffset'] = value;
        return this;
    },
    
    anchorToTarget: function Ext_QuickTipConfig$anchorToTarget(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['anchorToTarget'] = value;
        return this;
    },
    
    animCollapse: function Ext_QuickTipConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_QuickTipConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_QuickTipConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_QuickTipConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_QuickTipConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoHide: function Ext_QuickTipConfig$autoHide(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['autoHide'] = value;
        return this;
    },
    
    autoLoad: function Ext_QuickTipConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_QuickTipConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_QuickTipConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_QuickTipConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_QuickTipConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_QuickTipConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_QuickTipConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_QuickTipConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_QuickTipConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_QuickTipConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_QuickTipConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_QuickTipConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_QuickTipConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_QuickTipConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_QuickTipConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_QuickTipConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_QuickTipConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_QuickTipConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_QuickTipConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_QuickTipConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_QuickTipConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_QuickTipConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_QuickTipConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_QuickTipConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_QuickTipConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_QuickTipConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_QuickTipConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_QuickTipConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_QuickTipConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_QuickTipConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_QuickTipConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultAlign: function Ext_QuickTipConfig$defaultAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['defaultAlign'] = value;
        return this;
    },
    
    defaultType: function Ext_QuickTipConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_QuickTipConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    delegate_: function Ext_QuickTipConfig$delegate_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['delegate'] = value;
        return this;
    },
    
    disabled: function Ext_QuickTipConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_QuickTipConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    dismissDelay: function Ext_QuickTipConfig$dismissDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['dismissDelay'] = value;
        return this;
    },
    
    draggable: function Ext_QuickTipConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_QuickTipConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_QuickTipConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_QuickTipConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_QuickTipConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_QuickTipConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_QuickTipConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_QuickTipConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_QuickTipConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_QuickTipConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_QuickTipConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_QuickTipConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_QuickTipConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_QuickTipConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_QuickTipConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_QuickTipConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_QuickTipConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideDelay: function Ext_QuickTipConfig$hideDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['hideDelay'] = value;
        return this;
    },
    
    hideLabel: function Ext_QuickTipConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_QuickTipConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_QuickTipConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_QuickTipConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_QuickTipConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_QuickTipConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    interceptTitles: function Ext_QuickTipConfig$interceptTitles(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['interceptTitles'] = value;
        return this;
    },
    
    itemCls: function Ext_QuickTipConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_QuickTipConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_QuickTipConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_QuickTipConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_QuickTipConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_QuickTipConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_QuickTipConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_QuickTipConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_QuickTipConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_QuickTipConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_QuickTipConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maxWidth: function Ext_QuickTipConfig$maxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['maxWidth'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_QuickTipConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minWidth: function Ext_QuickTipConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_QuickTipConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    mouseOffset: function Ext_QuickTipConfig$mouseOffset(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['mouseOffset'] = value;
        return this;
    },
    
    overCls: function Ext_QuickTipConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_QuickTipConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_QuickTipConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_QuickTipConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_QuickTipConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_QuickTipConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_QuickTipConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_QuickTipConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_QuickTipConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_QuickTipConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_QuickTipConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_QuickTipConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_QuickTipConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_QuickTipConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    showDelay: function Ext_QuickTipConfig$showDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['showDelay'] = value;
        return this;
    },
    
    stateEvents: function Ext_QuickTipConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_QuickTipConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_QuickTipConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_QuickTipConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_QuickTipConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    target: function Ext_QuickTipConfig$target(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['target'] = value;
        return this;
    },
    
    tbar: function Ext_QuickTipConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_QuickTipConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_QuickTipConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_QuickTipConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_QuickTipConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_QuickTipConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_QuickTipConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_QuickTipConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouse: function Ext_QuickTipConfig$trackMouse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['trackMouse'] = value;
        return this;
    },
    
    unstyled: function Ext_QuickTipConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_QuickTipConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_QuickTipConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_QuickTipConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_QuickTipConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.QuickTipConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ResizableConfig

Ext.ResizableConfig = function Ext_ResizableConfig() {
    Ext.ResizableConfig.initializeBase(this);
}
Ext.ResizableConfig.prototype = {
    
    adjustments: function Ext_ResizableConfig$adjustments(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['adjustments'] = value;
        return this;
    },
    
    animate: function Ext_ResizableConfig$animate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['animate'] = value;
        return this;
    },
    
    constrainTo: function Ext_ResizableConfig$constrainTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['constrainTo'] = value;
        return this;
    },
    
    disableTrackOver: function Ext_ResizableConfig$disableTrackOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['disableTrackOver'] = value;
        return this;
    },
    
    draggable: function Ext_ResizableConfig$draggable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    duration: function Ext_ResizableConfig$duration(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['duration'] = value;
        return this;
    },
    
    dynamic: function Ext_ResizableConfig$dynamic(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['dynamic'] = value;
        return this;
    },
    
    easing: function Ext_ResizableConfig$easing(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['easing'] = value;
        return this;
    },
    
    enabled: function Ext_ResizableConfig$enabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['enabled'] = value;
        return this;
    },
    
    handleCls: function Ext_ResizableConfig$handleCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['handleCls'] = value;
        return this;
    },
    
    handles: function Ext_ResizableConfig$handles(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['handles'] = value;
        return this;
    },
    
    height: function Ext_ResizableConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    heightIncrement: function Ext_ResizableConfig$heightIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['heightIncrement'] = value;
        return this;
    },
    
    listeners: function Ext_ResizableConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    maxHeight: function Ext_ResizableConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    maxWidth: function Ext_ResizableConfig$maxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['maxWidth'] = value;
        return this;
    },
    
    minHeight: function Ext_ResizableConfig$minHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['minHeight'] = value;
        return this;
    },
    
    minWidth: function Ext_ResizableConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    minX: function Ext_ResizableConfig$minX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['minX'] = value;
        return this;
    },
    
    minY: function Ext_ResizableConfig$minY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['minY'] = value;
        return this;
    },
    
    multiDirectional: function Ext_ResizableConfig$multiDirectional(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['multiDirectional'] = value;
        return this;
    },
    
    pinned: function Ext_ResizableConfig$pinned(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['pinned'] = value;
        return this;
    },
    
    preserveRatio: function Ext_ResizableConfig$preserveRatio(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['preserveRatio'] = value;
        return this;
    },
    
    resizeChild: function Ext_ResizableConfig$resizeChild(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['resizeChild'] = value;
        return this;
    },
    
    resizeRegion: function Ext_ResizableConfig$resizeRegion(value) {
        /// <param name="value" type="Ext.lib.Region">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['resizeRegion'] = value;
        return this;
    },
    
    transparent: function Ext_ResizableConfig$transparent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['transparent'] = value;
        return this;
    },
    
    width: function Ext_ResizableConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    widthIncrement: function Ext_ResizableConfig$widthIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['widthIncrement'] = value;
        return this;
    },
    
    wrap: function Ext_ResizableConfig$wrap(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ResizableConfig"></returns>
        this.o['wrap'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ShadowConfig

Ext.ShadowConfig = function Ext_ShadowConfig() {
    Ext.ShadowConfig.initializeBase(this);
}
Ext.ShadowConfig.prototype = {
    
    mode: function Ext_ShadowConfig$mode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ShadowConfig"></returns>
        this.o['mode'] = value;
        return this;
    },
    
    offset: function Ext_ShadowConfig$offset(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ShadowConfig"></returns>
        this.o['offset'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.SpacerConfig

Ext.SpacerConfig = function Ext_SpacerConfig() {
    Ext.SpacerConfig.initializeBase(this);
}
Ext.SpacerConfig.prototype = {
    
    allowDomMove: function Ext_SpacerConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_SpacerConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_SpacerConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_SpacerConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_SpacerConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_SpacerConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_SpacerConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_SpacerConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_SpacerConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_SpacerConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_SpacerConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_SpacerConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_SpacerConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_SpacerConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_SpacerConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_SpacerConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_SpacerConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_SpacerConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_SpacerConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_SpacerConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_SpacerConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_SpacerConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_SpacerConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_SpacerConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_SpacerConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_SpacerConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_SpacerConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_SpacerConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_SpacerConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_SpacerConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_SpacerConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_SpacerConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_SpacerConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_SpacerConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_SpacerConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_SpacerConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_SpacerConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_SpacerConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_SpacerConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_SpacerConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_SpacerConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_SpacerConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_SpacerConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_SpacerConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_SpacerConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_SpacerConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_SpacerConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_SpacerConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_SpacerConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_SpacerConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_SpacerConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_SpacerConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_SpacerConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_SpacerConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SpacerConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.SplitBarConfig

Ext.SplitBarConfig = function Ext_SplitBarConfig() {
    Ext.SplitBarConfig.initializeBase(this);
}
Ext.SplitBarConfig.prototype = {
    
    listeners: function Ext_SplitBarConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitBarConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.SplitButtonConfig

Ext.SplitButtonConfig = function Ext_SplitButtonConfig() {
    Ext.SplitButtonConfig.initializeBase(this);
}
Ext.SplitButtonConfig.prototype = {
    
    allowDepress: function Ext_SplitButtonConfig$allowDepress(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['allowDepress'] = value;
        return this;
    },
    
    allowDomMove: function Ext_SplitButtonConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_SplitButtonConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_SplitButtonConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    arrowAlign: function Ext_SplitButtonConfig$arrowAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['arrowAlign'] = value;
        return this;
    },
    
    arrowHandler: function Ext_SplitButtonConfig$arrowHandler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['arrowHandler'] = value;
        return this;
    },
    
    arrowTooltip: function Ext_SplitButtonConfig$arrowTooltip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['arrowTooltip'] = value;
        return this;
    },
    
    autoEl: function Ext_SplitButtonConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_SplitButtonConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_SplitButtonConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_SplitButtonConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_SplitButtonConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_SplitButtonConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_SplitButtonConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_SplitButtonConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_SplitButtonConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_SplitButtonConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    buttonSelector: function Ext_SplitButtonConfig$buttonSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['buttonSelector'] = value;
        return this;
    },
    
    clearCls: function Ext_SplitButtonConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickEvent: function Ext_SplitButtonConfig$clickEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['clickEvent'] = value;
        return this;
    },
    
    cls: function Ext_SplitButtonConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_SplitButtonConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_SplitButtonConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_SplitButtonConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_SplitButtonConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_SplitButtonConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableToggle: function Ext_SplitButtonConfig$enableToggle(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['enableToggle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_SplitButtonConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_SplitButtonConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    handleMouseEvents: function Ext_SplitButtonConfig$handleMouseEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['handleMouseEvents'] = value;
        return this;
    },
    
    handler: function Ext_SplitButtonConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    height: function Ext_SplitButtonConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_SplitButtonConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_SplitButtonConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_SplitButtonConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_SplitButtonConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_SplitButtonConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    icon: function Ext_SplitButtonConfig$icon(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['icon'] = value;
        return this;
    },
    
    iconAlign: function Ext_SplitButtonConfig$iconAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['iconAlign'] = value;
        return this;
    },
    
    iconCls: function Ext_SplitButtonConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_SplitButtonConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_SplitButtonConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_SplitButtonConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_SplitButtonConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_SplitButtonConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_SplitButtonConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_SplitButtonConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    menu: function Ext_SplitButtonConfig$menu(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['menu'] = value;
        return this;
    },
    
    menuAlign: function Ext_SplitButtonConfig$menuAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['menuAlign'] = value;
        return this;
    },
    
    minWidth: function Ext_SplitButtonConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    overCls: function Ext_SplitButtonConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    overflowText: function Ext_SplitButtonConfig$overflowText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['overflowText'] = value;
        return this;
    },
    
    pageX: function Ext_SplitButtonConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_SplitButtonConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_SplitButtonConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    pressed: function Ext_SplitButtonConfig$pressed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['pressed'] = value;
        return this;
    },
    
    ptype: function Ext_SplitButtonConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_SplitButtonConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_SplitButtonConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_SplitButtonConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    repeat: function Ext_SplitButtonConfig$repeat(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['repeat'] = value;
        return this;
    },
    
    scale: function Ext_SplitButtonConfig$scale(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['scale'] = value;
        return this;
    },
    
    scope: function Ext_SplitButtonConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stateEvents: function Ext_SplitButtonConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_SplitButtonConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_SplitButtonConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_SplitButtonConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabIndex: function Ext_SplitButtonConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_SplitButtonConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    text: function Ext_SplitButtonConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    toggleGroup: function Ext_SplitButtonConfig$toggleGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['toggleGroup'] = value;
        return this;
    },
    
    toggleHandler: function Ext_SplitButtonConfig$toggleHandler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['toggleHandler'] = value;
        return this;
    },
    
    tooltip: function Ext_SplitButtonConfig$tooltip(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    tooltipType: function Ext_SplitButtonConfig$tooltipType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['tooltipType'] = value;
        return this;
    },
    
    tpl: function Ext_SplitButtonConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_SplitButtonConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    type: function Ext_SplitButtonConfig$type(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['type'] = value;
        return this;
    },
    
    width: function Ext_SplitButtonConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_SplitButtonConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_SplitButtonConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_SplitButtonConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.SplitButtonConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.StoreMgrConfig

Ext.StoreMgrConfig = function Ext_StoreMgrConfig() {
    Ext.StoreMgrConfig.initializeBase(this);
}
Ext.StoreMgrConfig.prototype = {
    
    allowFunctions: function Ext_StoreMgrConfig$allowFunctions(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.StoreMgrConfig"></returns>
        this.o['allowFunctions'] = value;
        return this;
    },
    
    listeners: function Ext_StoreMgrConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.StoreMgrConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.TabPanelConfig

Ext.TabPanelConfig = function Ext_TabPanelConfig() {
    Ext.TabPanelConfig.initializeBase(this);
}
Ext.TabPanelConfig.prototype = {
    
    activeItem: function Ext_TabPanelConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    activeTab: function Ext_TabPanelConfig$activeTab(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['activeTab'] = value;
        return this;
    },
    
    allowDomMove: function Ext_TabPanelConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_TabPanelConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_TabPanelConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    animScroll: function Ext_TabPanelConfig$animScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['animScroll'] = value;
        return this;
    },
    
    applyTo: function Ext_TabPanelConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_TabPanelConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_TabPanelConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_TabPanelConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_TabPanelConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_TabPanelConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_TabPanelConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoTabSelector: function Ext_TabPanelConfig$autoTabSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['autoTabSelector'] = value;
        return this;
    },
    
    autoTabs: function Ext_TabPanelConfig$autoTabs(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['autoTabs'] = value;
        return this;
    },
    
    autoWidth: function Ext_TabPanelConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_TabPanelConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_TabPanelConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_TabPanelConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_TabPanelConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_TabPanelConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_TabPanelConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_TabPanelConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_TabPanelConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_TabPanelConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_TabPanelConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_TabPanelConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_TabPanelConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_TabPanelConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_TabPanelConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_TabPanelConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_TabPanelConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_TabPanelConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_TabPanelConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_TabPanelConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_TabPanelConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_TabPanelConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_TabPanelConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_TabPanelConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_TabPanelConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_TabPanelConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_TabPanelConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_TabPanelConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_TabPanelConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_TabPanelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    deferredRender: function Ext_TabPanelConfig$deferredRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['deferredRender'] = value;
        return this;
    },
    
    disabled: function Ext_TabPanelConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_TabPanelConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_TabPanelConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_TabPanelConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableTabScroll: function Ext_TabPanelConfig$enableTabScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['enableTabScroll'] = value;
        return this;
    },
    
    fbar: function Ext_TabPanelConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_TabPanelConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_TabPanelConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_TabPanelConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_TabPanelConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_TabPanelConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_TabPanelConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_TabPanelConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_TabPanelConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_TabPanelConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_TabPanelConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_TabPanelConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_TabPanelConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_TabPanelConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_TabPanelConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_TabPanelConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_TabPanelConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_TabPanelConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_TabPanelConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_TabPanelConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_TabPanelConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_TabPanelConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_TabPanelConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    itemTpl: function Ext_TabPanelConfig$itemTpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['itemTpl'] = value;
        return this;
    },
    
    items: function Ext_TabPanelConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_TabPanelConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_TabPanelConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_TabPanelConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_TabPanelConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_TabPanelConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    layoutOnTabChange: function Ext_TabPanelConfig$layoutOnTabChange(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['layoutOnTabChange'] = value;
        return this;
    },
    
    listeners: function Ext_TabPanelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_TabPanelConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_TabPanelConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_TabPanelConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minTabWidth: function Ext_TabPanelConfig$minTabWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['minTabWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_TabPanelConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_TabPanelConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_TabPanelConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_TabPanelConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_TabPanelConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plain: function Ext_TabPanelConfig$plain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['plain'] = value;
        return this;
    },
    
    plugins: function Ext_TabPanelConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_TabPanelConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_TabPanelConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_TabPanelConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_TabPanelConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_TabPanelConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_TabPanelConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    resizeTabs: function Ext_TabPanelConfig$resizeTabs(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['resizeTabs'] = value;
        return this;
    },
    
    scrollDuration: function Ext_TabPanelConfig$scrollDuration(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['scrollDuration'] = value;
        return this;
    },
    
    scrollIncrement: function Ext_TabPanelConfig$scrollIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['scrollIncrement'] = value;
        return this;
    },
    
    scrollRepeatInterval: function Ext_TabPanelConfig$scrollRepeatInterval(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['scrollRepeatInterval'] = value;
        return this;
    },
    
    shadow: function Ext_TabPanelConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_TabPanelConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_TabPanelConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_TabPanelConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_TabPanelConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_TabPanelConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_TabPanelConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabCls: function Ext_TabPanelConfig$tabCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tabCls'] = value;
        return this;
    },
    
    tabMargin: function Ext_TabPanelConfig$tabMargin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tabMargin'] = value;
        return this;
    },
    
    tabPosition: function Ext_TabPanelConfig$tabPosition(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tabPosition'] = value;
        return this;
    },
    
    tabTip: function Ext_TabPanelConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tabWidth: function Ext_TabPanelConfig$tabWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tabWidth'] = value;
        return this;
    },
    
    tbar: function Ext_TabPanelConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_TabPanelConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_TabPanelConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_TabPanelConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_TabPanelConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_TabPanelConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_TabPanelConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_TabPanelConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_TabPanelConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    wheelIncrement: function Ext_TabPanelConfig$wheelIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['wheelIncrement'] = value;
        return this;
    },
    
    width: function Ext_TabPanelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_TabPanelConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_TabPanelConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_TabPanelConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TabPanelConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.TemplateConfig

Ext.TemplateConfig = function Ext_TemplateConfig() {
    Ext.TemplateConfig.initializeBase(this);
}
Ext.TemplateConfig.prototype = {
    
    compiled: function Ext_TemplateConfig$compiled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TemplateConfig"></returns>
        this.o['compiled'] = value;
        return this;
    },
    
    disableFormats: function Ext_TemplateConfig$disableFormats(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TemplateConfig"></returns>
        this.o['disableFormats'] = value;
        return this;
    },
    
    re: function Ext_TemplateConfig$re(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.TemplateConfig"></returns>
        this.o['re'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.TipConfig

Ext.TipConfig = function Ext_TipConfig() {
    Ext.TipConfig.initializeBase(this);
}
Ext.TipConfig.prototype = {
    
    activeItem: function Ext_TipConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_TipConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_TipConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_TipConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_TipConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_TipConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_TipConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_TipConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_TipConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_TipConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_TipConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_TipConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_TipConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_TipConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_TipConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_TipConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_TipConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_TipConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_TipConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_TipConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_TipConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_TipConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_TipConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_TipConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_TipConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_TipConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_TipConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_TipConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_TipConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_TipConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_TipConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_TipConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_TipConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_TipConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_TipConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_TipConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_TipConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_TipConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_TipConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultAlign: function Ext_TipConfig$defaultAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['defaultAlign'] = value;
        return this;
    },
    
    defaultType: function Ext_TipConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_TipConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_TipConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_TipConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_TipConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_TipConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_TipConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_TipConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_TipConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_TipConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_TipConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_TipConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_TipConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_TipConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_TipConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_TipConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_TipConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_TipConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_TipConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_TipConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_TipConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_TipConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_TipConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_TipConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_TipConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_TipConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_TipConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_TipConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_TipConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_TipConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_TipConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_TipConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_TipConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_TipConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_TipConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_TipConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_TipConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_TipConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maxWidth: function Ext_TipConfig$maxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['maxWidth'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_TipConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minWidth: function Ext_TipConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_TipConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_TipConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_TipConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_TipConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_TipConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_TipConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_TipConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_TipConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_TipConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_TipConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_TipConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_TipConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_TipConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_TipConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_TipConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_TipConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_TipConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_TipConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_TipConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_TipConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_TipConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_TipConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_TipConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_TipConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_TipConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_TipConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_TipConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_TipConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_TipConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_TipConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_TipConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_TipConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_TipConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.TipConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ToolbarConfig

Ext.ToolbarConfig = function Ext_ToolbarConfig() {
    Ext.ToolbarConfig.initializeBase(this);
}
Ext.ToolbarConfig.prototype = {
    
    activeItem: function Ext_ToolbarConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ToolbarConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ToolbarConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ToolbarConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ToolbarConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ToolbarConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ToolbarConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ToolbarConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ToolbarConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ToolbarConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ToolbarConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ToolbarConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ToolbarConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ToolbarConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ToolbarConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ToolbarConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ToolbarConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    clearCls: function Ext_ToolbarConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ToolbarConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ToolbarConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ToolbarConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ToolbarConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_ToolbarConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ToolbarConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ToolbarConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ToolbarConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableOverflow: function Ext_ToolbarConfig$enableOverflow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['enableOverflow'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ToolbarConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ToolbarConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    forceLayout: function Ext_ToolbarConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    height: function Ext_ToolbarConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ToolbarConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ToolbarConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_ToolbarConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ToolbarConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ToolbarConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ToolbarConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ToolbarConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ToolbarConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ToolbarConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ToolbarConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ToolbarConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ToolbarConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ToolbarConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ToolbarConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ToolbarConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ToolbarConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    monitorResize: function Ext_ToolbarConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ToolbarConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ToolbarConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ToolbarConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ToolbarConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ToolbarConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ToolbarConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ToolbarConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ToolbarConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ToolbarConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    stateEvents: function Ext_ToolbarConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ToolbarConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ToolbarConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ToolbarConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ToolbarConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ToolbarConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ToolbarConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ToolbarConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ToolbarConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ToolbarConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ToolbarConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ToolbarFillConfig

Ext.ToolbarFillConfig = function Ext_ToolbarFillConfig() {
    Ext.ToolbarFillConfig.initializeBase(this);
}
Ext.ToolbarFillConfig.prototype = {
    
    allowDomMove: function Ext_ToolbarFillConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ToolbarFillConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ToolbarFillConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_ToolbarFillConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ToolbarFillConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ToolbarFillConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ToolbarFillConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ToolbarFillConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ToolbarFillConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ToolbarFillConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ToolbarFillConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ToolbarFillConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ToolbarFillConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ToolbarFillConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ToolbarFillConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ToolbarFillConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ToolbarFillConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ToolbarFillConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ToolbarFillConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ToolbarFillConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ToolbarFillConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ToolbarFillConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_ToolbarFillConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ToolbarFillConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ToolbarFillConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ToolbarFillConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ToolbarFillConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ToolbarFillConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ToolbarFillConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ToolbarFillConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ToolbarFillConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ToolbarFillConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ToolbarFillConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ToolbarFillConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ToolbarFillConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_ToolbarFillConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    overflowText: function Ext_ToolbarFillConfig$overflowText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['overflowText'] = value;
        return this;
    },
    
    pageX: function Ext_ToolbarFillConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ToolbarFillConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ToolbarFillConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ToolbarFillConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ToolbarFillConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ToolbarFillConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ToolbarFillConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_ToolbarFillConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ToolbarFillConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ToolbarFillConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ToolbarFillConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ToolbarFillConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ToolbarFillConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ToolbarFillConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ToolbarFillConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ToolbarFillConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ToolbarFillConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ToolbarFillConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarFillConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ToolbarItemConfig

Ext.ToolbarItemConfig = function Ext_ToolbarItemConfig() {
    Ext.ToolbarItemConfig.initializeBase(this);
}
Ext.ToolbarItemConfig.prototype = {
    
    allowDomMove: function Ext_ToolbarItemConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ToolbarItemConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ToolbarItemConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_ToolbarItemConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ToolbarItemConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ToolbarItemConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ToolbarItemConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ToolbarItemConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ToolbarItemConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ToolbarItemConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ToolbarItemConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ToolbarItemConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ToolbarItemConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ToolbarItemConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ToolbarItemConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ToolbarItemConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ToolbarItemConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ToolbarItemConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ToolbarItemConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ToolbarItemConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ToolbarItemConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ToolbarItemConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_ToolbarItemConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ToolbarItemConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ToolbarItemConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ToolbarItemConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ToolbarItemConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ToolbarItemConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ToolbarItemConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ToolbarItemConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ToolbarItemConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ToolbarItemConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ToolbarItemConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ToolbarItemConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ToolbarItemConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_ToolbarItemConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    overflowText: function Ext_ToolbarItemConfig$overflowText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['overflowText'] = value;
        return this;
    },
    
    pageX: function Ext_ToolbarItemConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ToolbarItemConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ToolbarItemConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ToolbarItemConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ToolbarItemConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ToolbarItemConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ToolbarItemConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_ToolbarItemConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ToolbarItemConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ToolbarItemConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ToolbarItemConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ToolbarItemConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ToolbarItemConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ToolbarItemConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ToolbarItemConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ToolbarItemConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ToolbarItemConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ToolbarItemConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarItemConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ToolbarSeparatorConfig

Ext.ToolbarSeparatorConfig = function Ext_ToolbarSeparatorConfig() {
    Ext.ToolbarSeparatorConfig.initializeBase(this);
}
Ext.ToolbarSeparatorConfig.prototype = {
    
    allowDomMove: function Ext_ToolbarSeparatorConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ToolbarSeparatorConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ToolbarSeparatorConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_ToolbarSeparatorConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ToolbarSeparatorConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ToolbarSeparatorConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ToolbarSeparatorConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ToolbarSeparatorConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ToolbarSeparatorConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ToolbarSeparatorConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ToolbarSeparatorConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ToolbarSeparatorConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ToolbarSeparatorConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ToolbarSeparatorConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ToolbarSeparatorConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ToolbarSeparatorConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ToolbarSeparatorConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ToolbarSeparatorConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ToolbarSeparatorConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ToolbarSeparatorConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ToolbarSeparatorConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ToolbarSeparatorConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_ToolbarSeparatorConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ToolbarSeparatorConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ToolbarSeparatorConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ToolbarSeparatorConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ToolbarSeparatorConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ToolbarSeparatorConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ToolbarSeparatorConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ToolbarSeparatorConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ToolbarSeparatorConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ToolbarSeparatorConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ToolbarSeparatorConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ToolbarSeparatorConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ToolbarSeparatorConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_ToolbarSeparatorConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    overflowText: function Ext_ToolbarSeparatorConfig$overflowText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['overflowText'] = value;
        return this;
    },
    
    pageX: function Ext_ToolbarSeparatorConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ToolbarSeparatorConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ToolbarSeparatorConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ToolbarSeparatorConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ToolbarSeparatorConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ToolbarSeparatorConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ToolbarSeparatorConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_ToolbarSeparatorConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ToolbarSeparatorConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ToolbarSeparatorConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ToolbarSeparatorConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ToolbarSeparatorConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ToolbarSeparatorConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ToolbarSeparatorConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ToolbarSeparatorConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ToolbarSeparatorConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ToolbarSeparatorConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ToolbarSeparatorConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSeparatorConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ToolbarSpacerConfig

Ext.ToolbarSpacerConfig = function Ext_ToolbarSpacerConfig() {
    Ext.ToolbarSpacerConfig.initializeBase(this);
}
Ext.ToolbarSpacerConfig.prototype = {
    
    allowDomMove: function Ext_ToolbarSpacerConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ToolbarSpacerConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ToolbarSpacerConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_ToolbarSpacerConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ToolbarSpacerConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ToolbarSpacerConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ToolbarSpacerConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ToolbarSpacerConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ToolbarSpacerConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ToolbarSpacerConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ToolbarSpacerConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ToolbarSpacerConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ToolbarSpacerConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ToolbarSpacerConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ToolbarSpacerConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ToolbarSpacerConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ToolbarSpacerConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ToolbarSpacerConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ToolbarSpacerConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ToolbarSpacerConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ToolbarSpacerConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ToolbarSpacerConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_ToolbarSpacerConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ToolbarSpacerConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ToolbarSpacerConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ToolbarSpacerConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ToolbarSpacerConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ToolbarSpacerConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ToolbarSpacerConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ToolbarSpacerConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ToolbarSpacerConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ToolbarSpacerConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ToolbarSpacerConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ToolbarSpacerConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ToolbarSpacerConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_ToolbarSpacerConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    overflowText: function Ext_ToolbarSpacerConfig$overflowText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['overflowText'] = value;
        return this;
    },
    
    pageX: function Ext_ToolbarSpacerConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ToolbarSpacerConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ToolbarSpacerConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ToolbarSpacerConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ToolbarSpacerConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ToolbarSpacerConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ToolbarSpacerConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_ToolbarSpacerConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ToolbarSpacerConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ToolbarSpacerConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ToolbarSpacerConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ToolbarSpacerConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ToolbarSpacerConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ToolbarSpacerConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ToolbarSpacerConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ToolbarSpacerConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ToolbarSpacerConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ToolbarSpacerConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarSpacerConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ToolbarTextItemConfig

Ext.ToolbarTextItemConfig = function Ext_ToolbarTextItemConfig() {
    Ext.ToolbarTextItemConfig.initializeBase(this);
}
Ext.ToolbarTextItemConfig.prototype = {
    
    allowDomMove: function Ext_ToolbarTextItemConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ToolbarTextItemConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ToolbarTextItemConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_ToolbarTextItemConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ToolbarTextItemConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ToolbarTextItemConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ToolbarTextItemConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ToolbarTextItemConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ToolbarTextItemConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ToolbarTextItemConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ToolbarTextItemConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ToolbarTextItemConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ToolbarTextItemConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ToolbarTextItemConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ToolbarTextItemConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ToolbarTextItemConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ToolbarTextItemConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ToolbarTextItemConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ToolbarTextItemConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ToolbarTextItemConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ToolbarTextItemConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ToolbarTextItemConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_ToolbarTextItemConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ToolbarTextItemConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ToolbarTextItemConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ToolbarTextItemConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ToolbarTextItemConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ToolbarTextItemConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ToolbarTextItemConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ToolbarTextItemConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ToolbarTextItemConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ToolbarTextItemConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ToolbarTextItemConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ToolbarTextItemConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ToolbarTextItemConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_ToolbarTextItemConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    overflowText: function Ext_ToolbarTextItemConfig$overflowText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['overflowText'] = value;
        return this;
    },
    
    pageX: function Ext_ToolbarTextItemConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ToolbarTextItemConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ToolbarTextItemConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ToolbarTextItemConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ToolbarTextItemConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ToolbarTextItemConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ToolbarTextItemConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_ToolbarTextItemConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ToolbarTextItemConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ToolbarTextItemConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ToolbarTextItemConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ToolbarTextItemConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    text: function Ext_ToolbarTextItemConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    tpl: function Ext_ToolbarTextItemConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ToolbarTextItemConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ToolbarTextItemConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ToolbarTextItemConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ToolbarTextItemConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ToolbarTextItemConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolbarTextItemConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ToolTipConfig

Ext.ToolTipConfig = function Ext_ToolTipConfig() {
    Ext.ToolTipConfig.initializeBase(this);
}
Ext.ToolTipConfig.prototype = {
    
    activeItem: function Ext_ToolTipConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ToolTipConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ToolTipConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    anchorOffset: function Ext_ToolTipConfig$anchorOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['anchorOffset'] = value;
        return this;
    },
    
    anchorToTarget: function Ext_ToolTipConfig$anchorToTarget(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['anchorToTarget'] = value;
        return this;
    },
    
    animCollapse: function Ext_ToolTipConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_ToolTipConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ToolTipConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ToolTipConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ToolTipConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoHide: function Ext_ToolTipConfig$autoHide(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['autoHide'] = value;
        return this;
    },
    
    autoLoad: function Ext_ToolTipConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_ToolTipConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ToolTipConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ToolTipConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_ToolTipConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_ToolTipConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_ToolTipConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_ToolTipConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_ToolTipConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_ToolTipConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_ToolTipConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_ToolTipConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ToolTipConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ToolTipConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ToolTipConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ToolTipConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ToolTipConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ToolTipConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ToolTipConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_ToolTipConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_ToolTipConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_ToolTipConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_ToolTipConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_ToolTipConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_ToolTipConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_ToolTipConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_ToolTipConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_ToolTipConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_ToolTipConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ToolTipConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ToolTipConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultAlign: function Ext_ToolTipConfig$defaultAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['defaultAlign'] = value;
        return this;
    },
    
    defaultType: function Ext_ToolTipConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ToolTipConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    delegate_: function Ext_ToolTipConfig$delegate_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['delegate'] = value;
        return this;
    },
    
    disabled: function Ext_ToolTipConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ToolTipConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    dismissDelay: function Ext_ToolTipConfig$dismissDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['dismissDelay'] = value;
        return this;
    },
    
    draggable: function Ext_ToolTipConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_ToolTipConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_ToolTipConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ToolTipConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ToolTipConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ToolTipConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_ToolTipConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_ToolTipConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_ToolTipConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_ToolTipConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_ToolTipConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_ToolTipConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_ToolTipConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_ToolTipConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ToolTipConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ToolTipConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_ToolTipConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideDelay: function Ext_ToolTipConfig$hideDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['hideDelay'] = value;
        return this;
    },
    
    hideLabel: function Ext_ToolTipConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ToolTipConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ToolTipConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ToolTipConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_ToolTipConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ToolTipConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ToolTipConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ToolTipConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ToolTipConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_ToolTipConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ToolTipConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ToolTipConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ToolTipConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ToolTipConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ToolTipConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ToolTipConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_ToolTipConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maxWidth: function Ext_ToolTipConfig$maxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['maxWidth'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_ToolTipConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minWidth: function Ext_ToolTipConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ToolTipConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    mouseOffset: function Ext_ToolTipConfig$mouseOffset(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['mouseOffset'] = value;
        return this;
    },
    
    overCls: function Ext_ToolTipConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_ToolTipConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_ToolTipConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ToolTipConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ToolTipConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_ToolTipConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_ToolTipConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ToolTipConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ToolTipConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ToolTipConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ToolTipConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_ToolTipConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_ToolTipConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_ToolTipConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    showDelay: function Ext_ToolTipConfig$showDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['showDelay'] = value;
        return this;
    },
    
    stateEvents: function Ext_ToolTipConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ToolTipConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ToolTipConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ToolTipConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ToolTipConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    target: function Ext_ToolTipConfig$target(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['target'] = value;
        return this;
    },
    
    tbar: function Ext_ToolTipConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_ToolTipConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_ToolTipConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_ToolTipConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_ToolTipConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_ToolTipConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_ToolTipConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ToolTipConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouse: function Ext_ToolTipConfig$trackMouse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['trackMouse'] = value;
        return this;
    },
    
    unstyled: function Ext_ToolTipConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_ToolTipConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ToolTipConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ToolTipConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ToolTipConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ToolTipConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.UpdaterConfig

Ext.UpdaterConfig = function Ext_UpdaterConfig() {
    Ext.UpdaterConfig.initializeBase(this);
}
Ext.UpdaterConfig.prototype = {
    
    listeners: function Ext_UpdaterConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.UpdaterConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ViewportConfig

Ext.ViewportConfig = function Ext_ViewportConfig() {
    Ext.ViewportConfig.initializeBase(this);
}
Ext.ViewportConfig.prototype = {
    
    activeItem: function Ext_ViewportConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ViewportConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ViewportConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ViewportConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ViewportConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ViewportConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ViewportConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ViewportConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ViewportConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ViewportConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ViewportConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ViewportConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ViewportConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ViewportConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ViewportConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ViewportConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    clearCls: function Ext_ViewportConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ViewportConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ViewportConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ViewportConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ViewportConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_ViewportConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ViewportConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ViewportConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ViewportConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ViewportConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ViewportConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    forceLayout: function Ext_ViewportConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    height: function Ext_ViewportConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ViewportConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ViewportConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_ViewportConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ViewportConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ViewportConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ViewportConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ViewportConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ViewportConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ViewportConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ViewportConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ViewportConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ViewportConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ViewportConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ViewportConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ViewportConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ViewportConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    monitorResize: function Ext_ViewportConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ViewportConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ViewportConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ViewportConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ViewportConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ViewportConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ViewportConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ViewportConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ViewportConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ViewportConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    stateEvents: function Ext_ViewportConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ViewportConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ViewportConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ViewportConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ViewportConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ViewportConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ViewportConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ViewportConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ViewportConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ViewportConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ViewportConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ViewportConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.WindowConfig

Ext.WindowConfig = function Ext_WindowConfig() {
    Ext.WindowConfig.initializeBase(this);
}
Ext.WindowConfig.prototype = {
    
    activeItem: function Ext_WindowConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_WindowConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_WindowConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_WindowConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    animateTarget: function Ext_WindowConfig$animateTarget(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['animateTarget'] = value;
        return this;
    },
    
    applyTo: function Ext_WindowConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_WindowConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_WindowConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_WindowConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_WindowConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_WindowConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_WindowConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_WindowConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_WindowConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_WindowConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_WindowConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_WindowConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_WindowConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_WindowConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_WindowConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_WindowConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_WindowConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_WindowConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_WindowConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_WindowConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_WindowConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_WindowConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_WindowConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_WindowConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_WindowConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_WindowConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_WindowConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    closeAction: function Ext_WindowConfig$closeAction(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['closeAction'] = value;
        return this;
    },
    
    cls: function Ext_WindowConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_WindowConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_WindowConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_WindowConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_WindowConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    constrain: function Ext_WindowConfig$constrain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['constrain'] = value;
        return this;
    },
    
    constrainHeader: function Ext_WindowConfig$constrainHeader(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['constrainHeader'] = value;
        return this;
    },
    
    contentEl: function Ext_WindowConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_WindowConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_WindowConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultButton: function Ext_WindowConfig$defaultButton(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['defaultButton'] = value;
        return this;
    },
    
    defaultType: function Ext_WindowConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_WindowConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_WindowConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_WindowConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_WindowConfig$draggable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_WindowConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    expandOnShow: function Ext_WindowConfig$expandOnShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['expandOnShow'] = value;
        return this;
    },
    
    fbar: function Ext_WindowConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_WindowConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_WindowConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_WindowConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_WindowConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_WindowConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_WindowConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_WindowConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_WindowConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_WindowConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_WindowConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_WindowConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_WindowConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideAnimDuration: function Ext_WindowConfig$hideAnimDuration(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['hideAnimDuration'] = value;
        return this;
    },
    
    hideBorders: function Ext_WindowConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_WindowConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_WindowConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_WindowConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_WindowConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_WindowConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_WindowConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_WindowConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    initHidden: function Ext_WindowConfig$initHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['initHidden'] = value;
        return this;
    },
    
    itemCls: function Ext_WindowConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_WindowConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_WindowConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_WindowConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_WindowConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_WindowConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_WindowConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_WindowConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_WindowConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    manager: function Ext_WindowConfig$manager(value) {
        /// <param name="value" type="Ext.WindowGroup">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['manager'] = value;
        return this;
    },
    
    margins: function Ext_WindowConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_WindowConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maximizable: function Ext_WindowConfig$maximizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['maximizable'] = value;
        return this;
    },
    
    maximized: function Ext_WindowConfig$maximized(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['maximized'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_WindowConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minHeight: function Ext_WindowConfig$minHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['minHeight'] = value;
        return this;
    },
    
    minWidth: function Ext_WindowConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    minimizable: function Ext_WindowConfig$minimizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['minimizable'] = value;
        return this;
    },
    
    modal: function Ext_WindowConfig$modal(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['modal'] = value;
        return this;
    },
    
    monitorResize: function Ext_WindowConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    onEsc: function Ext_WindowConfig$onEsc(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['onEsc'] = value;
        return this;
    },
    
    overCls: function Ext_WindowConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_WindowConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_WindowConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_WindowConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plain: function Ext_WindowConfig$plain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['plain'] = value;
        return this;
    },
    
    plugins: function Ext_WindowConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_WindowConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_WindowConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_WindowConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_WindowConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_WindowConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizable: function Ext_WindowConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    resizeEvent: function Ext_WindowConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    resizeHandles: function Ext_WindowConfig$resizeHandles(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['resizeHandles'] = value;
        return this;
    },
    
    shadow: function Ext_WindowConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_WindowConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_WindowConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    showAnimDuration: function Ext_WindowConfig$showAnimDuration(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['showAnimDuration'] = value;
        return this;
    },
    
    stateEvents: function Ext_WindowConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_WindowConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_WindowConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_WindowConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_WindowConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_WindowConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_WindowConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_WindowConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_WindowConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_WindowConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_WindowConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_WindowConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_WindowConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_WindowConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_WindowConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_WindowConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_WindowConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_WindowConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.WindowConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.XTemplateConfig

Ext.XTemplateConfig = function Ext_XTemplateConfig() {
    Ext.XTemplateConfig.initializeBase(this);
}
Ext.XTemplateConfig.prototype = {
    
    compiled: function Ext_XTemplateConfig$compiled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.XTemplateConfig"></returns>
        this.o['compiled'] = value;
        return this;
    },
    
    disableFormats: function Ext_XTemplateConfig$disableFormats(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.XTemplateConfig"></returns>
        this.o['disableFormats'] = value;
        return this;
    },
    
    re: function Ext_XTemplateConfig$re(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.XTemplateConfig"></returns>
        this.o['re'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.tree');

////////////////////////////////////////////////////////////////////////////////
// Ext.tree.ColumnResizerConfig

Ext.tree.ColumnResizerConfig = function Ext_tree_ColumnResizerConfig() {
    Ext.tree.ColumnResizerConfig.initializeBase(this);
}
Ext.tree.ColumnResizerConfig.prototype = {
    
    listeners: function Ext_tree_ColumnResizerConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.ColumnResizerConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    minWidth: function Ext_tree_ColumnResizerConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.ColumnResizerConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.AsyncTreeNodeConfig

Ext.tree.AsyncTreeNodeConfig = function Ext_tree_AsyncTreeNodeConfig() {
    Ext.tree.AsyncTreeNodeConfig.initializeBase(this);
}
Ext.tree.AsyncTreeNodeConfig.prototype = {
    
    allowChildren: function Ext_tree_AsyncTreeNodeConfig$allowChildren(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['allowChildren'] = value;
        return this;
    },
    
    allowDrag: function Ext_tree_AsyncTreeNodeConfig$allowDrag(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['allowDrag'] = value;
        return this;
    },
    
    allowDrop: function Ext_tree_AsyncTreeNodeConfig$allowDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['allowDrop'] = value;
        return this;
    },
    
    checked_: function Ext_tree_AsyncTreeNodeConfig$checked_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['checked'] = value;
        return this;
    },
    
    cls: function Ext_tree_AsyncTreeNodeConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    disabled: function Ext_tree_AsyncTreeNodeConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    draggable: function Ext_tree_AsyncTreeNodeConfig$draggable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    editable: function Ext_tree_AsyncTreeNodeConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    expandable: function Ext_tree_AsyncTreeNodeConfig$expandable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['expandable'] = value;
        return this;
    },
    
    expanded: function Ext_tree_AsyncTreeNodeConfig$expanded(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['expanded'] = value;
        return this;
    },
    
    hidden: function Ext_tree_AsyncTreeNodeConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    href: function Ext_tree_AsyncTreeNodeConfig$href(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['href'] = value;
        return this;
    },
    
    hrefTarget: function Ext_tree_AsyncTreeNodeConfig$hrefTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['hrefTarget'] = value;
        return this;
    },
    
    icon: function Ext_tree_AsyncTreeNodeConfig$icon(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['icon'] = value;
        return this;
    },
    
    iconCls: function Ext_tree_AsyncTreeNodeConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_tree_AsyncTreeNodeConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    isTarget: function Ext_tree_AsyncTreeNodeConfig$isTarget(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['isTarget'] = value;
        return this;
    },
    
    leaf: function Ext_tree_AsyncTreeNodeConfig$leaf(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['leaf'] = value;
        return this;
    },
    
    listeners: function Ext_tree_AsyncTreeNodeConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loader: function Ext_tree_AsyncTreeNodeConfig$loader(value) {
        /// <param name="value" type="Ext.tree.TreeLoader">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['loader'] = value;
        return this;
    },
    
    qtip: function Ext_tree_AsyncTreeNodeConfig$qtip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['qtip'] = value;
        return this;
    },
    
    qtipCfg: function Ext_tree_AsyncTreeNodeConfig$qtipCfg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['qtipCfg'] = value;
        return this;
    },
    
    singleClickExpand: function Ext_tree_AsyncTreeNodeConfig$singleClickExpand(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['singleClickExpand'] = value;
        return this;
    },
    
    text: function Ext_tree_AsyncTreeNodeConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    uiProvider: function Ext_tree_AsyncTreeNodeConfig$uiProvider(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.tree.AsyncTreeNodeConfig"></returns>
        this.o['uiProvider'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.DefaultSelectionModelConfig

Ext.tree.DefaultSelectionModelConfig = function Ext_tree_DefaultSelectionModelConfig() {
    Ext.tree.DefaultSelectionModelConfig.initializeBase(this);
}
Ext.tree.DefaultSelectionModelConfig.prototype = {
    
    listeners: function Ext_tree_DefaultSelectionModelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.DefaultSelectionModelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.MultiSelectionModelConfig

Ext.tree.MultiSelectionModelConfig = function Ext_tree_MultiSelectionModelConfig() {
    Ext.tree.MultiSelectionModelConfig.initializeBase(this);
}
Ext.tree.MultiSelectionModelConfig.prototype = {
    
    listeners: function Ext_tree_MultiSelectionModelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.MultiSelectionModelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.TreeDragZoneConfig

Ext.tree.TreeDragZoneConfig = function Ext_tree_TreeDragZoneConfig() {
    Ext.tree.TreeDragZoneConfig.initializeBase(this);
}
Ext.tree.TreeDragZoneConfig.prototype = {
    
    containerScroll: function Ext_tree_TreeDragZoneConfig$containerScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeDragZoneConfig"></returns>
        this.o['containerScroll'] = value;
        return this;
    },
    
    ddGroup: function Ext_tree_TreeDragZoneConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDragZoneConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    dropAllowed: function Ext_tree_TreeDragZoneConfig$dropAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDragZoneConfig"></returns>
        this.o['dropAllowed'] = value;
        return this;
    },
    
    dropNotAllowed: function Ext_tree_TreeDragZoneConfig$dropNotAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDragZoneConfig"></returns>
        this.o['dropNotAllowed'] = value;
        return this;
    },
    
    hlColor: function Ext_tree_TreeDragZoneConfig$hlColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDragZoneConfig"></returns>
        this.o['hlColor'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.TreeDropZoneConfig

Ext.tree.TreeDropZoneConfig = function Ext_tree_TreeDropZoneConfig() {
    Ext.tree.TreeDropZoneConfig.initializeBase(this);
}
Ext.tree.TreeDropZoneConfig.prototype = {
    
    allowContainerDrop: function Ext_tree_TreeDropZoneConfig$allowContainerDrop(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDropZoneConfig"></returns>
        this.o['allowContainerDrop'] = value;
        return this;
    },
    
    allowParentInsert: function Ext_tree_TreeDropZoneConfig$allowParentInsert(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeDropZoneConfig"></returns>
        this.o['allowParentInsert'] = value;
        return this;
    },
    
    appendOnly: function Ext_tree_TreeDropZoneConfig$appendOnly(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDropZoneConfig"></returns>
        this.o['appendOnly'] = value;
        return this;
    },
    
    ddGroup: function Ext_tree_TreeDropZoneConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDropZoneConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    dropAllowed: function Ext_tree_TreeDropZoneConfig$dropAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDropZoneConfig"></returns>
        this.o['dropAllowed'] = value;
        return this;
    },
    
    dropNotAllowed: function Ext_tree_TreeDropZoneConfig$dropNotAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDropZoneConfig"></returns>
        this.o['dropNotAllowed'] = value;
        return this;
    },
    
    expandDelay: function Ext_tree_TreeDropZoneConfig$expandDelay(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDropZoneConfig"></returns>
        this.o['expandDelay'] = value;
        return this;
    },
    
    overClass: function Ext_tree_TreeDropZoneConfig$overClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeDropZoneConfig"></returns>
        this.o['overClass'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.TreeEditorConfig

Ext.tree.TreeEditorConfig = function Ext_tree_TreeEditorConfig() {
    Ext.tree.TreeEditorConfig.initializeBase(this);
}
Ext.tree.TreeEditorConfig.prototype = {
    
    alignment: function Ext_tree_TreeEditorConfig$alignment(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['alignment'] = value;
        return this;
    },
    
    allowBlur: function Ext_tree_TreeEditorConfig$allowBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['allowBlur'] = value;
        return this;
    },
    
    allowDomMove: function Ext_tree_TreeEditorConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_tree_TreeEditorConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_tree_TreeEditorConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_tree_TreeEditorConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoSize: function Ext_tree_TreeEditorConfig$autoSize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['autoSize'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_tree_TreeEditorConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    cancelOnEsc: function Ext_tree_TreeEditorConfig$cancelOnEsc(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['cancelOnEsc'] = value;
        return this;
    },
    
    clearCls: function Ext_tree_TreeEditorConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_tree_TreeEditorConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    completeOnEnter: function Ext_tree_TreeEditorConfig$completeOnEnter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['completeOnEnter'] = value;
        return this;
    },
    
    constrain: function Ext_tree_TreeEditorConfig$constrain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['constrain'] = value;
        return this;
    },
    
    contentEl: function Ext_tree_TreeEditorConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_tree_TreeEditorConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_tree_TreeEditorConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_tree_TreeEditorConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_tree_TreeEditorConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    editDelay: function Ext_tree_TreeEditorConfig$editDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['editDelay'] = value;
        return this;
    },
    
    field: function Ext_tree_TreeEditorConfig$field(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['field'] = value;
        return this;
    },
    
    fieldLabel: function Ext_tree_TreeEditorConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    hidden: function Ext_tree_TreeEditorConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideEl: function Ext_tree_TreeEditorConfig$hideEl(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['hideEl'] = value;
        return this;
    },
    
    hideLabel: function Ext_tree_TreeEditorConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_tree_TreeEditorConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_tree_TreeEditorConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_tree_TreeEditorConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_tree_TreeEditorConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    ignoreNoChange: function Ext_tree_TreeEditorConfig$ignoreNoChange(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['ignoreNoChange'] = value;
        return this;
    },
    
    itemCls: function Ext_tree_TreeEditorConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_tree_TreeEditorConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_tree_TreeEditorConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_tree_TreeEditorConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_tree_TreeEditorConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    maxWidth: function Ext_tree_TreeEditorConfig$maxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['maxWidth'] = value;
        return this;
    },
    
    offsets: function Ext_tree_TreeEditorConfig$offsets(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['offsets'] = value;
        return this;
    },
    
    overCls: function Ext_tree_TreeEditorConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_tree_TreeEditorConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_tree_TreeEditorConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_tree_TreeEditorConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_tree_TreeEditorConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    revertInvalid: function Ext_tree_TreeEditorConfig$revertInvalid(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['revertInvalid'] = value;
        return this;
    },
    
    shadow: function Ext_tree_TreeEditorConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shim: function Ext_tree_TreeEditorConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_tree_TreeEditorConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_tree_TreeEditorConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_tree_TreeEditorConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_tree_TreeEditorConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    swallowKeys: function Ext_tree_TreeEditorConfig$swallowKeys(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['swallowKeys'] = value;
        return this;
    },
    
    tpl: function Ext_tree_TreeEditorConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_tree_TreeEditorConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    updateEl: function Ext_tree_TreeEditorConfig$updateEl(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['updateEl'] = value;
        return this;
    },
    
    value: function Ext_tree_TreeEditorConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    xtype: function Ext_tree_TreeEditorConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeEditorConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.TreeLoaderConfig

Ext.tree.TreeLoaderConfig = function Ext_tree_TreeLoaderConfig() {
    Ext.tree.TreeLoaderConfig.initializeBase(this);
}
Ext.tree.TreeLoaderConfig.prototype = {
    
    baseAttrs: function Ext_tree_TreeLoaderConfig$baseAttrs(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['baseAttrs'] = value;
        return this;
    },
    
    baseParams: function Ext_tree_TreeLoaderConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    clearOnLoad: function Ext_tree_TreeLoaderConfig$clearOnLoad(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['clearOnLoad'] = value;
        return this;
    },
    
    dataUrl: function Ext_tree_TreeLoaderConfig$dataUrl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['dataUrl'] = value;
        return this;
    },
    
    directFn: function Ext_tree_TreeLoaderConfig$directFn(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['directFn'] = value;
        return this;
    },
    
    listeners: function Ext_tree_TreeLoaderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    nodeParameter: function Ext_tree_TreeLoaderConfig$nodeParameter(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['nodeParameter'] = value;
        return this;
    },
    
    paramOrder: function Ext_tree_TreeLoaderConfig$paramOrder(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['paramOrder'] = value;
        return this;
    },
    
    paramsAsHash: function Ext_tree_TreeLoaderConfig$paramsAsHash(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['paramsAsHash'] = value;
        return this;
    },
    
    preloadChildren: function Ext_tree_TreeLoaderConfig$preloadChildren(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['preloadChildren'] = value;
        return this;
    },
    
    requestMethod: function Ext_tree_TreeLoaderConfig$requestMethod(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['requestMethod'] = value;
        return this;
    },
    
    uiProviders: function Ext_tree_TreeLoaderConfig$uiProviders(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['uiProviders'] = value;
        return this;
    },
    
    url: function Ext_tree_TreeLoaderConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeLoaderConfig"></returns>
        this.o['url'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.TreeNodeConfig

Ext.tree.TreeNodeConfig = function Ext_tree_TreeNodeConfig() {
    Ext.tree.TreeNodeConfig.initializeBase(this);
}
Ext.tree.TreeNodeConfig.prototype = {
    
    allowChildren: function Ext_tree_TreeNodeConfig$allowChildren(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['allowChildren'] = value;
        return this;
    },
    
    allowDrag: function Ext_tree_TreeNodeConfig$allowDrag(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['allowDrag'] = value;
        return this;
    },
    
    allowDrop: function Ext_tree_TreeNodeConfig$allowDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['allowDrop'] = value;
        return this;
    },
    
    checked_: function Ext_tree_TreeNodeConfig$checked_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['checked'] = value;
        return this;
    },
    
    cls: function Ext_tree_TreeNodeConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    disabled: function Ext_tree_TreeNodeConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    draggable: function Ext_tree_TreeNodeConfig$draggable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    editable: function Ext_tree_TreeNodeConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    expandable: function Ext_tree_TreeNodeConfig$expandable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['expandable'] = value;
        return this;
    },
    
    expanded: function Ext_tree_TreeNodeConfig$expanded(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['expanded'] = value;
        return this;
    },
    
    hidden: function Ext_tree_TreeNodeConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    href: function Ext_tree_TreeNodeConfig$href(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['href'] = value;
        return this;
    },
    
    hrefTarget: function Ext_tree_TreeNodeConfig$hrefTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['hrefTarget'] = value;
        return this;
    },
    
    icon: function Ext_tree_TreeNodeConfig$icon(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['icon'] = value;
        return this;
    },
    
    iconCls: function Ext_tree_TreeNodeConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_tree_TreeNodeConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    isTarget: function Ext_tree_TreeNodeConfig$isTarget(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['isTarget'] = value;
        return this;
    },
    
    leaf: function Ext_tree_TreeNodeConfig$leaf(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['leaf'] = value;
        return this;
    },
    
    listeners: function Ext_tree_TreeNodeConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    qtip: function Ext_tree_TreeNodeConfig$qtip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['qtip'] = value;
        return this;
    },
    
    qtipCfg: function Ext_tree_TreeNodeConfig$qtipCfg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['qtipCfg'] = value;
        return this;
    },
    
    singleClickExpand: function Ext_tree_TreeNodeConfig$singleClickExpand(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['singleClickExpand'] = value;
        return this;
    },
    
    text: function Ext_tree_TreeNodeConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    uiProvider: function Ext_tree_TreeNodeConfig$uiProvider(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.tree.TreeNodeConfig"></returns>
        this.o['uiProvider'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.TreePanelConfig

Ext.tree.TreePanelConfig = function Ext_tree_TreePanelConfig() {
    Ext.tree.TreePanelConfig.initializeBase(this);
}
Ext.tree.TreePanelConfig.prototype = {
    
    activeItem: function Ext_tree_TreePanelConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_tree_TreePanelConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_tree_TreePanelConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_tree_TreePanelConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    animate: function Ext_tree_TreePanelConfig$animate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['animate'] = value;
        return this;
    },
    
    applyTo: function Ext_tree_TreePanelConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_tree_TreePanelConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_tree_TreePanelConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_tree_TreePanelConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_tree_TreePanelConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_tree_TreePanelConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_tree_TreePanelConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_tree_TreePanelConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_tree_TreePanelConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_tree_TreePanelConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_tree_TreePanelConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_tree_TreePanelConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_tree_TreePanelConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_tree_TreePanelConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_tree_TreePanelConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_tree_TreePanelConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_tree_TreePanelConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_tree_TreePanelConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_tree_TreePanelConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_tree_TreePanelConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_tree_TreePanelConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_tree_TreePanelConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_tree_TreePanelConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_tree_TreePanelConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_tree_TreePanelConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_tree_TreePanelConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_tree_TreePanelConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_tree_TreePanelConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_tree_TreePanelConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_tree_TreePanelConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_tree_TreePanelConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_tree_TreePanelConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    containerScroll: function Ext_tree_TreePanelConfig$containerScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['containerScroll'] = value;
        return this;
    },
    
    contentEl: function Ext_tree_TreePanelConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_tree_TreePanelConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_tree_TreePanelConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    ddAppendOnly: function Ext_tree_TreePanelConfig$ddAppendOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['ddAppendOnly'] = value;
        return this;
    },
    
    ddGroup: function Ext_tree_TreePanelConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    ddScroll: function Ext_tree_TreePanelConfig$ddScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['ddScroll'] = value;
        return this;
    },
    
    defaultType: function Ext_tree_TreePanelConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_tree_TreePanelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_tree_TreePanelConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_tree_TreePanelConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    dragConfig: function Ext_tree_TreePanelConfig$dragConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['dragConfig'] = value;
        return this;
    },
    
    draggable: function Ext_tree_TreePanelConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    dropConfig: function Ext_tree_TreePanelConfig$dropConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['dropConfig'] = value;
        return this;
    },
    
    elements: function Ext_tree_TreePanelConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableDD: function Ext_tree_TreePanelConfig$enableDD(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['enableDD'] = value;
        return this;
    },
    
    enableDrag: function Ext_tree_TreePanelConfig$enableDrag(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['enableDrag'] = value;
        return this;
    },
    
    enableDrop: function Ext_tree_TreePanelConfig$enableDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['enableDrop'] = value;
        return this;
    },
    
    fbar: function Ext_tree_TreePanelConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_tree_TreePanelConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_tree_TreePanelConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_tree_TreePanelConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_tree_TreePanelConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_tree_TreePanelConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_tree_TreePanelConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_tree_TreePanelConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_tree_TreePanelConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_tree_TreePanelConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_tree_TreePanelConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_tree_TreePanelConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_tree_TreePanelConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_tree_TreePanelConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_tree_TreePanelConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_tree_TreePanelConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_tree_TreePanelConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_tree_TreePanelConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    hlColor: function Ext_tree_TreePanelConfig$hlColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['hlColor'] = value;
        return this;
    },
    
    hlDrop: function Ext_tree_TreePanelConfig$hlDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['hlDrop'] = value;
        return this;
    },
    
    html: function Ext_tree_TreePanelConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_tree_TreePanelConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_tree_TreePanelConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_tree_TreePanelConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_tree_TreePanelConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_tree_TreePanelConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_tree_TreePanelConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_tree_TreePanelConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_tree_TreePanelConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_tree_TreePanelConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_tree_TreePanelConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    lines: function Ext_tree_TreePanelConfig$lines(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['lines'] = value;
        return this;
    },
    
    listeners: function Ext_tree_TreePanelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loader: function Ext_tree_TreePanelConfig$loader(value) {
        /// <param name="value" type="Ext.tree.TreeLoader">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['loader'] = value;
        return this;
    },
    
    margins: function Ext_tree_TreePanelConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_tree_TreePanelConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_tree_TreePanelConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_tree_TreePanelConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_tree_TreePanelConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_tree_TreePanelConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_tree_TreePanelConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_tree_TreePanelConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    pathSeparator: function Ext_tree_TreePanelConfig$pathSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['pathSeparator'] = value;
        return this;
    },
    
    plugins: function Ext_tree_TreePanelConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_tree_TreePanelConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_tree_TreePanelConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_tree_TreePanelConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_tree_TreePanelConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_tree_TreePanelConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    requestMethod: function Ext_tree_TreePanelConfig$requestMethod(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['requestMethod'] = value;
        return this;
    },
    
    resizeEvent: function Ext_tree_TreePanelConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    root: function Ext_tree_TreePanelConfig$root(value) {
        /// <param name="value" type="Ext.tree.TreeNode">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['root'] = value;
        return this;
    },
    
    rootVisible: function Ext_tree_TreePanelConfig$rootVisible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['rootVisible'] = value;
        return this;
    },
    
    selModel: function Ext_tree_TreePanelConfig$selModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['selModel'] = value;
        return this;
    },
    
    shadow: function Ext_tree_TreePanelConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_tree_TreePanelConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_tree_TreePanelConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    singleExpand: function Ext_tree_TreePanelConfig$singleExpand(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['singleExpand'] = value;
        return this;
    },
    
    stateEvents: function Ext_tree_TreePanelConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_tree_TreePanelConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_tree_TreePanelConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_tree_TreePanelConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_tree_TreePanelConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_tree_TreePanelConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_tree_TreePanelConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_tree_TreePanelConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_tree_TreePanelConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_tree_TreePanelConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_tree_TreePanelConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_tree_TreePanelConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_tree_TreePanelConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouseOver: function Ext_tree_TreePanelConfig$trackMouseOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['trackMouseOver'] = value;
        return this;
    },
    
    unstyled: function Ext_tree_TreePanelConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    useArrows: function Ext_tree_TreePanelConfig$useArrows(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['useArrows'] = value;
        return this;
    },
    
    width: function Ext_tree_TreePanelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_tree_TreePanelConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_tree_TreePanelConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_tree_TreePanelConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.tree.TreePanelConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.tree.TreeSorterConfig

Ext.tree.TreeSorterConfig = function Ext_tree_TreeSorterConfig() {
    Ext.tree.TreeSorterConfig.initializeBase(this);
}
Ext.tree.TreeSorterConfig.prototype = {
    
    caseSensitive: function Ext_tree_TreeSorterConfig$caseSensitive(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeSorterConfig"></returns>
        this.o['caseSensitive'] = value;
        return this;
    },
    
    dir: function Ext_tree_TreeSorterConfig$dir(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeSorterConfig"></returns>
        this.o['dir'] = value;
        return this;
    },
    
    folderSort: function Ext_tree_TreeSorterConfig$folderSort(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.tree.TreeSorterConfig"></returns>
        this.o['folderSort'] = value;
        return this;
    },
    
    leafAttr: function Ext_tree_TreeSorterConfig$leafAttr(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeSorterConfig"></returns>
        this.o['leafAttr'] = value;
        return this;
    },
    
    property: function Ext_tree_TreeSorterConfig$property(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.tree.TreeSorterConfig"></returns>
        this.o['property'] = value;
        return this;
    },
    
    sortType: function Ext_tree_TreeSorterConfig$sortType(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.tree.TreeSorterConfig"></returns>
        this.o['sortType'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.ux.grid');

////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.LockingColumnModelConfig

Ext.ux.grid.LockingColumnModelConfig = function Ext_ux_grid_LockingColumnModelConfig() {
    Ext.ux.grid.LockingColumnModelConfig.initializeBase(this);
}
Ext.ux.grid.LockingColumnModelConfig.prototype = {
    
    columns: function Ext_ux_grid_LockingColumnModelConfig$columns(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingColumnModelConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    defaultSortable: function Ext_ux_grid_LockingColumnModelConfig$defaultSortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingColumnModelConfig"></returns>
        this.o['defaultSortable'] = value;
        return this;
    },
    
    defaultWidth: function Ext_ux_grid_LockingColumnModelConfig$defaultWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingColumnModelConfig"></returns>
        this.o['defaultWidth'] = value;
        return this;
    },
    
    defaults: function Ext_ux_grid_LockingColumnModelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingColumnModelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_LockingColumnModelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingColumnModelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.LockingGridViewConfig

Ext.ux.grid.LockingGridViewConfig = function Ext_ux_grid_LockingGridViewConfig() {
    Ext.ux.grid.LockingGridViewConfig.initializeBase(this);
}
Ext.ux.grid.LockingGridViewConfig.prototype = {
    
    autoFill: function Ext_ux_grid_LockingGridViewConfig$autoFill(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['autoFill'] = value;
        return this;
    },
    
    cellSelector: function Ext_ux_grid_LockingGridViewConfig$cellSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['cellSelector'] = value;
        return this;
    },
    
    cellSelectorDepth: function Ext_ux_grid_LockingGridViewConfig$cellSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['cellSelectorDepth'] = value;
        return this;
    },
    
    columnsText: function Ext_ux_grid_LockingGridViewConfig$columnsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['columnsText'] = value;
        return this;
    },
    
    deferEmptyText: function Ext_ux_grid_LockingGridViewConfig$deferEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['deferEmptyText'] = value;
        return this;
    },
    
    emptyText: function Ext_ux_grid_LockingGridViewConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableRowBody: function Ext_ux_grid_LockingGridViewConfig$enableRowBody(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['enableRowBody'] = value;
        return this;
    },
    
    forceFit: function Ext_ux_grid_LockingGridViewConfig$forceFit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['forceFit'] = value;
        return this;
    },
    
    headerMenuOpenCls: function Ext_ux_grid_LockingGridViewConfig$headerMenuOpenCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['headerMenuOpenCls'] = value;
        return this;
    },
    
    headersDisabled: function Ext_ux_grid_LockingGridViewConfig$headersDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['headersDisabled'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_LockingGridViewConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    markDirty: function Ext_ux_grid_LockingGridViewConfig$markDirty(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['markDirty'] = value;
        return this;
    },
    
    rowBodySelector: function Ext_ux_grid_LockingGridViewConfig$rowBodySelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['rowBodySelector'] = value;
        return this;
    },
    
    rowBodySelectorDepth: function Ext_ux_grid_LockingGridViewConfig$rowBodySelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['rowBodySelectorDepth'] = value;
        return this;
    },
    
    rowOverCls: function Ext_ux_grid_LockingGridViewConfig$rowOverCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['rowOverCls'] = value;
        return this;
    },
    
    rowSelector: function Ext_ux_grid_LockingGridViewConfig$rowSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['rowSelector'] = value;
        return this;
    },
    
    rowSelectorDepth: function Ext_ux_grid_LockingGridViewConfig$rowSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['rowSelectorDepth'] = value;
        return this;
    },
    
    scrollOffset: function Ext_ux_grid_LockingGridViewConfig$scrollOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['scrollOffset'] = value;
        return this;
    },
    
    sortAscText: function Ext_ux_grid_LockingGridViewConfig$sortAscText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['sortAscText'] = value;
        return this;
    },
    
    sortClasses: function Ext_ux_grid_LockingGridViewConfig$sortClasses(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['sortClasses'] = value;
        return this;
    },
    
    sortDescText: function Ext_ux_grid_LockingGridViewConfig$sortDescText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.LockingGridViewConfig"></returns>
        this.o['sortDescText'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.BufferViewConfig

Ext.ux.grid.BufferViewConfig = function Ext_ux_grid_BufferViewConfig() {
    Ext.ux.grid.BufferViewConfig.initializeBase(this);
}
Ext.ux.grid.BufferViewConfig.prototype = {
    
    autoFill: function Ext_ux_grid_BufferViewConfig$autoFill(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['autoFill'] = value;
        return this;
    },
    
    borderHeight: function Ext_ux_grid_BufferViewConfig$borderHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['borderHeight'] = value;
        return this;
    },
    
    cacheSize: function Ext_ux_grid_BufferViewConfig$cacheSize(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['cacheSize'] = value;
        return this;
    },
    
    cellSelector: function Ext_ux_grid_BufferViewConfig$cellSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['cellSelector'] = value;
        return this;
    },
    
    cellSelectorDepth: function Ext_ux_grid_BufferViewConfig$cellSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['cellSelectorDepth'] = value;
        return this;
    },
    
    cleanDelay: function Ext_ux_grid_BufferViewConfig$cleanDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['cleanDelay'] = value;
        return this;
    },
    
    columnsText: function Ext_ux_grid_BufferViewConfig$columnsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['columnsText'] = value;
        return this;
    },
    
    deferEmptyText: function Ext_ux_grid_BufferViewConfig$deferEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['deferEmptyText'] = value;
        return this;
    },
    
    emptyText: function Ext_ux_grid_BufferViewConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableRowBody: function Ext_ux_grid_BufferViewConfig$enableRowBody(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['enableRowBody'] = value;
        return this;
    },
    
    forceFit: function Ext_ux_grid_BufferViewConfig$forceFit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['forceFit'] = value;
        return this;
    },
    
    headerMenuOpenCls: function Ext_ux_grid_BufferViewConfig$headerMenuOpenCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['headerMenuOpenCls'] = value;
        return this;
    },
    
    headersDisabled: function Ext_ux_grid_BufferViewConfig$headersDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['headersDisabled'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_BufferViewConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    markDirty: function Ext_ux_grid_BufferViewConfig$markDirty(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['markDirty'] = value;
        return this;
    },
    
    rowBodySelector: function Ext_ux_grid_BufferViewConfig$rowBodySelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['rowBodySelector'] = value;
        return this;
    },
    
    rowBodySelectorDepth: function Ext_ux_grid_BufferViewConfig$rowBodySelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['rowBodySelectorDepth'] = value;
        return this;
    },
    
    rowHeight: function Ext_ux_grid_BufferViewConfig$rowHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['rowHeight'] = value;
        return this;
    },
    
    rowOverCls: function Ext_ux_grid_BufferViewConfig$rowOverCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['rowOverCls'] = value;
        return this;
    },
    
    rowSelector: function Ext_ux_grid_BufferViewConfig$rowSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['rowSelector'] = value;
        return this;
    },
    
    rowSelectorDepth: function Ext_ux_grid_BufferViewConfig$rowSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['rowSelectorDepth'] = value;
        return this;
    },
    
    scrollDelay: function Ext_ux_grid_BufferViewConfig$scrollDelay(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['scrollDelay'] = value;
        return this;
    },
    
    scrollOffset: function Ext_ux_grid_BufferViewConfig$scrollOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['scrollOffset'] = value;
        return this;
    },
    
    sortAscText: function Ext_ux_grid_BufferViewConfig$sortAscText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['sortAscText'] = value;
        return this;
    },
    
    sortClasses: function Ext_ux_grid_BufferViewConfig$sortClasses(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['sortClasses'] = value;
        return this;
    },
    
    sortDescText: function Ext_ux_grid_BufferViewConfig$sortDescText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.BufferViewConfig"></returns>
        this.o['sortDescText'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.CheckColumnConfig

Ext.ux.grid.CheckColumnConfig = function Ext_ux_grid_CheckColumnConfig() {
    Ext.ux.grid.CheckColumnConfig.initializeBase(this);
}
Ext.ux.grid.CheckColumnConfig.prototype = {
    
    align: function Ext_ux_grid_CheckColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    css: function Ext_ux_grid_CheckColumnConfig$css(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['css'] = value;
        return this;
    },
    
    dataIndex: function Ext_ux_grid_CheckColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    editable: function Ext_ux_grid_CheckColumnConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    editor: function Ext_ux_grid_CheckColumnConfig$editor(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['editor'] = value;
        return this;
    },
    
    emptyGroupText: function Ext_ux_grid_CheckColumnConfig$emptyGroupText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['emptyGroupText'] = value;
        return this;
    },
    
    fixed_: function Ext_ux_grid_CheckColumnConfig$fixed_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['fixed'] = value;
        return this;
    },
    
    groupName: function Ext_ux_grid_CheckColumnConfig$groupName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['groupName'] = value;
        return this;
    },
    
    groupRenderer: function Ext_ux_grid_CheckColumnConfig$groupRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['groupRenderer'] = value;
        return this;
    },
    
    groupable: function Ext_ux_grid_CheckColumnConfig$groupable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['groupable'] = value;
        return this;
    },
    
    header: function Ext_ux_grid_CheckColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    hidden: function Ext_ux_grid_CheckColumnConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideable: function Ext_ux_grid_CheckColumnConfig$hideable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['hideable'] = value;
        return this;
    },
    
    id: function Ext_ux_grid_CheckColumnConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_CheckColumnConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menuDisabled: function Ext_ux_grid_CheckColumnConfig$menuDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['menuDisabled'] = value;
        return this;
    },
    
    renderer: function Ext_ux_grid_CheckColumnConfig$renderer(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['renderer'] = value;
        return this;
    },
    
    resizable: function Ext_ux_grid_CheckColumnConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    scope: function Ext_ux_grid_CheckColumnConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    sortable: function Ext_ux_grid_CheckColumnConfig$sortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['sortable'] = value;
        return this;
    },
    
    tooltip: function Ext_ux_grid_CheckColumnConfig$tooltip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    width: function Ext_ux_grid_CheckColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    xtype: function Ext_ux_grid_CheckColumnConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.CheckColumnConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.GridFiltersConfig

Ext.ux.grid.GridFiltersConfig = function Ext_ux_grid_GridFiltersConfig() {
    Ext.ux.grid.GridFiltersConfig.initializeBase(this);
}
Ext.ux.grid.GridFiltersConfig.prototype = {
    
    autoReload: function Ext_ux_grid_GridFiltersConfig$autoReload(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['autoReload'] = value;
        return this;
    },
    
    encode: function Ext_ux_grid_GridFiltersConfig$encode(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['encode'] = value;
        return this;
    },
    
    filterCls: function Ext_ux_grid_GridFiltersConfig$filterCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['filterCls'] = value;
        return this;
    },
    
    filters: function Ext_ux_grid_GridFiltersConfig$filters(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['filters'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_GridFiltersConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    local: function Ext_ux_grid_GridFiltersConfig$local(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['local'] = value;
        return this;
    },
    
    menuFilterText: function Ext_ux_grid_GridFiltersConfig$menuFilterText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['menuFilterText'] = value;
        return this;
    },
    
    paramPrefix: function Ext_ux_grid_GridFiltersConfig$paramPrefix(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['paramPrefix'] = value;
        return this;
    },
    
    showMenu: function Ext_ux_grid_GridFiltersConfig$showMenu(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['showMenu'] = value;
        return this;
    },
    
    stateId: function Ext_ux_grid_GridFiltersConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    updateBuffer: function Ext_ux_grid_GridFiltersConfig$updateBuffer(value) {
        /// <param name="value" type="Number" integer="true">
        /// </param>
        /// <returns type="Ext.ux.grid.GridFiltersConfig"></returns>
        this.o['updateBuffer'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.GroupSummaryConfig

Ext.ux.grid.GroupSummaryConfig = function Ext_ux_grid_GroupSummaryConfig() {
    Ext.ux.grid.GroupSummaryConfig.initializeBase(this);
}
Ext.ux.grid.GroupSummaryConfig.prototype = {
    
    listeners: function Ext_ux_grid_GroupSummaryConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.GroupSummaryConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    summaryRenderer: function Ext_ux_grid_GroupSummaryConfig$summaryRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.grid.GroupSummaryConfig"></returns>
        this.o['summaryRenderer'] = value;
        return this;
    },
    
    summaryType: function Ext_ux_grid_GroupSummaryConfig$summaryType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.GroupSummaryConfig"></returns>
        this.o['summaryType'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.HybridSummaryConfig

Ext.ux.grid.HybridSummaryConfig = function Ext_ux_grid_HybridSummaryConfig() {
    Ext.ux.grid.HybridSummaryConfig.initializeBase(this);
}
Ext.ux.grid.HybridSummaryConfig.prototype = {
    
    listeners: function Ext_ux_grid_HybridSummaryConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.HybridSummaryConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    summaryRenderer: function Ext_ux_grid_HybridSummaryConfig$summaryRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.grid.HybridSummaryConfig"></returns>
        this.o['summaryRenderer'] = value;
        return this;
    },
    
    summaryType: function Ext_ux_grid_HybridSummaryConfig$summaryType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.HybridSummaryConfig"></returns>
        this.o['summaryType'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.RowEditorConfig

Ext.ux.grid.RowEditorConfig = function Ext_ux_grid_RowEditorConfig() {
    Ext.ux.grid.RowEditorConfig.initializeBase(this);
}
Ext.ux.grid.RowEditorConfig.prototype = {
    
    activeItem: function Ext_ux_grid_RowEditorConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_grid_RowEditorConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_grid_RowEditorConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_ux_grid_RowEditorConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_grid_RowEditorConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_grid_RowEditorConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_grid_RowEditorConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_grid_RowEditorConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_ux_grid_RowEditorConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_grid_RowEditorConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_grid_RowEditorConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_grid_RowEditorConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_ux_grid_RowEditorConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_ux_grid_RowEditorConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_ux_grid_RowEditorConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_ux_grid_RowEditorConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_ux_grid_RowEditorConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_ux_grid_RowEditorConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_ux_grid_RowEditorConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_ux_grid_RowEditorConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_grid_RowEditorConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_grid_RowEditorConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_grid_RowEditorConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_grid_RowEditorConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_grid_RowEditorConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_grid_RowEditorConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ux_grid_RowEditorConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_ux_grid_RowEditorConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_ux_grid_RowEditorConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_grid_RowEditorConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_ux_grid_RowEditorConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_ux_grid_RowEditorConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_ux_grid_RowEditorConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_ux_grid_RowEditorConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_ux_grid_RowEditorConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_ux_grid_RowEditorConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_grid_RowEditorConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_grid_RowEditorConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_grid_RowEditorConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_grid_RowEditorConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_grid_RowEditorConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ux_grid_RowEditorConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_grid_RowEditorConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_ux_grid_RowEditorConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_ux_grid_RowEditorConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_ux_grid_RowEditorConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_grid_RowEditorConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_grid_RowEditorConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ux_grid_RowEditorConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_ux_grid_RowEditorConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_ux_grid_RowEditorConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_grid_RowEditorConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_ux_grid_RowEditorConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_ux_grid_RowEditorConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_ux_grid_RowEditorConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_ux_grid_RowEditorConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_ux_grid_RowEditorConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_grid_RowEditorConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_grid_RowEditorConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_ux_grid_RowEditorConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_grid_RowEditorConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_grid_RowEditorConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_grid_RowEditorConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_grid_RowEditorConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_ux_grid_RowEditorConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ux_grid_RowEditorConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_grid_RowEditorConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_grid_RowEditorConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ux_grid_RowEditorConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_ux_grid_RowEditorConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_grid_RowEditorConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_grid_RowEditorConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_grid_RowEditorConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_grid_RowEditorConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_RowEditorConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_grid_RowEditorConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_ux_grid_RowEditorConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_ux_grid_RowEditorConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_grid_RowEditorConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_grid_RowEditorConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_ux_grid_RowEditorConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_ux_grid_RowEditorConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_grid_RowEditorConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_grid_RowEditorConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_ux_grid_RowEditorConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_ux_grid_RowEditorConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_grid_RowEditorConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_grid_RowEditorConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_grid_RowEditorConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_grid_RowEditorConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_ux_grid_RowEditorConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_ux_grid_RowEditorConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_ux_grid_RowEditorConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_grid_RowEditorConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_grid_RowEditorConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_grid_RowEditorConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_grid_RowEditorConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_grid_RowEditorConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_ux_grid_RowEditorConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_ux_grid_RowEditorConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_ux_grid_RowEditorConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_ux_grid_RowEditorConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_ux_grid_RowEditorConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_ux_grid_RowEditorConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_ux_grid_RowEditorConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_grid_RowEditorConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_ux_grid_RowEditorConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_ux_grid_RowEditorConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_grid_RowEditorConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_grid_RowEditorConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_grid_RowEditorConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.RowEditorConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.RowExpanderConfig

Ext.ux.grid.RowExpanderConfig = function Ext_ux_grid_RowExpanderConfig() {
    Ext.ux.grid.RowExpanderConfig.initializeBase(this);
}
Ext.ux.grid.RowExpanderConfig.prototype = {
    
    expandOnDblClick: function Ext_ux_grid_RowExpanderConfig$expandOnDblClick(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowExpanderConfig"></returns>
        this.o['expandOnDblClick'] = value;
        return this;
    },
    
    expandOnEnter: function Ext_ux_grid_RowExpanderConfig$expandOnEnter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.RowExpanderConfig"></returns>
        this.o['expandOnEnter'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_RowExpanderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.RowExpanderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.TableGridConfig

Ext.ux.grid.TableGridConfig = function Ext_ux_grid_TableGridConfig() {
    Ext.ux.grid.TableGridConfig.initializeBase(this);
}
Ext.ux.grid.TableGridConfig.prototype = {
    
    activeItem: function Ext_ux_grid_TableGridConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_grid_TableGridConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_grid_TableGridConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_ux_grid_TableGridConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_grid_TableGridConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_grid_TableGridConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_grid_TableGridConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoExpandColumn: function Ext_ux_grid_TableGridConfig$autoExpandColumn(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoExpandColumn'] = value;
        return this;
    },
    
    autoExpandMax: function Ext_ux_grid_TableGridConfig$autoExpandMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoExpandMax'] = value;
        return this;
    },
    
    autoExpandMin: function Ext_ux_grid_TableGridConfig$autoExpandMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoExpandMin'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_grid_TableGridConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_ux_grid_TableGridConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_grid_TableGridConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_grid_TableGridConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_grid_TableGridConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_ux_grid_TableGridConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_ux_grid_TableGridConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_ux_grid_TableGridConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_ux_grid_TableGridConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_ux_grid_TableGridConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_ux_grid_TableGridConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_ux_grid_TableGridConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_ux_grid_TableGridConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_grid_TableGridConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_grid_TableGridConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_grid_TableGridConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_grid_TableGridConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_grid_TableGridConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_grid_TableGridConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ux_grid_TableGridConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_ux_grid_TableGridConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_ux_grid_TableGridConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_grid_TableGridConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_ux_grid_TableGridConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_ux_grid_TableGridConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    cm: function Ext_ux_grid_TableGridConfig$cm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['cm'] = value;
        return this;
    },
    
    colModel: function Ext_ux_grid_TableGridConfig$colModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['colModel'] = value;
        return this;
    },
    
    collapseFirst: function Ext_ux_grid_TableGridConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_ux_grid_TableGridConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_ux_grid_TableGridConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_ux_grid_TableGridConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    columnLines: function Ext_ux_grid_TableGridConfig$columnLines(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['columnLines'] = value;
        return this;
    },
    
    columns: function Ext_ux_grid_TableGridConfig$columns(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_grid_TableGridConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_grid_TableGridConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_grid_TableGridConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    ddGroup: function Ext_ux_grid_TableGridConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    ddText: function Ext_ux_grid_TableGridConfig$ddText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['ddText'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_grid_TableGridConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_grid_TableGridConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    deferRowRender: function Ext_ux_grid_TableGridConfig$deferRowRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['deferRowRender'] = value;
        return this;
    },
    
    disableSelection: function Ext_ux_grid_TableGridConfig$disableSelection(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['disableSelection'] = value;
        return this;
    },
    
    disabled: function Ext_ux_grid_TableGridConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_grid_TableGridConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_ux_grid_TableGridConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_ux_grid_TableGridConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableColumnHide: function Ext_ux_grid_TableGridConfig$enableColumnHide(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['enableColumnHide'] = value;
        return this;
    },
    
    enableColumnMove: function Ext_ux_grid_TableGridConfig$enableColumnMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['enableColumnMove'] = value;
        return this;
    },
    
    enableColumnResize: function Ext_ux_grid_TableGridConfig$enableColumnResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['enableColumnResize'] = value;
        return this;
    },
    
    enableDragDrop: function Ext_ux_grid_TableGridConfig$enableDragDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['enableDragDrop'] = value;
        return this;
    },
    
    enableHdMenu: function Ext_ux_grid_TableGridConfig$enableHdMenu(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['enableHdMenu'] = value;
        return this;
    },
    
    fbar: function Ext_ux_grid_TableGridConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_grid_TableGridConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_grid_TableGridConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ux_grid_TableGridConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_ux_grid_TableGridConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_ux_grid_TableGridConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_grid_TableGridConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_ux_grid_TableGridConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_ux_grid_TableGridConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_ux_grid_TableGridConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_ux_grid_TableGridConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_ux_grid_TableGridConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_grid_TableGridConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_grid_TableGridConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_ux_grid_TableGridConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideHeaders: function Ext_ux_grid_TableGridConfig$hideHeaders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['hideHeaders'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_grid_TableGridConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_grid_TableGridConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_grid_TableGridConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_grid_TableGridConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_ux_grid_TableGridConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ux_grid_TableGridConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_grid_TableGridConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_grid_TableGridConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ux_grid_TableGridConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_ux_grid_TableGridConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_grid_TableGridConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_grid_TableGridConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_grid_TableGridConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_grid_TableGridConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_TableGridConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadMask: function Ext_ux_grid_TableGridConfig$loadMask(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['loadMask'] = value;
        return this;
    },
    
    margins: function Ext_ux_grid_TableGridConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_ux_grid_TableGridConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maxHeight: function Ext_ux_grid_TableGridConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_ux_grid_TableGridConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minColumnWidth: function Ext_ux_grid_TableGridConfig$minColumnWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['minColumnWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_grid_TableGridConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_grid_TableGridConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_ux_grid_TableGridConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_ux_grid_TableGridConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_grid_TableGridConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_grid_TableGridConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_ux_grid_TableGridConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_ux_grid_TableGridConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_grid_TableGridConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_grid_TableGridConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_grid_TableGridConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_grid_TableGridConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    selModel: function Ext_ux_grid_TableGridConfig$selModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['selModel'] = value;
        return this;
    },
    
    shadow: function Ext_ux_grid_TableGridConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_ux_grid_TableGridConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_ux_grid_TableGridConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    sm: function Ext_ux_grid_TableGridConfig$sm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['sm'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_grid_TableGridConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_grid_TableGridConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_grid_TableGridConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_ux_grid_TableGridConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    stripeRows: function Ext_ux_grid_TableGridConfig$stripeRows(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['stripeRows'] = value;
        return this;
    },
    
    style: function Ext_ux_grid_TableGridConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_grid_TableGridConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_ux_grid_TableGridConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_ux_grid_TableGridConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_ux_grid_TableGridConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_ux_grid_TableGridConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_ux_grid_TableGridConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_ux_grid_TableGridConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_ux_grid_TableGridConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_grid_TableGridConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouseOver: function Ext_ux_grid_TableGridConfig$trackMouseOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['trackMouseOver'] = value;
        return this;
    },
    
    unstyled: function Ext_ux_grid_TableGridConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    view: function Ext_ux_grid_TableGridConfig$view(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['view'] = value;
        return this;
    },
    
    viewConfig: function Ext_ux_grid_TableGridConfig$viewConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['viewConfig'] = value;
        return this;
    },
    
    width: function Ext_ux_grid_TableGridConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_grid_TableGridConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_grid_TableGridConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_grid_TableGridConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.TableGridConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.ux');

////////////////////////////////////////////////////////////////////////////////
// Ext.ux.GroupTabConfig

Ext.ux.GroupTabConfig = function Ext_ux_GroupTabConfig() {
    Ext.ux.GroupTabConfig.initializeBase(this);
}
Ext.ux.GroupTabConfig.prototype = {
    
    activeItem: function Ext_ux_GroupTabConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_GroupTabConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_GroupTabConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_GroupTabConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_GroupTabConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_GroupTabConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_GroupTabConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_GroupTabConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_GroupTabConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_GroupTabConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_GroupTabConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_GroupTabConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_GroupTabConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_GroupTabConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_GroupTabConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_GroupTabConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_GroupTabConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ux_GroupTabConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_GroupTabConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_GroupTabConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_GroupTabConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_GroupTabConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_GroupTabConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ux_GroupTabConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_GroupTabConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_GroupTabConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_GroupTabConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_GroupTabConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    height: function Ext_ux_GroupTabConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_GroupTabConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_GroupTabConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_GroupTabConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_GroupTabConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_GroupTabConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_GroupTabConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ux_GroupTabConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_GroupTabConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_GroupTabConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ux_GroupTabConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_GroupTabConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_GroupTabConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_GroupTabConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_GroupTabConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ux_GroupTabConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_GroupTabConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_GroupTabConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_GroupTabConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ux_GroupTabConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_GroupTabConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_GroupTabConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ux_GroupTabConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_GroupTabConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_GroupTabConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_GroupTabConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_GroupTabConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_GroupTabConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_GroupTabConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_GroupTabConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_GroupTabConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_GroupTabConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ux_GroupTabConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_GroupTabConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ux_GroupTabConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_GroupTabConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_GroupTabConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_GroupTabConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.GroupTabPanelConfig

Ext.ux.GroupTabPanelConfig = function Ext_ux_GroupTabPanelConfig() {
    Ext.ux.GroupTabPanelConfig.initializeBase(this);
}
Ext.ux.GroupTabPanelConfig.prototype = {
    
    activeItem: function Ext_ux_GroupTabPanelConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    activeTab: function Ext_ux_GroupTabPanelConfig$activeTab(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['activeTab'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_GroupTabPanelConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_GroupTabPanelConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_ux_GroupTabPanelConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    animScroll: function Ext_ux_GroupTabPanelConfig$animScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['animScroll'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_GroupTabPanelConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_GroupTabPanelConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_GroupTabPanelConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_GroupTabPanelConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_ux_GroupTabPanelConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_GroupTabPanelConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_GroupTabPanelConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoTabSelector: function Ext_ux_GroupTabPanelConfig$autoTabSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['autoTabSelector'] = value;
        return this;
    },
    
    autoTabs: function Ext_ux_GroupTabPanelConfig$autoTabs(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['autoTabs'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_GroupTabPanelConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_ux_GroupTabPanelConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_ux_GroupTabPanelConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_ux_GroupTabPanelConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_ux_GroupTabPanelConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_ux_GroupTabPanelConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_ux_GroupTabPanelConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_ux_GroupTabPanelConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_ux_GroupTabPanelConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_GroupTabPanelConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_GroupTabPanelConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_GroupTabPanelConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_GroupTabPanelConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_GroupTabPanelConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_GroupTabPanelConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ux_GroupTabPanelConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_ux_GroupTabPanelConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_ux_GroupTabPanelConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_GroupTabPanelConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_ux_GroupTabPanelConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_ux_GroupTabPanelConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_ux_GroupTabPanelConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_ux_GroupTabPanelConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_ux_GroupTabPanelConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_ux_GroupTabPanelConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_GroupTabPanelConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_GroupTabPanelConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_GroupTabPanelConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_GroupTabPanelConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_GroupTabPanelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    deferredRender: function Ext_ux_GroupTabPanelConfig$deferredRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['deferredRender'] = value;
        return this;
    },
    
    disabled: function Ext_ux_GroupTabPanelConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_GroupTabPanelConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_ux_GroupTabPanelConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_ux_GroupTabPanelConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableTabScroll: function Ext_ux_GroupTabPanelConfig$enableTabScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['enableTabScroll'] = value;
        return this;
    },
    
    fbar: function Ext_ux_GroupTabPanelConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_GroupTabPanelConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_GroupTabPanelConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ux_GroupTabPanelConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_ux_GroupTabPanelConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_ux_GroupTabPanelConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_GroupTabPanelConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_ux_GroupTabPanelConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_ux_GroupTabPanelConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_ux_GroupTabPanelConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_ux_GroupTabPanelConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_ux_GroupTabPanelConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_GroupTabPanelConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_GroupTabPanelConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_ux_GroupTabPanelConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_GroupTabPanelConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_GroupTabPanelConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_GroupTabPanelConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_GroupTabPanelConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_ux_GroupTabPanelConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ux_GroupTabPanelConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_GroupTabPanelConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_GroupTabPanelConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    itemTpl: function Ext_ux_GroupTabPanelConfig$itemTpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['itemTpl'] = value;
        return this;
    },
    
    items: function Ext_ux_GroupTabPanelConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_ux_GroupTabPanelConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_GroupTabPanelConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_GroupTabPanelConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_GroupTabPanelConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_GroupTabPanelConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    layoutOnTabChange: function Ext_ux_GroupTabPanelConfig$layoutOnTabChange(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['layoutOnTabChange'] = value;
        return this;
    },
    
    listeners: function Ext_ux_GroupTabPanelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_GroupTabPanelConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_ux_GroupTabPanelConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_ux_GroupTabPanelConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minTabWidth: function Ext_ux_GroupTabPanelConfig$minTabWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['minTabWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_GroupTabPanelConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_GroupTabPanelConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_ux_GroupTabPanelConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_ux_GroupTabPanelConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_GroupTabPanelConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plain: function Ext_ux_GroupTabPanelConfig$plain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['plain'] = value;
        return this;
    },
    
    plugins: function Ext_ux_GroupTabPanelConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_ux_GroupTabPanelConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_ux_GroupTabPanelConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_GroupTabPanelConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_GroupTabPanelConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_GroupTabPanelConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_GroupTabPanelConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    resizeTabs: function Ext_ux_GroupTabPanelConfig$resizeTabs(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['resizeTabs'] = value;
        return this;
    },
    
    scrollDuration: function Ext_ux_GroupTabPanelConfig$scrollDuration(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['scrollDuration'] = value;
        return this;
    },
    
    scrollIncrement: function Ext_ux_GroupTabPanelConfig$scrollIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['scrollIncrement'] = value;
        return this;
    },
    
    scrollRepeatInterval: function Ext_ux_GroupTabPanelConfig$scrollRepeatInterval(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['scrollRepeatInterval'] = value;
        return this;
    },
    
    shadow: function Ext_ux_GroupTabPanelConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_ux_GroupTabPanelConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_ux_GroupTabPanelConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_GroupTabPanelConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_GroupTabPanelConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_GroupTabPanelConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_GroupTabPanelConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabCls: function Ext_ux_GroupTabPanelConfig$tabCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tabCls'] = value;
        return this;
    },
    
    tabMargin: function Ext_ux_GroupTabPanelConfig$tabMargin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tabMargin'] = value;
        return this;
    },
    
    tabPosition: function Ext_ux_GroupTabPanelConfig$tabPosition(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tabPosition'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_GroupTabPanelConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tabWidth: function Ext_ux_GroupTabPanelConfig$tabWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tabWidth'] = value;
        return this;
    },
    
    tbar: function Ext_ux_GroupTabPanelConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_ux_GroupTabPanelConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_ux_GroupTabPanelConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_ux_GroupTabPanelConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_ux_GroupTabPanelConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_ux_GroupTabPanelConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_ux_GroupTabPanelConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_GroupTabPanelConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_ux_GroupTabPanelConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    wheelIncrement: function Ext_ux_GroupTabPanelConfig$wheelIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['wheelIncrement'] = value;
        return this;
    },
    
    width: function Ext_ux_GroupTabPanelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_GroupTabPanelConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_GroupTabPanelConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_GroupTabPanelConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GroupTabPanelConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.GMapPanelConfig

Ext.ux.GMapPanelConfig = function Ext_ux_GMapPanelConfig() {
    Ext.ux.GMapPanelConfig.initializeBase(this);
}
Ext.ux.GMapPanelConfig.prototype = {
    
    activeItem: function Ext_ux_GMapPanelConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_GMapPanelConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_GMapPanelConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_ux_GMapPanelConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_GMapPanelConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_GMapPanelConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_GMapPanelConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_GMapPanelConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_ux_GMapPanelConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_GMapPanelConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_GMapPanelConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_GMapPanelConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_ux_GMapPanelConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_ux_GMapPanelConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_ux_GMapPanelConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_ux_GMapPanelConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_ux_GMapPanelConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_ux_GMapPanelConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_ux_GMapPanelConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_ux_GMapPanelConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_GMapPanelConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_GMapPanelConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_GMapPanelConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_GMapPanelConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_GMapPanelConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_GMapPanelConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ux_GMapPanelConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_ux_GMapPanelConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_ux_GMapPanelConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_GMapPanelConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_ux_GMapPanelConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_ux_GMapPanelConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_ux_GMapPanelConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_ux_GMapPanelConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_ux_GMapPanelConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_ux_GMapPanelConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_GMapPanelConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_GMapPanelConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_GMapPanelConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_GMapPanelConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_GMapPanelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ux_GMapPanelConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_GMapPanelConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_ux_GMapPanelConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_ux_GMapPanelConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_ux_GMapPanelConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_GMapPanelConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_GMapPanelConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ux_GMapPanelConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_ux_GMapPanelConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_ux_GMapPanelConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_GMapPanelConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_ux_GMapPanelConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_ux_GMapPanelConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_ux_GMapPanelConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_ux_GMapPanelConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_ux_GMapPanelConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_GMapPanelConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_GMapPanelConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_ux_GMapPanelConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_GMapPanelConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_GMapPanelConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_GMapPanelConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_GMapPanelConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_ux_GMapPanelConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ux_GMapPanelConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_GMapPanelConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_GMapPanelConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ux_GMapPanelConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_ux_GMapPanelConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_GMapPanelConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_GMapPanelConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_GMapPanelConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_GMapPanelConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ux_GMapPanelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_GMapPanelConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_ux_GMapPanelConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_ux_GMapPanelConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_GMapPanelConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_GMapPanelConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_ux_GMapPanelConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_ux_GMapPanelConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_GMapPanelConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_GMapPanelConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_ux_GMapPanelConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_ux_GMapPanelConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_GMapPanelConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_GMapPanelConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_GMapPanelConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_GMapPanelConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_ux_GMapPanelConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_ux_GMapPanelConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_ux_GMapPanelConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_GMapPanelConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_GMapPanelConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_GMapPanelConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_GMapPanelConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_GMapPanelConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_ux_GMapPanelConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_ux_GMapPanelConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_ux_GMapPanelConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_ux_GMapPanelConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_ux_GMapPanelConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_ux_GMapPanelConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_ux_GMapPanelConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_GMapPanelConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_ux_GMapPanelConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_ux_GMapPanelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_GMapPanelConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_GMapPanelConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_GMapPanelConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.GMapPanelConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.ProgressBarPagerConfig

Ext.ux.ProgressBarPagerConfig = function Ext_ux_ProgressBarPagerConfig() {
    Ext.ux.ProgressBarPagerConfig.initializeBase(this);
}
Ext.ux.ProgressBarPagerConfig.prototype = {
    
    defaultAnimCfg: function Ext_ux_ProgressBarPagerConfig$defaultAnimCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.ProgressBarPagerConfig"></returns>
        this.o['defaultAnimCfg'] = value;
        return this;
    },
    
    defaultText: function Ext_ux_ProgressBarPagerConfig$defaultText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ProgressBarPagerConfig"></returns>
        this.o['defaultText'] = value;
        return this;
    },
    
    progBarWidth: function Ext_ux_ProgressBarPagerConfig$progBarWidth(value) {
        /// <param name="value" type="Number" integer="true">
        /// </param>
        /// <returns type="Ext.ux.ProgressBarPagerConfig"></returns>
        this.o['progBarWidth'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.SpinnerConfig

Ext.ux.SpinnerConfig = function Ext_ux_SpinnerConfig() {
    Ext.ux.SpinnerConfig.initializeBase(this);
}
Ext.ux.SpinnerConfig.prototype = {
    
    listeners: function Ext_ux_SpinnerConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.SpinnerConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.StatusBarConfig

Ext.ux.StatusBarConfig = function Ext_ux_StatusBarConfig() {
    Ext.ux.StatusBarConfig.initializeBase(this);
}
Ext.ux.StatusBarConfig.prototype = {
    
    activeItem: function Ext_ux_StatusBarConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_StatusBarConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_StatusBarConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_StatusBarConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoClear: function Ext_ux_StatusBarConfig$autoClear(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['autoClear'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_StatusBarConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_StatusBarConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_StatusBarConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_StatusBarConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_StatusBarConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_StatusBarConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_StatusBarConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_StatusBarConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_StatusBarConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_StatusBarConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_StatusBarConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_StatusBarConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    busyIconCls: function Ext_ux_StatusBarConfig$busyIconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['busyIconCls'] = value;
        return this;
    },
    
    busyText: function Ext_ux_StatusBarConfig$busyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['busyText'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ux_StatusBarConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_StatusBarConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ux_StatusBarConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_StatusBarConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_StatusBarConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_StatusBarConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultIconCls: function Ext_ux_StatusBarConfig$defaultIconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['defaultIconCls'] = value;
        return this;
    },
    
    defaultText: function Ext_ux_StatusBarConfig$defaultText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['defaultText'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_StatusBarConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_StatusBarConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ux_StatusBarConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_StatusBarConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    emptyText: function Ext_ux_StatusBarConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableOverflow: function Ext_ux_StatusBarConfig$enableOverflow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['enableOverflow'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_StatusBarConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_StatusBarConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_StatusBarConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    height: function Ext_ux_StatusBarConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_StatusBarConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_StatusBarConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_StatusBarConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_StatusBarConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_StatusBarConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_StatusBarConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_ux_StatusBarConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ux_StatusBarConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_StatusBarConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_StatusBarConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ux_StatusBarConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_StatusBarConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_StatusBarConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_StatusBarConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_StatusBarConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ux_StatusBarConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_StatusBarConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_StatusBarConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_StatusBarConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ux_StatusBarConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_StatusBarConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_StatusBarConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ux_StatusBarConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_StatusBarConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_StatusBarConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_StatusBarConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_StatusBarConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_StatusBarConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_StatusBarConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_StatusBarConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    statusAlign: function Ext_ux_StatusBarConfig$statusAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['statusAlign'] = value;
        return this;
    },
    
    style: function Ext_ux_StatusBarConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_StatusBarConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    text: function Ext_ux_StatusBarConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    tpl: function Ext_ux_StatusBarConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_StatusBarConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ux_StatusBarConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_StatusBarConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_StatusBarConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_StatusBarConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.StatusBarConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.TabCloseMenuConfig

Ext.ux.TabCloseMenuConfig = function Ext_ux_TabCloseMenuConfig() {
    Ext.ux.TabCloseMenuConfig.initializeBase(this);
}
Ext.ux.TabCloseMenuConfig.prototype = {
    
    closeAllTabsText: function Ext_ux_TabCloseMenuConfig$closeAllTabsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.TabCloseMenuConfig"></returns>
        this.o['closeAllTabsText'] = value;
        return this;
    },
    
    closeOtherTabsText: function Ext_ux_TabCloseMenuConfig$closeOtherTabsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.TabCloseMenuConfig"></returns>
        this.o['closeOtherTabsText'] = value;
        return this;
    },
    
    closeTabText: function Ext_ux_TabCloseMenuConfig$closeTabText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.TabCloseMenuConfig"></returns>
        this.o['closeTabText'] = value;
        return this;
    },
    
    showCloseAll: function Ext_ux_TabCloseMenuConfig$showCloseAll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.TabCloseMenuConfig"></returns>
        this.o['showCloseAll'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.TabScrollerMenuConfig

Ext.ux.TabScrollerMenuConfig = function Ext_ux_TabScrollerMenuConfig() {
    Ext.ux.TabScrollerMenuConfig.initializeBase(this);
}
Ext.ux.TabScrollerMenuConfig.prototype = {
    
    maxText: function Ext_ux_TabScrollerMenuConfig$maxText(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.TabScrollerMenuConfig"></returns>
        this.o['maxText'] = value;
        return this;
    },
    
    menuPrefixText: function Ext_ux_TabScrollerMenuConfig$menuPrefixText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.TabScrollerMenuConfig"></returns>
        this.o['menuPrefixText'] = value;
        return this;
    },
    
    pageSize: function Ext_ux_TabScrollerMenuConfig$pageSize(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.TabScrollerMenuConfig"></returns>
        this.o['pageSize'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.ValidationStatusConfig

Ext.ux.ValidationStatusConfig = function Ext_ux_ValidationStatusConfig() {
    Ext.ux.ValidationStatusConfig.initializeBase(this);
}
Ext.ux.ValidationStatusConfig.prototype = {
    
    allowDomMove: function Ext_ux_ValidationStatusConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_ValidationStatusConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_ValidationStatusConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_ValidationStatusConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_ValidationStatusConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_ValidationStatusConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ux_ValidationStatusConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_ValidationStatusConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_ValidationStatusConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_ValidationStatusConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ux_ValidationStatusConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_ValidationStatusConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    errorIconCls: function Ext_ux_ValidationStatusConfig$errorIconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['errorIconCls'] = value;
        return this;
    },
    
    errorListCls: function Ext_ux_ValidationStatusConfig$errorListCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['errorListCls'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_ValidationStatusConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    hidden: function Ext_ux_ValidationStatusConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_ValidationStatusConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_ValidationStatusConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_ValidationStatusConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_ValidationStatusConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ux_ValidationStatusConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_ValidationStatusConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_ValidationStatusConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_ValidationStatusConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_ValidationStatusConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ux_ValidationStatusConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    overCls: function Ext_ux_ValidationStatusConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_ux_ValidationStatusConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ux_ValidationStatusConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_ValidationStatusConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_ValidationStatusConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    showText: function Ext_ux_ValidationStatusConfig$showText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['showText'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_ValidationStatusConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_ValidationStatusConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_ValidationStatusConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_ValidationStatusConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitText: function Ext_ux_ValidationStatusConfig$submitText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['submitText'] = value;
        return this;
    },
    
    tpl: function Ext_ux_ValidationStatusConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_ValidationStatusConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validIconCls: function Ext_ux_ValidationStatusConfig$validIconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['validIconCls'] = value;
        return this;
    },
    
    xtype: function Ext_ux_ValidationStatusConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.ValidationStatusConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.chart');

////////////////////////////////////////////////////////////////////////////////
// Ext.chart.BarChartConfig

Ext.chart.BarChartConfig = function Ext_chart_BarChartConfig() {
    Ext.chart.BarChartConfig.initializeBase(this);
}
Ext.chart.BarChartConfig.prototype = {
    
    allowDomMove: function Ext_chart_BarChartConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_chart_BarChartConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_chart_BarChartConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_chart_BarChartConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_chart_BarChartConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_chart_BarChartConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_chart_BarChartConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_chart_BarChartConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    backgroundColor: function Ext_chart_BarChartConfig$backgroundColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['backgroundColor'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_chart_BarChartConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_chart_BarChartConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_chart_BarChartConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_chart_BarChartConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_chart_BarChartConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    chartStyle: function Ext_chart_BarChartConfig$chartStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['chartStyle'] = value;
        return this;
    },
    
    clearCls: function Ext_chart_BarChartConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_chart_BarChartConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_chart_BarChartConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_chart_BarChartConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_chart_BarChartConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableCaching: function Ext_chart_BarChartConfig$disableCaching(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['disableCaching'] = value;
        return this;
    },
    
    disabled: function Ext_chart_BarChartConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_chart_BarChartConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    expressInstall: function Ext_chart_BarChartConfig$expressInstall(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['expressInstall'] = value;
        return this;
    },
    
    extraStyle: function Ext_chart_BarChartConfig$extraStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['extraStyle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_chart_BarChartConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flashParams: function Ext_chart_BarChartConfig$flashParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['flashParams'] = value;
        return this;
    },
    
    flashVars: function Ext_chart_BarChartConfig$flashVars(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['flashVars'] = value;
        return this;
    },
    
    flashVersion: function Ext_chart_BarChartConfig$flashVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['flashVersion'] = value;
        return this;
    },
    
    flex: function Ext_chart_BarChartConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_chart_BarChartConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_chart_BarChartConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_chart_BarChartConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_chart_BarChartConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_chart_BarChartConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_chart_BarChartConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_chart_BarChartConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_chart_BarChartConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_chart_BarChartConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_chart_BarChartConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_chart_BarChartConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_chart_BarChartConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_chart_BarChartConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_chart_BarChartConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_chart_BarChartConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_chart_BarChartConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_chart_BarChartConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_chart_BarChartConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_chart_BarChartConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_chart_BarChartConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_chart_BarChartConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    seriesStyles: function Ext_chart_BarChartConfig$seriesStyles(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['seriesStyles'] = value;
        return this;
    },
    
    stateEvents: function Ext_chart_BarChartConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_chart_BarChartConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_chart_BarChartConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_chart_BarChartConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_chart_BarChartConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_chart_BarChartConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_chart_BarChartConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    url: function Ext_chart_BarChartConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    width: function Ext_chart_BarChartConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wmode: function Ext_chart_BarChartConfig$wmode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['wmode'] = value;
        return this;
    },
    
    x: function Ext_chart_BarChartConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_chart_BarChartConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_chart_BarChartConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.BarChartConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.chart.CartesianChartConfig

Ext.chart.CartesianChartConfig = function Ext_chart_CartesianChartConfig() {
    Ext.chart.CartesianChartConfig.initializeBase(this);
}
Ext.chart.CartesianChartConfig.prototype = {
    
    allowDomMove: function Ext_chart_CartesianChartConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_chart_CartesianChartConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_chart_CartesianChartConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_chart_CartesianChartConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_chart_CartesianChartConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_chart_CartesianChartConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_chart_CartesianChartConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_chart_CartesianChartConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    backgroundColor: function Ext_chart_CartesianChartConfig$backgroundColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['backgroundColor'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_chart_CartesianChartConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_chart_CartesianChartConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_chart_CartesianChartConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_chart_CartesianChartConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_chart_CartesianChartConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    chartStyle: function Ext_chart_CartesianChartConfig$chartStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['chartStyle'] = value;
        return this;
    },
    
    clearCls: function Ext_chart_CartesianChartConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_chart_CartesianChartConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_chart_CartesianChartConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_chart_CartesianChartConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_chart_CartesianChartConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableCaching: function Ext_chart_CartesianChartConfig$disableCaching(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['disableCaching'] = value;
        return this;
    },
    
    disabled: function Ext_chart_CartesianChartConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_chart_CartesianChartConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    expressInstall: function Ext_chart_CartesianChartConfig$expressInstall(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['expressInstall'] = value;
        return this;
    },
    
    extraStyle: function Ext_chart_CartesianChartConfig$extraStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['extraStyle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_chart_CartesianChartConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flashParams: function Ext_chart_CartesianChartConfig$flashParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['flashParams'] = value;
        return this;
    },
    
    flashVars: function Ext_chart_CartesianChartConfig$flashVars(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['flashVars'] = value;
        return this;
    },
    
    flashVersion: function Ext_chart_CartesianChartConfig$flashVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['flashVersion'] = value;
        return this;
    },
    
    flex: function Ext_chart_CartesianChartConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_chart_CartesianChartConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_chart_CartesianChartConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_chart_CartesianChartConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_chart_CartesianChartConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_chart_CartesianChartConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_chart_CartesianChartConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_chart_CartesianChartConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_chart_CartesianChartConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_chart_CartesianChartConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_chart_CartesianChartConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_chart_CartesianChartConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_chart_CartesianChartConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_chart_CartesianChartConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_chart_CartesianChartConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_chart_CartesianChartConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_chart_CartesianChartConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_chart_CartesianChartConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_chart_CartesianChartConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_chart_CartesianChartConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_chart_CartesianChartConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_chart_CartesianChartConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    seriesStyles: function Ext_chart_CartesianChartConfig$seriesStyles(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['seriesStyles'] = value;
        return this;
    },
    
    stateEvents: function Ext_chart_CartesianChartConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_chart_CartesianChartConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_chart_CartesianChartConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_chart_CartesianChartConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_chart_CartesianChartConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_chart_CartesianChartConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_chart_CartesianChartConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    url: function Ext_chart_CartesianChartConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    width: function Ext_chart_CartesianChartConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wmode: function Ext_chart_CartesianChartConfig$wmode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['wmode'] = value;
        return this;
    },
    
    x: function Ext_chart_CartesianChartConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_chart_CartesianChartConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_chart_CartesianChartConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.CartesianChartConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.chart.ChartConfig

Ext.chart.ChartConfig = function Ext_chart_ChartConfig() {
    Ext.chart.ChartConfig.initializeBase(this);
}
Ext.chart.ChartConfig.prototype = {
    
    allowDomMove: function Ext_chart_ChartConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_chart_ChartConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_chart_ChartConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_chart_ChartConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_chart_ChartConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_chart_ChartConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_chart_ChartConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_chart_ChartConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    backgroundColor: function Ext_chart_ChartConfig$backgroundColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['backgroundColor'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_chart_ChartConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_chart_ChartConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_chart_ChartConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_chart_ChartConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_chart_ChartConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    chartStyle: function Ext_chart_ChartConfig$chartStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['chartStyle'] = value;
        return this;
    },
    
    clearCls: function Ext_chart_ChartConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_chart_ChartConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_chart_ChartConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_chart_ChartConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_chart_ChartConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableCaching: function Ext_chart_ChartConfig$disableCaching(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['disableCaching'] = value;
        return this;
    },
    
    disabled: function Ext_chart_ChartConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_chart_ChartConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    expressInstall: function Ext_chart_ChartConfig$expressInstall(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['expressInstall'] = value;
        return this;
    },
    
    extraStyle: function Ext_chart_ChartConfig$extraStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['extraStyle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_chart_ChartConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flashParams: function Ext_chart_ChartConfig$flashParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['flashParams'] = value;
        return this;
    },
    
    flashVars: function Ext_chart_ChartConfig$flashVars(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['flashVars'] = value;
        return this;
    },
    
    flashVersion: function Ext_chart_ChartConfig$flashVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['flashVersion'] = value;
        return this;
    },
    
    flex: function Ext_chart_ChartConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_chart_ChartConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_chart_ChartConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_chart_ChartConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_chart_ChartConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_chart_ChartConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_chart_ChartConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_chart_ChartConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_chart_ChartConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_chart_ChartConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_chart_ChartConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_chart_ChartConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_chart_ChartConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_chart_ChartConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_chart_ChartConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_chart_ChartConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_chart_ChartConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_chart_ChartConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_chart_ChartConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_chart_ChartConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_chart_ChartConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_chart_ChartConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    seriesStyles: function Ext_chart_ChartConfig$seriesStyles(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['seriesStyles'] = value;
        return this;
    },
    
    stateEvents: function Ext_chart_ChartConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_chart_ChartConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_chart_ChartConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_chart_ChartConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_chart_ChartConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_chart_ChartConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_chart_ChartConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    url: function Ext_chart_ChartConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    width: function Ext_chart_ChartConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wmode: function Ext_chart_ChartConfig$wmode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['wmode'] = value;
        return this;
    },
    
    x: function Ext_chart_ChartConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_chart_ChartConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_chart_ChartConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ChartConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.chart.ColumnChartConfig

Ext.chart.ColumnChartConfig = function Ext_chart_ColumnChartConfig() {
    Ext.chart.ColumnChartConfig.initializeBase(this);
}
Ext.chart.ColumnChartConfig.prototype = {
    
    allowDomMove: function Ext_chart_ColumnChartConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_chart_ColumnChartConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_chart_ColumnChartConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_chart_ColumnChartConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_chart_ColumnChartConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_chart_ColumnChartConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_chart_ColumnChartConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_chart_ColumnChartConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    backgroundColor: function Ext_chart_ColumnChartConfig$backgroundColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['backgroundColor'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_chart_ColumnChartConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_chart_ColumnChartConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_chart_ColumnChartConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_chart_ColumnChartConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_chart_ColumnChartConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    chartStyle: function Ext_chart_ColumnChartConfig$chartStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['chartStyle'] = value;
        return this;
    },
    
    clearCls: function Ext_chart_ColumnChartConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_chart_ColumnChartConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_chart_ColumnChartConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_chart_ColumnChartConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_chart_ColumnChartConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableCaching: function Ext_chart_ColumnChartConfig$disableCaching(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['disableCaching'] = value;
        return this;
    },
    
    disabled: function Ext_chart_ColumnChartConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_chart_ColumnChartConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    expressInstall: function Ext_chart_ColumnChartConfig$expressInstall(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['expressInstall'] = value;
        return this;
    },
    
    extraStyle: function Ext_chart_ColumnChartConfig$extraStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['extraStyle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_chart_ColumnChartConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flashParams: function Ext_chart_ColumnChartConfig$flashParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['flashParams'] = value;
        return this;
    },
    
    flashVars: function Ext_chart_ColumnChartConfig$flashVars(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['flashVars'] = value;
        return this;
    },
    
    flashVersion: function Ext_chart_ColumnChartConfig$flashVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['flashVersion'] = value;
        return this;
    },
    
    flex: function Ext_chart_ColumnChartConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_chart_ColumnChartConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_chart_ColumnChartConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_chart_ColumnChartConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_chart_ColumnChartConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_chart_ColumnChartConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_chart_ColumnChartConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_chart_ColumnChartConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_chart_ColumnChartConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_chart_ColumnChartConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_chart_ColumnChartConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_chart_ColumnChartConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_chart_ColumnChartConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_chart_ColumnChartConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_chart_ColumnChartConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_chart_ColumnChartConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_chart_ColumnChartConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_chart_ColumnChartConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_chart_ColumnChartConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_chart_ColumnChartConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_chart_ColumnChartConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_chart_ColumnChartConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    seriesStyles: function Ext_chart_ColumnChartConfig$seriesStyles(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['seriesStyles'] = value;
        return this;
    },
    
    stateEvents: function Ext_chart_ColumnChartConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_chart_ColumnChartConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_chart_ColumnChartConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_chart_ColumnChartConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_chart_ColumnChartConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_chart_ColumnChartConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_chart_ColumnChartConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    url: function Ext_chart_ColumnChartConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    width: function Ext_chart_ColumnChartConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wmode: function Ext_chart_ColumnChartConfig$wmode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['wmode'] = value;
        return this;
    },
    
    x: function Ext_chart_ColumnChartConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_chart_ColumnChartConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_chart_ColumnChartConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.ColumnChartConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.chart.LineChartConfig

Ext.chart.LineChartConfig = function Ext_chart_LineChartConfig() {
    Ext.chart.LineChartConfig.initializeBase(this);
}
Ext.chart.LineChartConfig.prototype = {
    
    allowDomMove: function Ext_chart_LineChartConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_chart_LineChartConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_chart_LineChartConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_chart_LineChartConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_chart_LineChartConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_chart_LineChartConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_chart_LineChartConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_chart_LineChartConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    backgroundColor: function Ext_chart_LineChartConfig$backgroundColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['backgroundColor'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_chart_LineChartConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_chart_LineChartConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_chart_LineChartConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_chart_LineChartConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_chart_LineChartConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    chartStyle: function Ext_chart_LineChartConfig$chartStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['chartStyle'] = value;
        return this;
    },
    
    clearCls: function Ext_chart_LineChartConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_chart_LineChartConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_chart_LineChartConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_chart_LineChartConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_chart_LineChartConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableCaching: function Ext_chart_LineChartConfig$disableCaching(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['disableCaching'] = value;
        return this;
    },
    
    disabled: function Ext_chart_LineChartConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_chart_LineChartConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    expressInstall: function Ext_chart_LineChartConfig$expressInstall(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['expressInstall'] = value;
        return this;
    },
    
    extraStyle: function Ext_chart_LineChartConfig$extraStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['extraStyle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_chart_LineChartConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flashParams: function Ext_chart_LineChartConfig$flashParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['flashParams'] = value;
        return this;
    },
    
    flashVars: function Ext_chart_LineChartConfig$flashVars(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['flashVars'] = value;
        return this;
    },
    
    flashVersion: function Ext_chart_LineChartConfig$flashVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['flashVersion'] = value;
        return this;
    },
    
    flex: function Ext_chart_LineChartConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_chart_LineChartConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_chart_LineChartConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_chart_LineChartConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_chart_LineChartConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_chart_LineChartConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_chart_LineChartConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_chart_LineChartConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_chart_LineChartConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_chart_LineChartConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_chart_LineChartConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_chart_LineChartConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_chart_LineChartConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_chart_LineChartConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_chart_LineChartConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_chart_LineChartConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_chart_LineChartConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_chart_LineChartConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_chart_LineChartConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_chart_LineChartConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_chart_LineChartConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_chart_LineChartConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    seriesStyles: function Ext_chart_LineChartConfig$seriesStyles(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['seriesStyles'] = value;
        return this;
    },
    
    stateEvents: function Ext_chart_LineChartConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_chart_LineChartConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_chart_LineChartConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_chart_LineChartConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_chart_LineChartConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_chart_LineChartConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_chart_LineChartConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    url: function Ext_chart_LineChartConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    width: function Ext_chart_LineChartConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wmode: function Ext_chart_LineChartConfig$wmode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['wmode'] = value;
        return this;
    },
    
    x: function Ext_chart_LineChartConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_chart_LineChartConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_chart_LineChartConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.LineChartConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.chart.PieChartConfig

Ext.chart.PieChartConfig = function Ext_chart_PieChartConfig() {
    Ext.chart.PieChartConfig.initializeBase(this);
}
Ext.chart.PieChartConfig.prototype = {
    
    allowDomMove: function Ext_chart_PieChartConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_chart_PieChartConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_chart_PieChartConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_chart_PieChartConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_chart_PieChartConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_chart_PieChartConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_chart_PieChartConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_chart_PieChartConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    backgroundColor: function Ext_chart_PieChartConfig$backgroundColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['backgroundColor'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_chart_PieChartConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_chart_PieChartConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_chart_PieChartConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_chart_PieChartConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_chart_PieChartConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    chartStyle: function Ext_chart_PieChartConfig$chartStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['chartStyle'] = value;
        return this;
    },
    
    clearCls: function Ext_chart_PieChartConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_chart_PieChartConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_chart_PieChartConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_chart_PieChartConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_chart_PieChartConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableCaching: function Ext_chart_PieChartConfig$disableCaching(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['disableCaching'] = value;
        return this;
    },
    
    disabled: function Ext_chart_PieChartConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_chart_PieChartConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    expressInstall: function Ext_chart_PieChartConfig$expressInstall(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['expressInstall'] = value;
        return this;
    },
    
    extraStyle: function Ext_chart_PieChartConfig$extraStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['extraStyle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_chart_PieChartConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flashParams: function Ext_chart_PieChartConfig$flashParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['flashParams'] = value;
        return this;
    },
    
    flashVars: function Ext_chart_PieChartConfig$flashVars(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['flashVars'] = value;
        return this;
    },
    
    flashVersion: function Ext_chart_PieChartConfig$flashVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['flashVersion'] = value;
        return this;
    },
    
    flex: function Ext_chart_PieChartConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_chart_PieChartConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_chart_PieChartConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_chart_PieChartConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_chart_PieChartConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_chart_PieChartConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_chart_PieChartConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_chart_PieChartConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_chart_PieChartConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_chart_PieChartConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_chart_PieChartConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_chart_PieChartConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_chart_PieChartConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_chart_PieChartConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_chart_PieChartConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_chart_PieChartConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_chart_PieChartConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_chart_PieChartConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_chart_PieChartConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_chart_PieChartConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_chart_PieChartConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_chart_PieChartConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    seriesStyles: function Ext_chart_PieChartConfig$seriesStyles(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['seriesStyles'] = value;
        return this;
    },
    
    stateEvents: function Ext_chart_PieChartConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_chart_PieChartConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_chart_PieChartConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_chart_PieChartConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_chart_PieChartConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_chart_PieChartConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_chart_PieChartConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    url: function Ext_chart_PieChartConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    width: function Ext_chart_PieChartConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wmode: function Ext_chart_PieChartConfig$wmode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['wmode'] = value;
        return this;
    },
    
    x: function Ext_chart_PieChartConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_chart_PieChartConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_chart_PieChartConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.PieChartConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.chart.StackedBarChartConfig

Ext.chart.StackedBarChartConfig = function Ext_chart_StackedBarChartConfig() {
    Ext.chart.StackedBarChartConfig.initializeBase(this);
}
Ext.chart.StackedBarChartConfig.prototype = {
    
    allowDomMove: function Ext_chart_StackedBarChartConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_chart_StackedBarChartConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_chart_StackedBarChartConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_chart_StackedBarChartConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_chart_StackedBarChartConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_chart_StackedBarChartConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_chart_StackedBarChartConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_chart_StackedBarChartConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    backgroundColor: function Ext_chart_StackedBarChartConfig$backgroundColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['backgroundColor'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_chart_StackedBarChartConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_chart_StackedBarChartConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_chart_StackedBarChartConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_chart_StackedBarChartConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_chart_StackedBarChartConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    chartStyle: function Ext_chart_StackedBarChartConfig$chartStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['chartStyle'] = value;
        return this;
    },
    
    clearCls: function Ext_chart_StackedBarChartConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_chart_StackedBarChartConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_chart_StackedBarChartConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_chart_StackedBarChartConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_chart_StackedBarChartConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableCaching: function Ext_chart_StackedBarChartConfig$disableCaching(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['disableCaching'] = value;
        return this;
    },
    
    disabled: function Ext_chart_StackedBarChartConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_chart_StackedBarChartConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    expressInstall: function Ext_chart_StackedBarChartConfig$expressInstall(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['expressInstall'] = value;
        return this;
    },
    
    extraStyle: function Ext_chart_StackedBarChartConfig$extraStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['extraStyle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_chart_StackedBarChartConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flashParams: function Ext_chart_StackedBarChartConfig$flashParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['flashParams'] = value;
        return this;
    },
    
    flashVars: function Ext_chart_StackedBarChartConfig$flashVars(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['flashVars'] = value;
        return this;
    },
    
    flashVersion: function Ext_chart_StackedBarChartConfig$flashVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['flashVersion'] = value;
        return this;
    },
    
    flex: function Ext_chart_StackedBarChartConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_chart_StackedBarChartConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_chart_StackedBarChartConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_chart_StackedBarChartConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_chart_StackedBarChartConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_chart_StackedBarChartConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_chart_StackedBarChartConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_chart_StackedBarChartConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_chart_StackedBarChartConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_chart_StackedBarChartConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_chart_StackedBarChartConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_chart_StackedBarChartConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_chart_StackedBarChartConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_chart_StackedBarChartConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_chart_StackedBarChartConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_chart_StackedBarChartConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_chart_StackedBarChartConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_chart_StackedBarChartConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_chart_StackedBarChartConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_chart_StackedBarChartConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_chart_StackedBarChartConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_chart_StackedBarChartConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    seriesStyles: function Ext_chart_StackedBarChartConfig$seriesStyles(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['seriesStyles'] = value;
        return this;
    },
    
    stateEvents: function Ext_chart_StackedBarChartConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_chart_StackedBarChartConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_chart_StackedBarChartConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_chart_StackedBarChartConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_chart_StackedBarChartConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_chart_StackedBarChartConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_chart_StackedBarChartConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    url: function Ext_chart_StackedBarChartConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    width: function Ext_chart_StackedBarChartConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wmode: function Ext_chart_StackedBarChartConfig$wmode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['wmode'] = value;
        return this;
    },
    
    x: function Ext_chart_StackedBarChartConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_chart_StackedBarChartConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_chart_StackedBarChartConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedBarChartConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.chart.StackedColumnChartConfig

Ext.chart.StackedColumnChartConfig = function Ext_chart_StackedColumnChartConfig() {
    Ext.chart.StackedColumnChartConfig.initializeBase(this);
}
Ext.chart.StackedColumnChartConfig.prototype = {
    
    allowDomMove: function Ext_chart_StackedColumnChartConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_chart_StackedColumnChartConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_chart_StackedColumnChartConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_chart_StackedColumnChartConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_chart_StackedColumnChartConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_chart_StackedColumnChartConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_chart_StackedColumnChartConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_chart_StackedColumnChartConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    backgroundColor: function Ext_chart_StackedColumnChartConfig$backgroundColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['backgroundColor'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_chart_StackedColumnChartConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_chart_StackedColumnChartConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_chart_StackedColumnChartConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_chart_StackedColumnChartConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_chart_StackedColumnChartConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    chartStyle: function Ext_chart_StackedColumnChartConfig$chartStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['chartStyle'] = value;
        return this;
    },
    
    clearCls: function Ext_chart_StackedColumnChartConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_chart_StackedColumnChartConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_chart_StackedColumnChartConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_chart_StackedColumnChartConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_chart_StackedColumnChartConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableCaching: function Ext_chart_StackedColumnChartConfig$disableCaching(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['disableCaching'] = value;
        return this;
    },
    
    disabled: function Ext_chart_StackedColumnChartConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_chart_StackedColumnChartConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    expressInstall: function Ext_chart_StackedColumnChartConfig$expressInstall(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['expressInstall'] = value;
        return this;
    },
    
    extraStyle: function Ext_chart_StackedColumnChartConfig$extraStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['extraStyle'] = value;
        return this;
    },
    
    fieldLabel: function Ext_chart_StackedColumnChartConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flashParams: function Ext_chart_StackedColumnChartConfig$flashParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['flashParams'] = value;
        return this;
    },
    
    flashVars: function Ext_chart_StackedColumnChartConfig$flashVars(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['flashVars'] = value;
        return this;
    },
    
    flashVersion: function Ext_chart_StackedColumnChartConfig$flashVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['flashVersion'] = value;
        return this;
    },
    
    flex: function Ext_chart_StackedColumnChartConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_chart_StackedColumnChartConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_chart_StackedColumnChartConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_chart_StackedColumnChartConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_chart_StackedColumnChartConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_chart_StackedColumnChartConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_chart_StackedColumnChartConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_chart_StackedColumnChartConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_chart_StackedColumnChartConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_chart_StackedColumnChartConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_chart_StackedColumnChartConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_chart_StackedColumnChartConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_chart_StackedColumnChartConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_chart_StackedColumnChartConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_chart_StackedColumnChartConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_chart_StackedColumnChartConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_chart_StackedColumnChartConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_chart_StackedColumnChartConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_chart_StackedColumnChartConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_chart_StackedColumnChartConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_chart_StackedColumnChartConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_chart_StackedColumnChartConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    seriesStyles: function Ext_chart_StackedColumnChartConfig$seriesStyles(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['seriesStyles'] = value;
        return this;
    },
    
    stateEvents: function Ext_chart_StackedColumnChartConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_chart_StackedColumnChartConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_chart_StackedColumnChartConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_chart_StackedColumnChartConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_chart_StackedColumnChartConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_chart_StackedColumnChartConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_chart_StackedColumnChartConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    url: function Ext_chart_StackedColumnChartConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    width: function Ext_chart_StackedColumnChartConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wmode: function Ext_chart_StackedColumnChartConfig$wmode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['wmode'] = value;
        return this;
    },
    
    x: function Ext_chart_StackedColumnChartConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_chart_StackedColumnChartConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_chart_StackedColumnChartConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.chart.StackedColumnChartConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.data');

////////////////////////////////////////////////////////////////////////////////
// Ext.data.ArrayReaderConfig

Ext.data.ArrayReaderConfig = function Ext_data_ArrayReaderConfig() {
    Ext.data.ArrayReaderConfig.initializeBase(this);
}
Ext.data.ArrayReaderConfig.prototype = {
    
    fields: function Ext_data_ArrayReaderConfig$fields(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ArrayReaderConfig"></returns>
        this.o['fields'] = value;
        return this;
    },
    
    id: function Ext_data_ArrayReaderConfig$id(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.data.ArrayReaderConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    idIndex: function Ext_data_ArrayReaderConfig$idIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.data.ArrayReaderConfig"></returns>
        this.o['idIndex'] = value;
        return this;
    },
    
    idProperty: function Ext_data_ArrayReaderConfig$idProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayReaderConfig"></returns>
        this.o['idProperty'] = value;
        return this;
    },
    
    messageProperty: function Ext_data_ArrayReaderConfig$messageProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayReaderConfig"></returns>
        this.o['messageProperty'] = value;
        return this;
    },
    
    root: function Ext_data_ArrayReaderConfig$root(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayReaderConfig"></returns>
        this.o['root'] = value;
        return this;
    },
    
    successProperty: function Ext_data_ArrayReaderConfig$successProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayReaderConfig"></returns>
        this.o['successProperty'] = value;
        return this;
    },
    
    totalProperty: function Ext_data_ArrayReaderConfig$totalProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayReaderConfig"></returns>
        this.o['totalProperty'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.ArrayStoreConfig

Ext.data.ArrayStoreConfig = function Ext_data_ArrayStoreConfig() {
    Ext.data.ArrayStoreConfig.initializeBase(this);
}
Ext.data.ArrayStoreConfig.prototype = {
    
    autoDestroy: function Ext_data_ArrayStoreConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoLoad: function Ext_data_ArrayStoreConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoSave: function Ext_data_ArrayStoreConfig$autoSave(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['autoSave'] = value;
        return this;
    },
    
    baseParams: function Ext_data_ArrayStoreConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    batch: function Ext_data_ArrayStoreConfig$batch(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['batch'] = value;
        return this;
    },
    
    data: function Ext_data_ArrayStoreConfig$data(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultParamNames: function Ext_data_ArrayStoreConfig$defaultParamNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['defaultParamNames'] = value;
        return this;
    },
    
    listeners: function Ext_data_ArrayStoreConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    paramNames: function Ext_data_ArrayStoreConfig$paramNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['paramNames'] = value;
        return this;
    },
    
    proxy: function Ext_data_ArrayStoreConfig$proxy(value) {
        /// <param name="value" type="Ext.data.DataProxy">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['proxy'] = value;
        return this;
    },
    
    pruneModifiedRecords: function Ext_data_ArrayStoreConfig$pruneModifiedRecords(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['pruneModifiedRecords'] = value;
        return this;
    },
    
    reader: function Ext_data_ArrayStoreConfig$reader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['reader'] = value;
        return this;
    },
    
    remoteSort: function Ext_data_ArrayStoreConfig$remoteSort(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['remoteSort'] = value;
        return this;
    },
    
    restful: function Ext_data_ArrayStoreConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['restful'] = value;
        return this;
    },
    
    sortInfo: function Ext_data_ArrayStoreConfig$sortInfo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['sortInfo'] = value;
        return this;
    },
    
    storeId: function Ext_data_ArrayStoreConfig$storeId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['storeId'] = value;
        return this;
    },
    
    url: function Ext_data_ArrayStoreConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    writer: function Ext_data_ArrayStoreConfig$writer(value) {
        /// <param name="value" type="Ext.data.DataWriter">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['writer'] = value;
        return this;
    },
    
    fields: function Ext_data_ArrayStoreConfig$fields(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['fields'] = value;
        return this;
    },
    
    id: function Ext_data_ArrayStoreConfig$id(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    idIndex: function Ext_data_ArrayStoreConfig$idIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['idIndex'] = value;
        return this;
    },
    
    idProperty: function Ext_data_ArrayStoreConfig$idProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['idProperty'] = value;
        return this;
    },
    
    messageProperty: function Ext_data_ArrayStoreConfig$messageProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['messageProperty'] = value;
        return this;
    },
    
    root: function Ext_data_ArrayStoreConfig$root(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['root'] = value;
        return this;
    },
    
    successProperty: function Ext_data_ArrayStoreConfig$successProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['successProperty'] = value;
        return this;
    },
    
    totalProperty: function Ext_data_ArrayStoreConfig$totalProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ArrayStoreConfig"></returns>
        this.o['totalProperty'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.ConnectionConfig

Ext.data.ConnectionConfig = function Ext_data_ConnectionConfig() {
    Ext.data.ConnectionConfig.initializeBase(this);
}
Ext.data.ConnectionConfig.prototype = {
    
    defaultHeaders: function Ext_data_ConnectionConfig$defaultHeaders(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ConnectionConfig"></returns>
        this.o['defaultHeaders'] = value;
        return this;
    },
    
    extraParams: function Ext_data_ConnectionConfig$extraParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ConnectionConfig"></returns>
        this.o['extraParams'] = value;
        return this;
    },
    
    listeners: function Ext_data_ConnectionConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ConnectionConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    method: function Ext_data_ConnectionConfig$method(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ConnectionConfig"></returns>
        this.o['method'] = value;
        return this;
    },
    
    timeout: function Ext_data_ConnectionConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.data.ConnectionConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    url: function Ext_data_ConnectionConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ConnectionConfig"></returns>
        this.o['url'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.DataProxyConfig

Ext.data.DataProxyConfig = function Ext_data_DataProxyConfig() {
    Ext.data.DataProxyConfig.initializeBase(this);
}
Ext.data.DataProxyConfig.prototype = {
    
    api: function Ext_data_DataProxyConfig$api(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DataProxyConfig"></returns>
        this.o['api'] = value;
        return this;
    },
    
    doRequest: function Ext_data_DataProxyConfig$doRequest(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.DataProxyConfig"></returns>
        this.o['doRequest'] = value;
        return this;
    },
    
    listeners: function Ext_data_DataProxyConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DataProxyConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    restful: function Ext_data_DataProxyConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DataProxyConfig"></returns>
        this.o['restful'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.DataReaderConfig

Ext.data.DataReaderConfig = function Ext_data_DataReaderConfig() {
    Ext.data.DataReaderConfig.initializeBase(this);
}
Ext.data.DataReaderConfig.prototype = {
    
    fields: function Ext_data_DataReaderConfig$fields(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DataReaderConfig"></returns>
        this.o['fields'] = value;
        return this;
    },
    
    messageProperty: function Ext_data_DataReaderConfig$messageProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.DataReaderConfig"></returns>
        this.o['messageProperty'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.DataWriterConfig

Ext.data.DataWriterConfig = function Ext_data_DataWriterConfig() {
    Ext.data.DataWriterConfig.initializeBase(this);
}
Ext.data.DataWriterConfig.prototype = {
    
    createRecord: function Ext_data_DataWriterConfig$createRecord(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.DataWriterConfig"></returns>
        this.o['createRecord'] = value;
        return this;
    },
    
    destroyRecord: function Ext_data_DataWriterConfig$destroyRecord(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.DataWriterConfig"></returns>
        this.o['destroyRecord'] = value;
        return this;
    },
    
    listful: function Ext_data_DataWriterConfig$listful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DataWriterConfig"></returns>
        this.o['listful'] = value;
        return this;
    },
    
    updateRecord: function Ext_data_DataWriterConfig$updateRecord(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.DataWriterConfig"></returns>
        this.o['updateRecord'] = value;
        return this;
    },
    
    writeAllFields: function Ext_data_DataWriterConfig$writeAllFields(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DataWriterConfig"></returns>
        this.o['writeAllFields'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.DirectProxyConfig

Ext.data.DirectProxyConfig = function Ext_data_DirectProxyConfig() {
    Ext.data.DirectProxyConfig.initializeBase(this);
}
Ext.data.DirectProxyConfig.prototype = {
    
    api: function Ext_data_DirectProxyConfig$api(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DirectProxyConfig"></returns>
        this.o['api'] = value;
        return this;
    },
    
    directFn: function Ext_data_DirectProxyConfig$directFn(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.DirectProxyConfig"></returns>
        this.o['directFn'] = value;
        return this;
    },
    
    doRequest: function Ext_data_DirectProxyConfig$doRequest(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.DirectProxyConfig"></returns>
        this.o['doRequest'] = value;
        return this;
    },
    
    listeners: function Ext_data_DirectProxyConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DirectProxyConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    paramOrder: function Ext_data_DirectProxyConfig$paramOrder(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DirectProxyConfig"></returns>
        this.o['paramOrder'] = value;
        return this;
    },
    
    paramsAsHash: function Ext_data_DirectProxyConfig$paramsAsHash(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DirectProxyConfig"></returns>
        this.o['paramsAsHash'] = value;
        return this;
    },
    
    restful: function Ext_data_DirectProxyConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DirectProxyConfig"></returns>
        this.o['restful'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.DirectStoreConfig

Ext.data.DirectStoreConfig = function Ext_data_DirectStoreConfig() {
    Ext.data.DirectStoreConfig.initializeBase(this);
}
Ext.data.DirectStoreConfig.prototype = {
    
    autoDestroy: function Ext_data_DirectStoreConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoLoad: function Ext_data_DirectStoreConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoSave: function Ext_data_DirectStoreConfig$autoSave(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['autoSave'] = value;
        return this;
    },
    
    baseParams: function Ext_data_DirectStoreConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    batch: function Ext_data_DirectStoreConfig$batch(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['batch'] = value;
        return this;
    },
    
    data: function Ext_data_DirectStoreConfig$data(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultParamNames: function Ext_data_DirectStoreConfig$defaultParamNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['defaultParamNames'] = value;
        return this;
    },
    
    listeners: function Ext_data_DirectStoreConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    paramNames: function Ext_data_DirectStoreConfig$paramNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['paramNames'] = value;
        return this;
    },
    
    proxy: function Ext_data_DirectStoreConfig$proxy(value) {
        /// <param name="value" type="Ext.data.DataProxy">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['proxy'] = value;
        return this;
    },
    
    pruneModifiedRecords: function Ext_data_DirectStoreConfig$pruneModifiedRecords(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['pruneModifiedRecords'] = value;
        return this;
    },
    
    reader: function Ext_data_DirectStoreConfig$reader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['reader'] = value;
        return this;
    },
    
    remoteSort: function Ext_data_DirectStoreConfig$remoteSort(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['remoteSort'] = value;
        return this;
    },
    
    restful: function Ext_data_DirectStoreConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['restful'] = value;
        return this;
    },
    
    sortInfo: function Ext_data_DirectStoreConfig$sortInfo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['sortInfo'] = value;
        return this;
    },
    
    storeId: function Ext_data_DirectStoreConfig$storeId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['storeId'] = value;
        return this;
    },
    
    url: function Ext_data_DirectStoreConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    writer: function Ext_data_DirectStoreConfig$writer(value) {
        /// <param name="value" type="Ext.data.DataWriter">
        /// </param>
        /// <returns type="Ext.data.DirectStoreConfig"></returns>
        this.o['writer'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.FieldConfig

Ext.data.FieldConfig = function Ext_data_FieldConfig() {
    Ext.data.FieldConfig.initializeBase(this);
}
Ext.data.FieldConfig.prototype = {
    
    allowBlank: function Ext_data_FieldConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    convert: function Ext_data_FieldConfig$convert(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['convert'] = value;
        return this;
    },
    
    dateFormat: function Ext_data_FieldConfig$dateFormat(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['dateFormat'] = value;
        return this;
    },
    
    defaultValue: function Ext_data_FieldConfig$defaultValue(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['defaultValue'] = value;
        return this;
    },
    
    mapping: function Ext_data_FieldConfig$mapping(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['mapping'] = value;
        return this;
    },
    
    name: function Ext_data_FieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    sortDir: function Ext_data_FieldConfig$sortDir(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['sortDir'] = value;
        return this;
    },
    
    sortType: function Ext_data_FieldConfig$sortType(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['sortType'] = value;
        return this;
    },
    
    type: function Ext_data_FieldConfig$type(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['type'] = value;
        return this;
    },
    
    useNull: function Ext_data_FieldConfig$useNull(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.FieldConfig"></returns>
        this.o['useNull'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.GroupingStoreConfig

Ext.data.GroupingStoreConfig = function Ext_data_GroupingStoreConfig() {
    Ext.data.GroupingStoreConfig.initializeBase(this);
}
Ext.data.GroupingStoreConfig.prototype = {
    
    autoDestroy: function Ext_data_GroupingStoreConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoLoad: function Ext_data_GroupingStoreConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoSave: function Ext_data_GroupingStoreConfig$autoSave(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['autoSave'] = value;
        return this;
    },
    
    baseParams: function Ext_data_GroupingStoreConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    batch: function Ext_data_GroupingStoreConfig$batch(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['batch'] = value;
        return this;
    },
    
    data: function Ext_data_GroupingStoreConfig$data(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultParamNames: function Ext_data_GroupingStoreConfig$defaultParamNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['defaultParamNames'] = value;
        return this;
    },
    
    groupDir: function Ext_data_GroupingStoreConfig$groupDir(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['groupDir'] = value;
        return this;
    },
    
    groupField: function Ext_data_GroupingStoreConfig$groupField(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['groupField'] = value;
        return this;
    },
    
    groupOnSort: function Ext_data_GroupingStoreConfig$groupOnSort(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['groupOnSort'] = value;
        return this;
    },
    
    listeners: function Ext_data_GroupingStoreConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    paramNames: function Ext_data_GroupingStoreConfig$paramNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['paramNames'] = value;
        return this;
    },
    
    proxy: function Ext_data_GroupingStoreConfig$proxy(value) {
        /// <param name="value" type="Ext.data.DataProxy">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['proxy'] = value;
        return this;
    },
    
    pruneModifiedRecords: function Ext_data_GroupingStoreConfig$pruneModifiedRecords(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['pruneModifiedRecords'] = value;
        return this;
    },
    
    reader: function Ext_data_GroupingStoreConfig$reader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['reader'] = value;
        return this;
    },
    
    remoteGroup: function Ext_data_GroupingStoreConfig$remoteGroup(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['remoteGroup'] = value;
        return this;
    },
    
    remoteSort: function Ext_data_GroupingStoreConfig$remoteSort(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['remoteSort'] = value;
        return this;
    },
    
    restful: function Ext_data_GroupingStoreConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['restful'] = value;
        return this;
    },
    
    sortInfo: function Ext_data_GroupingStoreConfig$sortInfo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['sortInfo'] = value;
        return this;
    },
    
    storeId: function Ext_data_GroupingStoreConfig$storeId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['storeId'] = value;
        return this;
    },
    
    url: function Ext_data_GroupingStoreConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    writer: function Ext_data_GroupingStoreConfig$writer(value) {
        /// <param name="value" type="Ext.data.DataWriter">
        /// </param>
        /// <returns type="Ext.data.GroupingStoreConfig"></returns>
        this.o['writer'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.HttpProxyConfig

Ext.data.HttpProxyConfig = function Ext_data_HttpProxyConfig() {
    Ext.data.HttpProxyConfig.initializeBase(this);
}
Ext.data.HttpProxyConfig.prototype = {
    
    api: function Ext_data_HttpProxyConfig$api(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.HttpProxyConfig"></returns>
        this.o['api'] = value;
        return this;
    },
    
    doRequest: function Ext_data_HttpProxyConfig$doRequest(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.HttpProxyConfig"></returns>
        this.o['doRequest'] = value;
        return this;
    },
    
    listeners: function Ext_data_HttpProxyConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.HttpProxyConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    restful: function Ext_data_HttpProxyConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.HttpProxyConfig"></returns>
        this.o['restful'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.JsonReaderConfig

Ext.data.JsonReaderConfig = function Ext_data_JsonReaderConfig() {
    Ext.data.JsonReaderConfig.initializeBase(this);
}
Ext.data.JsonReaderConfig.prototype = {
    
    fields: function Ext_data_JsonReaderConfig$fields(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.JsonReaderConfig"></returns>
        this.o['fields'] = value;
        return this;
    },
    
    idProperty: function Ext_data_JsonReaderConfig$idProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonReaderConfig"></returns>
        this.o['idProperty'] = value;
        return this;
    },
    
    messageProperty: function Ext_data_JsonReaderConfig$messageProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonReaderConfig"></returns>
        this.o['messageProperty'] = value;
        return this;
    },
    
    root: function Ext_data_JsonReaderConfig$root(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonReaderConfig"></returns>
        this.o['root'] = value;
        return this;
    },
    
    successProperty: function Ext_data_JsonReaderConfig$successProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonReaderConfig"></returns>
        this.o['successProperty'] = value;
        return this;
    },
    
    totalProperty: function Ext_data_JsonReaderConfig$totalProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonReaderConfig"></returns>
        this.o['totalProperty'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.JsonStoreConfig

Ext.data.JsonStoreConfig = function Ext_data_JsonStoreConfig() {
    Ext.data.JsonStoreConfig.initializeBase(this);
}
Ext.data.JsonStoreConfig.prototype = {
    
    autoDestroy: function Ext_data_JsonStoreConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoLoad: function Ext_data_JsonStoreConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoSave: function Ext_data_JsonStoreConfig$autoSave(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['autoSave'] = value;
        return this;
    },
    
    baseParams: function Ext_data_JsonStoreConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    batch: function Ext_data_JsonStoreConfig$batch(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['batch'] = value;
        return this;
    },
    
    data: function Ext_data_JsonStoreConfig$data(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultParamNames: function Ext_data_JsonStoreConfig$defaultParamNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['defaultParamNames'] = value;
        return this;
    },
    
    listeners: function Ext_data_JsonStoreConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    paramNames: function Ext_data_JsonStoreConfig$paramNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['paramNames'] = value;
        return this;
    },
    
    proxy: function Ext_data_JsonStoreConfig$proxy(value) {
        /// <param name="value" type="Ext.data.DataProxy">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['proxy'] = value;
        return this;
    },
    
    pruneModifiedRecords: function Ext_data_JsonStoreConfig$pruneModifiedRecords(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['pruneModifiedRecords'] = value;
        return this;
    },
    
    reader: function Ext_data_JsonStoreConfig$reader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['reader'] = value;
        return this;
    },
    
    remoteSort: function Ext_data_JsonStoreConfig$remoteSort(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['remoteSort'] = value;
        return this;
    },
    
    restful: function Ext_data_JsonStoreConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['restful'] = value;
        return this;
    },
    
    sortInfo: function Ext_data_JsonStoreConfig$sortInfo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['sortInfo'] = value;
        return this;
    },
    
    storeId: function Ext_data_JsonStoreConfig$storeId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['storeId'] = value;
        return this;
    },
    
    url: function Ext_data_JsonStoreConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    writer: function Ext_data_JsonStoreConfig$writer(value) {
        /// <param name="value" type="Ext.data.DataWriter">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['writer'] = value;
        return this;
    },
    
    fields: function Ext_data_JsonStoreConfig$fields(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['fields'] = value;
        return this;
    },
    
    idProperty: function Ext_data_JsonStoreConfig$idProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['idProperty'] = value;
        return this;
    },
    
    messageProperty: function Ext_data_JsonStoreConfig$messageProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['messageProperty'] = value;
        return this;
    },
    
    root: function Ext_data_JsonStoreConfig$root(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['root'] = value;
        return this;
    },
    
    successProperty: function Ext_data_JsonStoreConfig$successProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['successProperty'] = value;
        return this;
    },
    
    totalProperty: function Ext_data_JsonStoreConfig$totalProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.JsonStoreConfig"></returns>
        this.o['totalProperty'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.JsonWriterConfig

Ext.data.JsonWriterConfig = function Ext_data_JsonWriterConfig() {
    Ext.data.JsonWriterConfig.initializeBase(this);
}
Ext.data.JsonWriterConfig.prototype = {
    
    createRecord: function Ext_data_JsonWriterConfig$createRecord(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.JsonWriterConfig"></returns>
        this.o['createRecord'] = value;
        return this;
    },
    
    destroyRecord: function Ext_data_JsonWriterConfig$destroyRecord(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.JsonWriterConfig"></returns>
        this.o['destroyRecord'] = value;
        return this;
    },
    
    encode: function Ext_data_JsonWriterConfig$encode(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonWriterConfig"></returns>
        this.o['encode'] = value;
        return this;
    },
    
    encodeDelete: function Ext_data_JsonWriterConfig$encodeDelete(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonWriterConfig"></returns>
        this.o['encodeDelete'] = value;
        return this;
    },
    
    listful: function Ext_data_JsonWriterConfig$listful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonWriterConfig"></returns>
        this.o['listful'] = value;
        return this;
    },
    
    updateRecord: function Ext_data_JsonWriterConfig$updateRecord(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.JsonWriterConfig"></returns>
        this.o['updateRecord'] = value;
        return this;
    },
    
    writeAllFields: function Ext_data_JsonWriterConfig$writeAllFields(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.JsonWriterConfig"></returns>
        this.o['writeAllFields'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.MemoryProxyConfig

Ext.data.MemoryProxyConfig = function Ext_data_MemoryProxyConfig() {
    Ext.data.MemoryProxyConfig.initializeBase(this);
}
Ext.data.MemoryProxyConfig.prototype = {
    
    api: function Ext_data_MemoryProxyConfig$api(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.MemoryProxyConfig"></returns>
        this.o['api'] = value;
        return this;
    },
    
    doRequest: function Ext_data_MemoryProxyConfig$doRequest(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.MemoryProxyConfig"></returns>
        this.o['doRequest'] = value;
        return this;
    },
    
    listeners: function Ext_data_MemoryProxyConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.MemoryProxyConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    restful: function Ext_data_MemoryProxyConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.MemoryProxyConfig"></returns>
        this.o['restful'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.NodeConfig

Ext.data.NodeConfig = function Ext_data_NodeConfig() {
    Ext.data.NodeConfig.initializeBase(this);
}
Ext.data.NodeConfig.prototype = {
    
    id: function Ext_data_NodeConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.NodeConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    leaf: function Ext_data_NodeConfig$leaf(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.NodeConfig"></returns>
        this.o['leaf'] = value;
        return this;
    },
    
    listeners: function Ext_data_NodeConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.NodeConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.RequestConfig

Ext.data.RequestConfig = function Ext_data_RequestConfig() {
    Ext.data.RequestConfig.initializeBase(this);
}
Ext.data.RequestConfig.prototype = {
    
    action: function Ext_data_RequestConfig$action(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.RequestConfig"></returns>
        this.o['action'] = value;
        return this;
    },
    
    callback: function Ext_data_RequestConfig$callback(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.RequestConfig"></returns>
        this.o['callback'] = value;
        return this;
    },
    
    params_: function Ext_data_RequestConfig$params_(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.RequestConfig"></returns>
        this.o['params'] = value;
        return this;
    },
    
    reader: function Ext_data_RequestConfig$reader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.data.RequestConfig"></returns>
        this.o['reader'] = value;
        return this;
    },
    
    rs: function Ext_data_RequestConfig$rs(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.RequestConfig"></returns>
        this.o['rs'] = value;
        return this;
    },
    
    scope: function Ext_data_RequestConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.RequestConfig"></returns>
        this.o['scope'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.ResponseConfig

Ext.data.ResponseConfig = function Ext_data_ResponseConfig() {
    Ext.data.ResponseConfig.initializeBase(this);
}
Ext.data.ResponseConfig.prototype = {
    
    action: function Ext_data_ResponseConfig$action(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ResponseConfig"></returns>
        this.o['action'] = value;
        return this;
    },
    
    data: function Ext_data_ResponseConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ResponseConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    message: function Ext_data_ResponseConfig$message(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ResponseConfig"></returns>
        this.o['message'] = value;
        return this;
    },
    
    raw: function Ext_data_ResponseConfig$raw(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ResponseConfig"></returns>
        this.o['raw'] = value;
        return this;
    },
    
    records: function Ext_data_ResponseConfig$records(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ResponseConfig"></returns>
        this.o['records'] = value;
        return this;
    },
    
    success: function Ext_data_ResponseConfig$success(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.ResponseConfig"></returns>
        this.o['success'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.ScriptTagProxyConfig

Ext.data.ScriptTagProxyConfig = function Ext_data_ScriptTagProxyConfig() {
    Ext.data.ScriptTagProxyConfig.initializeBase(this);
}
Ext.data.ScriptTagProxyConfig.prototype = {
    
    api: function Ext_data_ScriptTagProxyConfig$api(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ScriptTagProxyConfig"></returns>
        this.o['api'] = value;
        return this;
    },
    
    callbackParam: function Ext_data_ScriptTagProxyConfig$callbackParam(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ScriptTagProxyConfig"></returns>
        this.o['callbackParam'] = value;
        return this;
    },
    
    doRequest: function Ext_data_ScriptTagProxyConfig$doRequest(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.ScriptTagProxyConfig"></returns>
        this.o['doRequest'] = value;
        return this;
    },
    
    listeners: function Ext_data_ScriptTagProxyConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.ScriptTagProxyConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    nocache: function Ext_data_ScriptTagProxyConfig$nocache(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.ScriptTagProxyConfig"></returns>
        this.o['nocache'] = value;
        return this;
    },
    
    restful: function Ext_data_ScriptTagProxyConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.ScriptTagProxyConfig"></returns>
        this.o['restful'] = value;
        return this;
    },
    
    timeout: function Ext_data_ScriptTagProxyConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.data.ScriptTagProxyConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    url: function Ext_data_ScriptTagProxyConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.ScriptTagProxyConfig"></returns>
        this.o['url'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.StoreConfig

Ext.data.StoreConfig = function Ext_data_StoreConfig() {
    Ext.data.StoreConfig.initializeBase(this);
}
Ext.data.StoreConfig.prototype = {
    
    autoDestroy: function Ext_data_StoreConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoLoad: function Ext_data_StoreConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoSave: function Ext_data_StoreConfig$autoSave(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['autoSave'] = value;
        return this;
    },
    
    baseParams: function Ext_data_StoreConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    batch: function Ext_data_StoreConfig$batch(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['batch'] = value;
        return this;
    },
    
    data: function Ext_data_StoreConfig$data(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultParamNames: function Ext_data_StoreConfig$defaultParamNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['defaultParamNames'] = value;
        return this;
    },
    
    listeners: function Ext_data_StoreConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    paramNames: function Ext_data_StoreConfig$paramNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['paramNames'] = value;
        return this;
    },
    
    proxy: function Ext_data_StoreConfig$proxy(value) {
        /// <param name="value" type="Ext.data.DataProxy">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['proxy'] = value;
        return this;
    },
    
    pruneModifiedRecords: function Ext_data_StoreConfig$pruneModifiedRecords(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['pruneModifiedRecords'] = value;
        return this;
    },
    
    reader: function Ext_data_StoreConfig$reader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['reader'] = value;
        return this;
    },
    
    remoteSort: function Ext_data_StoreConfig$remoteSort(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['remoteSort'] = value;
        return this;
    },
    
    restful: function Ext_data_StoreConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['restful'] = value;
        return this;
    },
    
    sortInfo: function Ext_data_StoreConfig$sortInfo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['sortInfo'] = value;
        return this;
    },
    
    storeId: function Ext_data_StoreConfig$storeId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['storeId'] = value;
        return this;
    },
    
    url: function Ext_data_StoreConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    writer: function Ext_data_StoreConfig$writer(value) {
        /// <param name="value" type="Ext.data.DataWriter">
        /// </param>
        /// <returns type="Ext.data.StoreConfig"></returns>
        this.o['writer'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.TreeConfig

Ext.data.TreeConfig = function Ext_data_TreeConfig() {
    Ext.data.TreeConfig.initializeBase(this);
}
Ext.data.TreeConfig.prototype = {
    
    listeners: function Ext_data_TreeConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.TreeConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    pathSeparator: function Ext_data_TreeConfig$pathSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.TreeConfig"></returns>
        this.o['pathSeparator'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.XmlReaderConfig

Ext.data.XmlReaderConfig = function Ext_data_XmlReaderConfig() {
    Ext.data.XmlReaderConfig.initializeBase(this);
}
Ext.data.XmlReaderConfig.prototype = {
    
    fields: function Ext_data_XmlReaderConfig$fields(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.XmlReaderConfig"></returns>
        this.o['fields'] = value;
        return this;
    },
    
    idPath: function Ext_data_XmlReaderConfig$idPath(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlReaderConfig"></returns>
        this.o['idPath'] = value;
        return this;
    },
    
    messageProperty: function Ext_data_XmlReaderConfig$messageProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlReaderConfig"></returns>
        this.o['messageProperty'] = value;
        return this;
    },
    
    record: function Ext_data_XmlReaderConfig$record(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlReaderConfig"></returns>
        this.o['record'] = value;
        return this;
    },
    
    successProperty: function Ext_data_XmlReaderConfig$successProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlReaderConfig"></returns>
        this.o['successProperty'] = value;
        return this;
    },
    
    totalProperty: function Ext_data_XmlReaderConfig$totalProperty(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlReaderConfig"></returns>
        this.o['totalProperty'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.XmlStoreConfig

Ext.data.XmlStoreConfig = function Ext_data_XmlStoreConfig() {
    Ext.data.XmlStoreConfig.initializeBase(this);
}
Ext.data.XmlStoreConfig.prototype = {
    
    autoDestroy: function Ext_data_XmlStoreConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoLoad: function Ext_data_XmlStoreConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoSave: function Ext_data_XmlStoreConfig$autoSave(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['autoSave'] = value;
        return this;
    },
    
    baseParams: function Ext_data_XmlStoreConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    batch: function Ext_data_XmlStoreConfig$batch(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['batch'] = value;
        return this;
    },
    
    data: function Ext_data_XmlStoreConfig$data(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultParamNames: function Ext_data_XmlStoreConfig$defaultParamNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['defaultParamNames'] = value;
        return this;
    },
    
    listeners: function Ext_data_XmlStoreConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    paramNames: function Ext_data_XmlStoreConfig$paramNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['paramNames'] = value;
        return this;
    },
    
    proxy: function Ext_data_XmlStoreConfig$proxy(value) {
        /// <param name="value" type="Ext.data.DataProxy">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['proxy'] = value;
        return this;
    },
    
    pruneModifiedRecords: function Ext_data_XmlStoreConfig$pruneModifiedRecords(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['pruneModifiedRecords'] = value;
        return this;
    },
    
    reader: function Ext_data_XmlStoreConfig$reader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['reader'] = value;
        return this;
    },
    
    remoteSort: function Ext_data_XmlStoreConfig$remoteSort(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['remoteSort'] = value;
        return this;
    },
    
    restful: function Ext_data_XmlStoreConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['restful'] = value;
        return this;
    },
    
    sortInfo: function Ext_data_XmlStoreConfig$sortInfo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['sortInfo'] = value;
        return this;
    },
    
    storeId: function Ext_data_XmlStoreConfig$storeId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['storeId'] = value;
        return this;
    },
    
    url: function Ext_data_XmlStoreConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    writer: function Ext_data_XmlStoreConfig$writer(value) {
        /// <param name="value" type="Ext.data.DataWriter">
        /// </param>
        /// <returns type="Ext.data.XmlStoreConfig"></returns>
        this.o['writer'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.data.XmlWriterConfig

Ext.data.XmlWriterConfig = function Ext_data_XmlWriterConfig() {
    Ext.data.XmlWriterConfig.initializeBase(this);
}
Ext.data.XmlWriterConfig.prototype = {
    
    createRecord: function Ext_data_XmlWriterConfig$createRecord(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['createRecord'] = value;
        return this;
    },
    
    destroyRecord: function Ext_data_XmlWriterConfig$destroyRecord(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['destroyRecord'] = value;
        return this;
    },
    
    documentRoot: function Ext_data_XmlWriterConfig$documentRoot(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['documentRoot'] = value;
        return this;
    },
    
    forceDocumentRoot: function Ext_data_XmlWriterConfig$forceDocumentRoot(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['forceDocumentRoot'] = value;
        return this;
    },
    
    listful: function Ext_data_XmlWriterConfig$listful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['listful'] = value;
        return this;
    },
    
    root: function Ext_data_XmlWriterConfig$root(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['root'] = value;
        return this;
    },
    
    tpl: function Ext_data_XmlWriterConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    updateRecord: function Ext_data_XmlWriterConfig$updateRecord(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['updateRecord'] = value;
        return this;
    },
    
    writeAllFields: function Ext_data_XmlWriterConfig$writeAllFields(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['writeAllFields'] = value;
        return this;
    },
    
    xmlEncoding: function Ext_data_XmlWriterConfig$xmlEncoding(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['xmlEncoding'] = value;
        return this;
    },
    
    xmlVersion: function Ext_data_XmlWriterConfig$xmlVersion(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.data.XmlWriterConfig"></returns>
        this.o['xmlVersion'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.dd');

////////////////////////////////////////////////////////////////////////////////
// Ext.dd.DragSourceConfig

Ext.dd.DragSourceConfig = function Ext_dd_DragSourceConfig() {
    Ext.dd.DragSourceConfig.initializeBase(this);
}
Ext.dd.DragSourceConfig.prototype = {
    
    ddGroup: function Ext_dd_DragSourceConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DragSourceConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    dropAllowed: function Ext_dd_DragSourceConfig$dropAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DragSourceConfig"></returns>
        this.o['dropAllowed'] = value;
        return this;
    },
    
    dropNotAllowed: function Ext_dd_DragSourceConfig$dropNotAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DragSourceConfig"></returns>
        this.o['dropNotAllowed'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.dd.DragTrackerConfig

Ext.dd.DragTrackerConfig = function Ext_dd_DragTrackerConfig() {
    Ext.dd.DragTrackerConfig.initializeBase(this);
}
Ext.dd.DragTrackerConfig.prototype = {
    
    active: function Ext_dd_DragTrackerConfig$active(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.dd.DragTrackerConfig"></returns>
        this.o['active'] = value;
        return this;
    },
    
    autoStart: function Ext_dd_DragTrackerConfig$autoStart(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.dd.DragTrackerConfig"></returns>
        this.o['autoStart'] = value;
        return this;
    },
    
    listeners: function Ext_dd_DragTrackerConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.dd.DragTrackerConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    tolerance: function Ext_dd_DragTrackerConfig$tolerance(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.dd.DragTrackerConfig"></returns>
        this.o['tolerance'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.dd.DragZoneConfig

Ext.dd.DragZoneConfig = function Ext_dd_DragZoneConfig() {
    Ext.dd.DragZoneConfig.initializeBase(this);
}
Ext.dd.DragZoneConfig.prototype = {
    
    containerScroll: function Ext_dd_DragZoneConfig$containerScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.dd.DragZoneConfig"></returns>
        this.o['containerScroll'] = value;
        return this;
    },
    
    ddGroup: function Ext_dd_DragZoneConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DragZoneConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    dropAllowed: function Ext_dd_DragZoneConfig$dropAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DragZoneConfig"></returns>
        this.o['dropAllowed'] = value;
        return this;
    },
    
    dropNotAllowed: function Ext_dd_DragZoneConfig$dropNotAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DragZoneConfig"></returns>
        this.o['dropNotAllowed'] = value;
        return this;
    },
    
    hlColor: function Ext_dd_DragZoneConfig$hlColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DragZoneConfig"></returns>
        this.o['hlColor'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.dd.DropTargetConfig

Ext.dd.DropTargetConfig = function Ext_dd_DropTargetConfig() {
    Ext.dd.DropTargetConfig.initializeBase(this);
}
Ext.dd.DropTargetConfig.prototype = {
    
    ddGroup: function Ext_dd_DropTargetConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DropTargetConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    dropAllowed: function Ext_dd_DropTargetConfig$dropAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DropTargetConfig"></returns>
        this.o['dropAllowed'] = value;
        return this;
    },
    
    dropNotAllowed: function Ext_dd_DropTargetConfig$dropNotAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DropTargetConfig"></returns>
        this.o['dropNotAllowed'] = value;
        return this;
    },
    
    overClass: function Ext_dd_DropTargetConfig$overClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DropTargetConfig"></returns>
        this.o['overClass'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.dd.DropZoneConfig

Ext.dd.DropZoneConfig = function Ext_dd_DropZoneConfig() {
    Ext.dd.DropZoneConfig.initializeBase(this);
}
Ext.dd.DropZoneConfig.prototype = {
    
    ddGroup: function Ext_dd_DropZoneConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DropZoneConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    dropAllowed: function Ext_dd_DropZoneConfig$dropAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DropZoneConfig"></returns>
        this.o['dropAllowed'] = value;
        return this;
    },
    
    dropNotAllowed: function Ext_dd_DropZoneConfig$dropNotAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DropZoneConfig"></returns>
        this.o['dropNotAllowed'] = value;
        return this;
    },
    
    overClass: function Ext_dd_DropZoneConfig$overClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.DropZoneConfig"></returns>
        this.o['overClass'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.dd.PanelProxyConfig

Ext.dd.PanelProxyConfig = function Ext_dd_PanelProxyConfig() {
    Ext.dd.PanelProxyConfig.initializeBase(this);
}
Ext.dd.PanelProxyConfig.prototype = {
    
    insertProxy: function Ext_dd_PanelProxyConfig$insertProxy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.dd.PanelProxyConfig"></returns>
        this.o['insertProxy'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.dd.StatusProxyConfig

Ext.dd.StatusProxyConfig = function Ext_dd_StatusProxyConfig() {
    Ext.dd.StatusProxyConfig.initializeBase(this);
}
Ext.dd.StatusProxyConfig.prototype = {
    
    dropAllowed: function Ext_dd_StatusProxyConfig$dropAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.StatusProxyConfig"></returns>
        this.o['dropAllowed'] = value;
        return this;
    },
    
    dropNotAllowed: function Ext_dd_StatusProxyConfig$dropNotAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.dd.StatusProxyConfig"></returns>
        this.o['dropNotAllowed'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.direct');

////////////////////////////////////////////////////////////////////////////////
// Ext.direct.JsonProviderConfig

Ext.direct.JsonProviderConfig = function Ext_direct_JsonProviderConfig() {
    Ext.direct.JsonProviderConfig.initializeBase(this);
}
Ext.direct.JsonProviderConfig.prototype = {
    
    id: function Ext_direct_JsonProviderConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.JsonProviderConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    listeners: function Ext_direct_JsonProviderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.direct.JsonProviderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    priority: function Ext_direct_JsonProviderConfig$priority(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.direct.JsonProviderConfig"></returns>
        this.o['priority'] = value;
        return this;
    },
    
    type: function Ext_direct_JsonProviderConfig$type(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.JsonProviderConfig"></returns>
        this.o['type'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.direct.PollingProviderConfig

Ext.direct.PollingProviderConfig = function Ext_direct_PollingProviderConfig() {
    Ext.direct.PollingProviderConfig.initializeBase(this);
}
Ext.direct.PollingProviderConfig.prototype = {
    
    baseParams: function Ext_direct_PollingProviderConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.direct.PollingProviderConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    id: function Ext_direct_PollingProviderConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.PollingProviderConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    interval: function Ext_direct_PollingProviderConfig$interval(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.direct.PollingProviderConfig"></returns>
        this.o['interval'] = value;
        return this;
    },
    
    listeners: function Ext_direct_PollingProviderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.direct.PollingProviderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    priority: function Ext_direct_PollingProviderConfig$priority(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.direct.PollingProviderConfig"></returns>
        this.o['priority'] = value;
        return this;
    },
    
    type: function Ext_direct_PollingProviderConfig$type(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.PollingProviderConfig"></returns>
        this.o['type'] = value;
        return this;
    },
    
    url: function Ext_direct_PollingProviderConfig$url(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.direct.PollingProviderConfig"></returns>
        this.o['url'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.direct.ProviderConfig

Ext.direct.ProviderConfig = function Ext_direct_ProviderConfig() {
    Ext.direct.ProviderConfig.initializeBase(this);
}
Ext.direct.ProviderConfig.prototype = {
    
    id: function Ext_direct_ProviderConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.ProviderConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    listeners: function Ext_direct_ProviderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.direct.ProviderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    priority: function Ext_direct_ProviderConfig$priority(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.direct.ProviderConfig"></returns>
        this.o['priority'] = value;
        return this;
    },
    
    type: function Ext_direct_ProviderConfig$type(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.ProviderConfig"></returns>
        this.o['type'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.direct.RemotingProviderConfig

Ext.direct.RemotingProviderConfig = function Ext_direct_RemotingProviderConfig() {
    Ext.direct.RemotingProviderConfig.initializeBase(this);
}
Ext.direct.RemotingProviderConfig.prototype = {
    
    actions: function Ext_direct_RemotingProviderConfig$actions(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['actions'] = value;
        return this;
    },
    
    enableBuffer: function Ext_direct_RemotingProviderConfig$enableBuffer(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['enableBuffer'] = value;
        return this;
    },
    
    enableUrlEncode: function Ext_direct_RemotingProviderConfig$enableUrlEncode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['enableUrlEncode'] = value;
        return this;
    },
    
    id: function Ext_direct_RemotingProviderConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    listeners: function Ext_direct_RemotingProviderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    maxRetries: function Ext_direct_RemotingProviderConfig$maxRetries(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['maxRetries'] = value;
        return this;
    },
    
    namespace_: function Ext_direct_RemotingProviderConfig$namespace_(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['namespace'] = value;
        return this;
    },
    
    priority: function Ext_direct_RemotingProviderConfig$priority(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['priority'] = value;
        return this;
    },
    
    timeout: function Ext_direct_RemotingProviderConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    type: function Ext_direct_RemotingProviderConfig$type(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['type'] = value;
        return this;
    },
    
    url: function Ext_direct_RemotingProviderConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.direct.RemotingProviderConfig"></returns>
        this.o['url'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.form');

////////////////////////////////////////////////////////////////////////////////
// Ext.form.ActionConfig

Ext.form.ActionConfig = function Ext_form_ActionConfig() {
    Ext.form.ActionConfig.initializeBase(this);
}
Ext.form.ActionConfig.prototype = {
    
    failure: function Ext_form_ActionConfig$failure(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['failure'] = value;
        return this;
    },
    
    method: function Ext_form_ActionConfig$method(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['method'] = value;
        return this;
    },
    
    params_: function Ext_form_ActionConfig$params_(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['params'] = value;
        return this;
    },
    
    reset: function Ext_form_ActionConfig$reset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['reset'] = value;
        return this;
    },
    
    scope: function Ext_form_ActionConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    submitEmptyText: function Ext_form_ActionConfig$submitEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['submitEmptyText'] = value;
        return this;
    },
    
    success: function Ext_form_ActionConfig$success(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['success'] = value;
        return this;
    },
    
    timeout: function Ext_form_ActionConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    url: function Ext_form_ActionConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    waitMsg: function Ext_form_ActionConfig$waitMsg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['waitMsg'] = value;
        return this;
    },
    
    waitTitle: function Ext_form_ActionConfig$waitTitle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionConfig"></returns>
        this.o['waitTitle'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.ActionDirectLoadConfig

Ext.form.ActionDirectLoadConfig = function Ext_form_ActionDirectLoadConfig() {
    Ext.form.ActionDirectLoadConfig.initializeBase(this);
}
Ext.form.ActionDirectLoadConfig.prototype = {
    
    failure: function Ext_form_ActionDirectLoadConfig$failure(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['failure'] = value;
        return this;
    },
    
    method: function Ext_form_ActionDirectLoadConfig$method(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['method'] = value;
        return this;
    },
    
    params_: function Ext_form_ActionDirectLoadConfig$params_(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['params'] = value;
        return this;
    },
    
    reset: function Ext_form_ActionDirectLoadConfig$reset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['reset'] = value;
        return this;
    },
    
    scope: function Ext_form_ActionDirectLoadConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    submitEmptyText: function Ext_form_ActionDirectLoadConfig$submitEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['submitEmptyText'] = value;
        return this;
    },
    
    success: function Ext_form_ActionDirectLoadConfig$success(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['success'] = value;
        return this;
    },
    
    timeout: function Ext_form_ActionDirectLoadConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    url: function Ext_form_ActionDirectLoadConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    waitMsg: function Ext_form_ActionDirectLoadConfig$waitMsg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['waitMsg'] = value;
        return this;
    },
    
    waitTitle: function Ext_form_ActionDirectLoadConfig$waitTitle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionDirectLoadConfig"></returns>
        this.o['waitTitle'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.ActionDirectSubmitConfig

Ext.form.ActionDirectSubmitConfig = function Ext_form_ActionDirectSubmitConfig() {
    Ext.form.ActionDirectSubmitConfig.initializeBase(this);
}
Ext.form.ActionDirectSubmitConfig.prototype = {
    
    clientValidation: function Ext_form_ActionDirectSubmitConfig$clientValidation(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['clientValidation'] = value;
        return this;
    },
    
    errorReader: function Ext_form_ActionDirectSubmitConfig$errorReader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['errorReader'] = value;
        return this;
    },
    
    failure: function Ext_form_ActionDirectSubmitConfig$failure(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['failure'] = value;
        return this;
    },
    
    method: function Ext_form_ActionDirectSubmitConfig$method(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['method'] = value;
        return this;
    },
    
    params_: function Ext_form_ActionDirectSubmitConfig$params_(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['params'] = value;
        return this;
    },
    
    reset: function Ext_form_ActionDirectSubmitConfig$reset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['reset'] = value;
        return this;
    },
    
    scope: function Ext_form_ActionDirectSubmitConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    submitEmptyText: function Ext_form_ActionDirectSubmitConfig$submitEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['submitEmptyText'] = value;
        return this;
    },
    
    success: function Ext_form_ActionDirectSubmitConfig$success(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['success'] = value;
        return this;
    },
    
    timeout: function Ext_form_ActionDirectSubmitConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    url: function Ext_form_ActionDirectSubmitConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    waitMsg: function Ext_form_ActionDirectSubmitConfig$waitMsg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['waitMsg'] = value;
        return this;
    },
    
    waitTitle: function Ext_form_ActionDirectSubmitConfig$waitTitle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionDirectSubmitConfig"></returns>
        this.o['waitTitle'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.ActionLoadConfig

Ext.form.ActionLoadConfig = function Ext_form_ActionLoadConfig() {
    Ext.form.ActionLoadConfig.initializeBase(this);
}
Ext.form.ActionLoadConfig.prototype = {
    
    failure: function Ext_form_ActionLoadConfig$failure(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['failure'] = value;
        return this;
    },
    
    method: function Ext_form_ActionLoadConfig$method(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['method'] = value;
        return this;
    },
    
    params_: function Ext_form_ActionLoadConfig$params_(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['params'] = value;
        return this;
    },
    
    reset: function Ext_form_ActionLoadConfig$reset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['reset'] = value;
        return this;
    },
    
    scope: function Ext_form_ActionLoadConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    submitEmptyText: function Ext_form_ActionLoadConfig$submitEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['submitEmptyText'] = value;
        return this;
    },
    
    success: function Ext_form_ActionLoadConfig$success(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['success'] = value;
        return this;
    },
    
    timeout: function Ext_form_ActionLoadConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    url: function Ext_form_ActionLoadConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    waitMsg: function Ext_form_ActionLoadConfig$waitMsg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['waitMsg'] = value;
        return this;
    },
    
    waitTitle: function Ext_form_ActionLoadConfig$waitTitle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionLoadConfig"></returns>
        this.o['waitTitle'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.ActionSubmitConfig

Ext.form.ActionSubmitConfig = function Ext_form_ActionSubmitConfig() {
    Ext.form.ActionSubmitConfig.initializeBase(this);
}
Ext.form.ActionSubmitConfig.prototype = {
    
    clientValidation: function Ext_form_ActionSubmitConfig$clientValidation(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['clientValidation'] = value;
        return this;
    },
    
    errorReader: function Ext_form_ActionSubmitConfig$errorReader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['errorReader'] = value;
        return this;
    },
    
    failure: function Ext_form_ActionSubmitConfig$failure(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['failure'] = value;
        return this;
    },
    
    method: function Ext_form_ActionSubmitConfig$method(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['method'] = value;
        return this;
    },
    
    params_: function Ext_form_ActionSubmitConfig$params_(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['params'] = value;
        return this;
    },
    
    reset: function Ext_form_ActionSubmitConfig$reset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['reset'] = value;
        return this;
    },
    
    scope: function Ext_form_ActionSubmitConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    submitEmptyText: function Ext_form_ActionSubmitConfig$submitEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['submitEmptyText'] = value;
        return this;
    },
    
    success: function Ext_form_ActionSubmitConfig$success(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['success'] = value;
        return this;
    },
    
    timeout: function Ext_form_ActionSubmitConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    url: function Ext_form_ActionSubmitConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    waitMsg: function Ext_form_ActionSubmitConfig$waitMsg(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['waitMsg'] = value;
        return this;
    },
    
    waitTitle: function Ext_form_ActionSubmitConfig$waitTitle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ActionSubmitConfig"></returns>
        this.o['waitTitle'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.BasicFormConfig

Ext.form.BasicFormConfig = function Ext_form_BasicFormConfig() {
    Ext.form.BasicFormConfig.initializeBase(this);
}
Ext.form.BasicFormConfig.prototype = {
    
    api: function Ext_form_BasicFormConfig$api(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['api'] = value;
        return this;
    },
    
    baseParams: function Ext_form_BasicFormConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    errorReader: function Ext_form_BasicFormConfig$errorReader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['errorReader'] = value;
        return this;
    },
    
    fileUpload: function Ext_form_BasicFormConfig$fileUpload(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['fileUpload'] = value;
        return this;
    },
    
    listeners: function Ext_form_BasicFormConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    method: function Ext_form_BasicFormConfig$method(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['method'] = value;
        return this;
    },
    
    paramOrder: function Ext_form_BasicFormConfig$paramOrder(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['paramOrder'] = value;
        return this;
    },
    
    paramsAsHash: function Ext_form_BasicFormConfig$paramsAsHash(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['paramsAsHash'] = value;
        return this;
    },
    
    reader: function Ext_form_BasicFormConfig$reader(value) {
        /// <param name="value" type="Ext.data.DataReader">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['reader'] = value;
        return this;
    },
    
    standardSubmit: function Ext_form_BasicFormConfig$standardSubmit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['standardSubmit'] = value;
        return this;
    },
    
    timeout: function Ext_form_BasicFormConfig$timeout(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['timeout'] = value;
        return this;
    },
    
    trackResetOnLoad: function Ext_form_BasicFormConfig$trackResetOnLoad(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['trackResetOnLoad'] = value;
        return this;
    },
    
    url: function Ext_form_BasicFormConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['url'] = value;
        return this;
    },
    
    waitTitle: function Ext_form_BasicFormConfig$waitTitle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.BasicFormConfig"></returns>
        this.o['waitTitle'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.CheckboxConfig

Ext.form.CheckboxConfig = function Ext_form_CheckboxConfig() {
    Ext.form.CheckboxConfig.initializeBase(this);
}
Ext.form.CheckboxConfig.prototype = {
    
    allowDomMove: function Ext_form_CheckboxConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_CheckboxConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_CheckboxConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_CheckboxConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_CheckboxConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_CheckboxConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_CheckboxConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_CheckboxConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_CheckboxConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxLabel: function Ext_form_CheckboxConfig$boxLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['boxLabel'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_CheckboxConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_CheckboxConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_CheckboxConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_CheckboxConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_CheckboxConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    checked_: function Ext_form_CheckboxConfig$checked_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['checked'] = value;
        return this;
    },
    
    clearCls: function Ext_form_CheckboxConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_CheckboxConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_CheckboxConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_CheckboxConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_CheckboxConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_form_CheckboxConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_CheckboxConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_CheckboxConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_CheckboxConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_CheckboxConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_CheckboxConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    handler: function Ext_form_CheckboxConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    height: function Ext_form_CheckboxConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_CheckboxConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_CheckboxConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_CheckboxConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_CheckboxConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_CheckboxConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_CheckboxConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_CheckboxConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    inputValue: function Ext_form_CheckboxConfig$inputValue(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['inputValue'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_CheckboxConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_CheckboxConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_CheckboxConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_CheckboxConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_CheckboxConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_CheckboxConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_CheckboxConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_CheckboxConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_CheckboxConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_CheckboxConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_CheckboxConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_CheckboxConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_CheckboxConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_CheckboxConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_CheckboxConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_CheckboxConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_CheckboxConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_CheckboxConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_CheckboxConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_CheckboxConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_CheckboxConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    scope: function Ext_form_CheckboxConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_CheckboxConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_CheckboxConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_CheckboxConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_CheckboxConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_CheckboxConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_CheckboxConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_CheckboxConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_CheckboxConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_CheckboxConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_CheckboxConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_CheckboxConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_CheckboxConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_CheckboxConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_form_CheckboxConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_CheckboxConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_CheckboxConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_CheckboxConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.CheckboxGroupConfig

Ext.form.CheckboxGroupConfig = function Ext_form_CheckboxGroupConfig() {
    Ext.form.CheckboxGroupConfig.initializeBase(this);
}
Ext.form.CheckboxGroupConfig.prototype = {
    
    allowBlank: function Ext_form_CheckboxGroupConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_CheckboxGroupConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_CheckboxGroupConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_CheckboxGroupConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_CheckboxGroupConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_CheckboxGroupConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_CheckboxGroupConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_CheckboxGroupConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_CheckboxGroupConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_CheckboxGroupConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_form_CheckboxGroupConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_CheckboxGroupConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_CheckboxGroupConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_CheckboxGroupConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_CheckboxGroupConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_CheckboxGroupConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_CheckboxGroupConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_CheckboxGroupConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    columns: function Ext_form_CheckboxGroupConfig$columns(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    contentEl: function Ext_form_CheckboxGroupConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_CheckboxGroupConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_CheckboxGroupConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_form_CheckboxGroupConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_CheckboxGroupConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_CheckboxGroupConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_CheckboxGroupConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_CheckboxGroupConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_CheckboxGroupConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    height: function Ext_form_CheckboxGroupConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_CheckboxGroupConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_CheckboxGroupConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_CheckboxGroupConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_CheckboxGroupConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_CheckboxGroupConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_CheckboxGroupConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_CheckboxGroupConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_CheckboxGroupConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_CheckboxGroupConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_CheckboxGroupConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_CheckboxGroupConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_form_CheckboxGroupConfig$items(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_CheckboxGroupConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_CheckboxGroupConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_CheckboxGroupConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_CheckboxGroupConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_CheckboxGroupConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_CheckboxGroupConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_CheckboxGroupConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_CheckboxGroupConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_CheckboxGroupConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_CheckboxGroupConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_CheckboxGroupConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_CheckboxGroupConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_CheckboxGroupConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_CheckboxGroupConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_CheckboxGroupConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_CheckboxGroupConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_CheckboxGroupConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_CheckboxGroupConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_CheckboxGroupConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_CheckboxGroupConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_CheckboxGroupConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_CheckboxGroupConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_CheckboxGroupConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_CheckboxGroupConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_CheckboxGroupConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_CheckboxGroupConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_CheckboxGroupConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_CheckboxGroupConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_CheckboxGroupConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_CheckboxGroupConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vertical: function Ext_form_CheckboxGroupConfig$vertical(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['vertical'] = value;
        return this;
    },
    
    width: function Ext_form_CheckboxGroupConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_CheckboxGroupConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_CheckboxGroupConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_CheckboxGroupConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CheckboxGroupConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.ComboBoxConfig

Ext.form.ComboBoxConfig = function Ext_form_ComboBoxConfig() {
    Ext.form.ComboBoxConfig.initializeBase(this);
}
Ext.form.ComboBoxConfig.prototype = {
    
    allQuery: function Ext_form_ComboBoxConfig$allQuery(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['allQuery'] = value;
        return this;
    },
    
    allowBlank: function Ext_form_ComboBoxConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_ComboBoxConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_ComboBoxConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_ComboBoxConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_ComboBoxConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_ComboBoxConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_ComboBoxConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_ComboBoxConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoSelect: function Ext_form_ComboBoxConfig$autoSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['autoSelect'] = value;
        return this;
    },
    
    autoShow: function Ext_form_ComboBoxConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_ComboBoxConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_form_ComboBoxConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_ComboBoxConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_ComboBoxConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_ComboBoxConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_ComboBoxConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_ComboBoxConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_ComboBoxConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clearFilterOnReset: function Ext_form_ComboBoxConfig$clearFilterOnReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['clearFilterOnReset'] = value;
        return this;
    },
    
    cls: function Ext_form_ComboBoxConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_ComboBoxConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_ComboBoxConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_ComboBoxConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_form_ComboBoxConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_form_ComboBoxConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_ComboBoxConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    displayField: function Ext_form_ComboBoxConfig$displayField(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['displayField'] = value;
        return this;
    },
    
    editable: function Ext_form_ComboBoxConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    emptyClass: function Ext_form_ComboBoxConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_form_ComboBoxConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_form_ComboBoxConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_ComboBoxConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_ComboBoxConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_ComboBoxConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_ComboBoxConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    forceSelection: function Ext_form_ComboBoxConfig$forceSelection(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['forceSelection'] = value;
        return this;
    },
    
    grow: function Ext_form_ComboBoxConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_form_ComboBoxConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_form_ComboBoxConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    handleHeight: function Ext_form_ComboBoxConfig$handleHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['handleHeight'] = value;
        return this;
    },
    
    height: function Ext_form_ComboBoxConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_ComboBoxConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hiddenId: function Ext_form_ComboBoxConfig$hiddenId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['hiddenId'] = value;
        return this;
    },
    
    hiddenName: function Ext_form_ComboBoxConfig$hiddenName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['hiddenName'] = value;
        return this;
    },
    
    hiddenValue: function Ext_form_ComboBoxConfig$hiddenValue(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['hiddenValue'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_ComboBoxConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_ComboBoxConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_ComboBoxConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    hideTrigger: function Ext_form_ComboBoxConfig$hideTrigger(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['hideTrigger'] = value;
        return this;
    },
    
    html: function Ext_form_ComboBoxConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_ComboBoxConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_ComboBoxConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_ComboBoxConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_ComboBoxConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_ComboBoxConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_ComboBoxConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    itemSelector: function Ext_form_ComboBoxConfig$itemSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['itemSelector'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_ComboBoxConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_ComboBoxConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    lazyInit: function Ext_form_ComboBoxConfig$lazyInit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['lazyInit'] = value;
        return this;
    },
    
    lazyRender: function Ext_form_ComboBoxConfig$lazyRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['lazyRender'] = value;
        return this;
    },
    
    listAlign: function Ext_form_ComboBoxConfig$listAlign(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['listAlign'] = value;
        return this;
    },
    
    listClass: function Ext_form_ComboBoxConfig$listClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['listClass'] = value;
        return this;
    },
    
    listEmptyText: function Ext_form_ComboBoxConfig$listEmptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['listEmptyText'] = value;
        return this;
    },
    
    listWidth: function Ext_form_ComboBoxConfig$listWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['listWidth'] = value;
        return this;
    },
    
    listeners: function Ext_form_ComboBoxConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadingText: function Ext_form_ComboBoxConfig$loadingText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['loadingText'] = value;
        return this;
    },
    
    margins: function Ext_form_ComboBoxConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_form_ComboBoxConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxHeight: function Ext_form_ComboBoxConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    maxLength: function Ext_form_ComboBoxConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_form_ComboBoxConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    minChars: function Ext_form_ComboBoxConfig$minChars(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['minChars'] = value;
        return this;
    },
    
    minHeight: function Ext_form_ComboBoxConfig$minHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['minHeight'] = value;
        return this;
    },
    
    minLength: function Ext_form_ComboBoxConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_form_ComboBoxConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    minListWidth: function Ext_form_ComboBoxConfig$minListWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['minListWidth'] = value;
        return this;
    },
    
    mode: function Ext_form_ComboBoxConfig$mode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['mode'] = value;
        return this;
    },
    
    msgFx: function Ext_form_ComboBoxConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_ComboBoxConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_ComboBoxConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_ComboBoxConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageSize: function Ext_form_ComboBoxConfig$pageSize(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['pageSize'] = value;
        return this;
    },
    
    pageX: function Ext_form_ComboBoxConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_ComboBoxConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_ComboBoxConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_ComboBoxConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_ComboBoxConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    queryDelay: function Ext_form_ComboBoxConfig$queryDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['queryDelay'] = value;
        return this;
    },
    
    queryParam: function Ext_form_ComboBoxConfig$queryParam(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['queryParam'] = value;
        return this;
    },
    
    readOnly: function Ext_form_ComboBoxConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_ComboBoxConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_form_ComboBoxConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_form_ComboBoxConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_form_ComboBoxConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_ComboBoxConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizable: function Ext_form_ComboBoxConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_form_ComboBoxConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    selectedClass: function Ext_form_ComboBoxConfig$selectedClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['selectedClass'] = value;
        return this;
    },
    
    shadow: function Ext_form_ComboBoxConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_ComboBoxConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_ComboBoxConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_ComboBoxConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_form_ComboBoxConfig$store(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_form_ComboBoxConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_form_ComboBoxConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_ComboBoxConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_ComboBoxConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_ComboBoxConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    title: function Ext_form_ComboBoxConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    tpl: function Ext_form_ComboBoxConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_ComboBoxConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    transform: function Ext_form_ComboBoxConfig$transform(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['transform'] = value;
        return this;
    },
    
    triggerAction: function Ext_form_ComboBoxConfig$triggerAction(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['triggerAction'] = value;
        return this;
    },
    
    triggerClass: function Ext_form_ComboBoxConfig$triggerClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['triggerClass'] = value;
        return this;
    },
    
    triggerConfig: function Ext_form_ComboBoxConfig$triggerConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['triggerConfig'] = value;
        return this;
    },
    
    typeAhead: function Ext_form_ComboBoxConfig$typeAhead(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['typeAhead'] = value;
        return this;
    },
    
    typeAheadDelay: function Ext_form_ComboBoxConfig$typeAheadDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['typeAheadDelay'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_ComboBoxConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_ComboBoxConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_ComboBoxConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_form_ComboBoxConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_form_ComboBoxConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    valueField: function Ext_form_ComboBoxConfig$valueField(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['valueField'] = value;
        return this;
    },
    
    valueNotFoundText: function Ext_form_ComboBoxConfig$valueNotFoundText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['valueNotFoundText'] = value;
        return this;
    },
    
    vtype: function Ext_form_ComboBoxConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_form_ComboBoxConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_form_ComboBoxConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wrapFocusClass: function Ext_form_ComboBoxConfig$wrapFocusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['wrapFocusClass'] = value;
        return this;
    },
    
    x: function Ext_form_ComboBoxConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_ComboBoxConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_ComboBoxConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.ComboBoxConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.CompositeFieldConfig

Ext.form.CompositeFieldConfig = function Ext_form_CompositeFieldConfig() {
    Ext.form.CompositeFieldConfig.initializeBase(this);
}
Ext.form.CompositeFieldConfig.prototype = {
    
    allowDomMove: function Ext_form_CompositeFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_CompositeFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_CompositeFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_CompositeFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_CompositeFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_CompositeFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_CompositeFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_CompositeFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_CompositeFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_CompositeFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_CompositeFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_CompositeFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_CompositeFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_CompositeFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_CompositeFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_CompositeFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_CompositeFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_CompositeFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_CompositeFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaults: function Ext_form_CompositeFieldConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_form_CompositeFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_CompositeFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_CompositeFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_CompositeFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_CompositeFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_CompositeFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    height: function Ext_form_CompositeFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_CompositeFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_CompositeFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_CompositeFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_CompositeFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_CompositeFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_CompositeFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_CompositeFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_CompositeFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_CompositeFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_CompositeFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_CompositeFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelConnector: function Ext_form_CompositeFieldConfig$labelConnector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['labelConnector'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_CompositeFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_CompositeFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_CompositeFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_CompositeFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_CompositeFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_CompositeFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_CompositeFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_CompositeFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_CompositeFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_CompositeFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_CompositeFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_CompositeFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_CompositeFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_CompositeFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_CompositeFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_CompositeFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_CompositeFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_CompositeFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_CompositeFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_CompositeFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_CompositeFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_CompositeFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_CompositeFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_CompositeFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_CompositeFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_CompositeFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_CompositeFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_CompositeFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_CompositeFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_CompositeFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_form_CompositeFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_CompositeFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_CompositeFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_CompositeFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.CompositeFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.DateFieldConfig

Ext.form.DateFieldConfig = function Ext_form_DateFieldConfig() {
    Ext.form.DateFieldConfig.initializeBase(this);
}
Ext.form.DateFieldConfig.prototype = {
    
    allowBlank: function Ext_form_DateFieldConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_DateFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    altFormats: function Ext_form_DateFieldConfig$altFormats(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['altFormats'] = value;
        return this;
    },
    
    anchor: function Ext_form_DateFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_DateFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_DateFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_DateFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_DateFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_DateFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_DateFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_DateFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_form_DateFieldConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_DateFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_DateFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_DateFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_DateFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_DateFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_DateFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_DateFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_DateFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_DateFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_DateFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_form_DateFieldConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_form_DateFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_DateFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    disabledDates: function Ext_form_DateFieldConfig$disabledDates(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['disabledDates'] = value;
        return this;
    },
    
    disabledDatesText: function Ext_form_DateFieldConfig$disabledDatesText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['disabledDatesText'] = value;
        return this;
    },
    
    disabledDays: function Ext_form_DateFieldConfig$disabledDays(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['disabledDays'] = value;
        return this;
    },
    
    disabledDaysText: function Ext_form_DateFieldConfig$disabledDaysText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['disabledDaysText'] = value;
        return this;
    },
    
    editable: function Ext_form_DateFieldConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    emptyClass: function Ext_form_DateFieldConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_form_DateFieldConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_form_DateFieldConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_DateFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_DateFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_DateFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_DateFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    format: function Ext_form_DateFieldConfig$format(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['format'] = value;
        return this;
    },
    
    grow: function Ext_form_DateFieldConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_form_DateFieldConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_form_DateFieldConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    height: function Ext_form_DateFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_DateFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_DateFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_DateFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_DateFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    hideTrigger: function Ext_form_DateFieldConfig$hideTrigger(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['hideTrigger'] = value;
        return this;
    },
    
    html: function Ext_form_DateFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_DateFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_DateFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_DateFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_DateFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_DateFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_DateFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_DateFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_DateFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_DateFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_DateFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_form_DateFieldConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxLength: function Ext_form_DateFieldConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_form_DateFieldConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    maxText: function Ext_form_DateFieldConfig$maxText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['maxText'] = value;
        return this;
    },
    
    maxValue: function Ext_form_DateFieldConfig$maxValue(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['maxValue'] = value;
        return this;
    },
    
    minLength: function Ext_form_DateFieldConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_form_DateFieldConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    minText: function Ext_form_DateFieldConfig$minText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['minText'] = value;
        return this;
    },
    
    minValue: function Ext_form_DateFieldConfig$minValue(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['minValue'] = value;
        return this;
    },
    
    msgFx: function Ext_form_DateFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_DateFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_DateFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_DateFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_DateFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_DateFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_DateFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_DateFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_DateFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_DateFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_DateFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_form_DateFieldConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_form_DateFieldConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_form_DateFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_DateFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_form_DateFieldConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    showToday: function Ext_form_DateFieldConfig$showToday(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['showToday'] = value;
        return this;
    },
    
    startDay: function Ext_form_DateFieldConfig$startDay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['startDay'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_DateFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_DateFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_DateFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_form_DateFieldConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_form_DateFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_DateFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_DateFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_DateFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_DateFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_DateFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    triggerClass: function Ext_form_DateFieldConfig$triggerClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['triggerClass'] = value;
        return this;
    },
    
    triggerConfig: function Ext_form_DateFieldConfig$triggerConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['triggerConfig'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_DateFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_DateFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_DateFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_form_DateFieldConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_form_DateFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vtype: function Ext_form_DateFieldConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_form_DateFieldConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_form_DateFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wrapFocusClass: function Ext_form_DateFieldConfig$wrapFocusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['wrapFocusClass'] = value;
        return this;
    },
    
    x: function Ext_form_DateFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_DateFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_DateFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DateFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.DisplayFieldConfig

Ext.form.DisplayFieldConfig = function Ext_form_DisplayFieldConfig() {
    Ext.form.DisplayFieldConfig.initializeBase(this);
}
Ext.form.DisplayFieldConfig.prototype = {
    
    allowDomMove: function Ext_form_DisplayFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_DisplayFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_DisplayFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_DisplayFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_DisplayFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_DisplayFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_DisplayFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_DisplayFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_DisplayFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_DisplayFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_DisplayFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_DisplayFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_DisplayFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_DisplayFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_DisplayFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_DisplayFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_DisplayFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_DisplayFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_DisplayFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_form_DisplayFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_DisplayFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_DisplayFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_DisplayFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_DisplayFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_DisplayFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    height: function Ext_form_DisplayFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_DisplayFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_DisplayFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_DisplayFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_DisplayFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_DisplayFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    htmlEncode: function Ext_form_DisplayFieldConfig$htmlEncode(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['htmlEncode'] = value;
        return this;
    },
    
    id: function Ext_form_DisplayFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_DisplayFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_DisplayFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_DisplayFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_DisplayFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_DisplayFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_DisplayFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_DisplayFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_DisplayFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_DisplayFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_DisplayFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_DisplayFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_DisplayFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_DisplayFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_DisplayFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_DisplayFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_DisplayFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_DisplayFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_DisplayFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_DisplayFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_DisplayFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_DisplayFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_DisplayFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_DisplayFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_DisplayFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_DisplayFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_DisplayFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_DisplayFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_DisplayFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_DisplayFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_DisplayFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_DisplayFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_DisplayFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_DisplayFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_DisplayFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_DisplayFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_form_DisplayFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_DisplayFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_DisplayFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_DisplayFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.DisplayFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.FieldConfig

Ext.form.FieldConfig = function Ext_form_FieldConfig() {
    Ext.form.FieldConfig.initializeBase(this);
}
Ext.form.FieldConfig.prototype = {
    
    allowDomMove: function Ext_form_FieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_FieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_FieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_FieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_FieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_FieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_FieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_FieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_FieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_FieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_FieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_FieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_FieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_FieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_FieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_FieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_FieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_FieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_FieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_form_FieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_FieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_FieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_FieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_FieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_FieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    height: function Ext_form_FieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_FieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_FieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_FieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_FieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_FieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_FieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_FieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_FieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_FieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_FieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_FieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_FieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_FieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_FieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_FieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_FieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_FieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_FieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_FieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_FieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_FieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_FieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_FieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_FieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_FieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_FieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_FieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_FieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_FieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_FieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_FieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_FieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_FieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_FieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_FieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_FieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_FieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_FieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_FieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_FieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_FieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_form_FieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_FieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_FieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_FieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.FieldSetConfig

Ext.form.FieldSetConfig = function Ext_form_FieldSetConfig() {
    Ext.form.FieldSetConfig.initializeBase(this);
}
Ext.form.FieldSetConfig.prototype = {
    
    activeItem: function Ext_form_FieldSetConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_FieldSetConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_FieldSetConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_form_FieldSetConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_form_FieldSetConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_form_FieldSetConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_form_FieldSetConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_FieldSetConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_form_FieldSetConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_FieldSetConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_FieldSetConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_FieldSetConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_form_FieldSetConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_form_FieldSetConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_form_FieldSetConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_form_FieldSetConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_form_FieldSetConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_form_FieldSetConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_form_FieldSetConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_form_FieldSetConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_FieldSetConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_FieldSetConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_FieldSetConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_FieldSetConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_FieldSetConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_form_FieldSetConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_form_FieldSetConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_form_FieldSetConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_form_FieldSetConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    checkboxName: function Ext_form_FieldSetConfig$checkboxName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['checkboxName'] = value;
        return this;
    },
    
    checkboxToggle: function Ext_form_FieldSetConfig$checkboxToggle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['checkboxToggle'] = value;
        return this;
    },
    
    clearCls: function Ext_form_FieldSetConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_form_FieldSetConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_form_FieldSetConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_form_FieldSetConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_form_FieldSetConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_form_FieldSetConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_form_FieldSetConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_form_FieldSetConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_FieldSetConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_FieldSetConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_form_FieldSetConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_form_FieldSetConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_form_FieldSetConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_FieldSetConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_form_FieldSetConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_form_FieldSetConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_form_FieldSetConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_FieldSetConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_FieldSetConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_form_FieldSetConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_form_FieldSetConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_form_FieldSetConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_form_FieldSetConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_form_FieldSetConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_form_FieldSetConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_form_FieldSetConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_form_FieldSetConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_form_FieldSetConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_FieldSetConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_form_FieldSetConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_form_FieldSetConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_FieldSetConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_FieldSetConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_FieldSetConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_FieldSetConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_form_FieldSetConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_form_FieldSetConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_form_FieldSetConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_FieldSetConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_form_FieldSetConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_form_FieldSetConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_FieldSetConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_FieldSetConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    labelWidth: function Ext_form_FieldSetConfig$labelWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['labelWidth'] = value;
        return this;
    },
    
    layout: function Ext_form_FieldSetConfig$layout(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_form_FieldSetConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_form_FieldSetConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_FieldSetConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_form_FieldSetConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_form_FieldSetConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_form_FieldSetConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_form_FieldSetConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_form_FieldSetConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_form_FieldSetConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_FieldSetConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_FieldSetConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_form_FieldSetConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_form_FieldSetConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_form_FieldSetConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_FieldSetConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_FieldSetConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_form_FieldSetConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_form_FieldSetConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_form_FieldSetConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_form_FieldSetConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_FieldSetConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_FieldSetConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_FieldSetConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_FieldSetConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_form_FieldSetConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_form_FieldSetConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_form_FieldSetConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_form_FieldSetConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_form_FieldSetConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_form_FieldSetConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_form_FieldSetConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_form_FieldSetConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_FieldSetConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_form_FieldSetConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_form_FieldSetConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_FieldSetConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_FieldSetConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_FieldSetConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FieldSetConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.FormPanelConfig

Ext.form.FormPanelConfig = function Ext_form_FormPanelConfig() {
    Ext.form.FormPanelConfig.initializeBase(this);
}
Ext.form.FormPanelConfig.prototype = {
    
    activeItem: function Ext_form_FormPanelConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_FormPanelConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_FormPanelConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_form_FormPanelConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_form_FormPanelConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_form_FormPanelConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_form_FormPanelConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_FormPanelConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_form_FormPanelConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_FormPanelConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_FormPanelConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_FormPanelConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_form_FormPanelConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_form_FormPanelConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_form_FormPanelConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_form_FormPanelConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_form_FormPanelConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_form_FormPanelConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_form_FormPanelConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_form_FormPanelConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_FormPanelConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_FormPanelConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_FormPanelConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_FormPanelConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_FormPanelConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_form_FormPanelConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_form_FormPanelConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_form_FormPanelConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_form_FormPanelConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_form_FormPanelConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_form_FormPanelConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_form_FormPanelConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_form_FormPanelConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_form_FormPanelConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_form_FormPanelConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_form_FormPanelConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_form_FormPanelConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_FormPanelConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_FormPanelConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultType: function Ext_form_FormPanelConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_form_FormPanelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_form_FormPanelConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_FormPanelConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_form_FormPanelConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_form_FormPanelConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_form_FormPanelConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_FormPanelConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_FormPanelConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_form_FormPanelConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_form_FormPanelConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_form_FormPanelConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_form_FormPanelConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    formId: function Ext_form_FormPanelConfig$formId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['formId'] = value;
        return this;
    },
    
    frame: function Ext_form_FormPanelConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_form_FormPanelConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_form_FormPanelConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_form_FormPanelConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_form_FormPanelConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_FormPanelConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_form_FormPanelConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_form_FormPanelConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_FormPanelConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideLabels: function Ext_form_FormPanelConfig$hideLabels(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['hideLabels'] = value;
        return this;
    },
    
    hideMode: function Ext_form_FormPanelConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_FormPanelConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_FormPanelConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_form_FormPanelConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_form_FormPanelConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_form_FormPanelConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_FormPanelConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_form_FormPanelConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_form_FormPanelConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelAlign: function Ext_form_FormPanelConfig$labelAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['labelAlign'] = value;
        return this;
    },
    
    labelPad: function Ext_form_FormPanelConfig$labelPad(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['labelPad'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_FormPanelConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_FormPanelConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    labelWidth: function Ext_form_FormPanelConfig$labelWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['labelWidth'] = value;
        return this;
    },
    
    layout: function Ext_form_FormPanelConfig$layout(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_form_FormPanelConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_form_FormPanelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_FormPanelConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_form_FormPanelConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_form_FormPanelConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    monitorPoll: function Ext_form_FormPanelConfig$monitorPoll(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['monitorPoll'] = value;
        return this;
    },
    
    monitorResize: function Ext_form_FormPanelConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    monitorValid: function Ext_form_FormPanelConfig$monitorValid(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['monitorValid'] = value;
        return this;
    },
    
    overCls: function Ext_form_FormPanelConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_form_FormPanelConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_form_FormPanelConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_FormPanelConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_FormPanelConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_form_FormPanelConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_form_FormPanelConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_form_FormPanelConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_FormPanelConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_FormPanelConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_form_FormPanelConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_form_FormPanelConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_form_FormPanelConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_form_FormPanelConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_FormPanelConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_FormPanelConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_FormPanelConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_FormPanelConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_form_FormPanelConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_form_FormPanelConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_form_FormPanelConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_form_FormPanelConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_form_FormPanelConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_form_FormPanelConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_form_FormPanelConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_form_FormPanelConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_FormPanelConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_form_FormPanelConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_form_FormPanelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_FormPanelConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_FormPanelConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_FormPanelConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.FormPanelConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.HiddenConfig

Ext.form.HiddenConfig = function Ext_form_HiddenConfig() {
    Ext.form.HiddenConfig.initializeBase(this);
}
Ext.form.HiddenConfig.prototype = {
    
    allowDomMove: function Ext_form_HiddenConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_HiddenConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_HiddenConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_HiddenConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_HiddenConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_HiddenConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_HiddenConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_HiddenConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_HiddenConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_HiddenConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_HiddenConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_HiddenConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_HiddenConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_HiddenConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_HiddenConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_HiddenConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_HiddenConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_HiddenConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_HiddenConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_form_HiddenConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_HiddenConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_HiddenConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_HiddenConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_HiddenConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_HiddenConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    height: function Ext_form_HiddenConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_HiddenConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_HiddenConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_HiddenConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_HiddenConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_HiddenConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_HiddenConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_HiddenConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_HiddenConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_HiddenConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_HiddenConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_HiddenConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_HiddenConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_HiddenConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_HiddenConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_HiddenConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_HiddenConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_HiddenConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_HiddenConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_HiddenConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_HiddenConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_HiddenConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_HiddenConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_HiddenConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_HiddenConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_HiddenConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_HiddenConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_HiddenConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_HiddenConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_HiddenConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_HiddenConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_HiddenConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_HiddenConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_HiddenConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_HiddenConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_HiddenConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_HiddenConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_HiddenConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_HiddenConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_HiddenConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_HiddenConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_HiddenConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_form_HiddenConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_HiddenConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_HiddenConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_HiddenConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HiddenConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.HtmlEditorConfig

Ext.form.HtmlEditorConfig = function Ext_form_HtmlEditorConfig() {
    Ext.form.HtmlEditorConfig.initializeBase(this);
}
Ext.form.HtmlEditorConfig.prototype = {
    
    allowDomMove: function Ext_form_HtmlEditorConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_HtmlEditorConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_HtmlEditorConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_HtmlEditorConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_HtmlEditorConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_HtmlEditorConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_HtmlEditorConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_HtmlEditorConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_HtmlEditorConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_HtmlEditorConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_HtmlEditorConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_HtmlEditorConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_HtmlEditorConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_HtmlEditorConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_HtmlEditorConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_HtmlEditorConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_HtmlEditorConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    createLinkText: function Ext_form_HtmlEditorConfig$createLinkText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['createLinkText'] = value;
        return this;
    },
    
    ctCls: function Ext_form_HtmlEditorConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_HtmlEditorConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultLinkValue: function Ext_form_HtmlEditorConfig$defaultLinkValue(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['defaultLinkValue'] = value;
        return this;
    },
    
    defaultValue: function Ext_form_HtmlEditorConfig$defaultValue(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['defaultValue'] = value;
        return this;
    },
    
    disabled: function Ext_form_HtmlEditorConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_HtmlEditorConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableAlignments: function Ext_form_HtmlEditorConfig$enableAlignments(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['enableAlignments'] = value;
        return this;
    },
    
    enableColors: function Ext_form_HtmlEditorConfig$enableColors(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['enableColors'] = value;
        return this;
    },
    
    enableFont: function Ext_form_HtmlEditorConfig$enableFont(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['enableFont'] = value;
        return this;
    },
    
    enableFontSize: function Ext_form_HtmlEditorConfig$enableFontSize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['enableFontSize'] = value;
        return this;
    },
    
    enableFormat: function Ext_form_HtmlEditorConfig$enableFormat(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['enableFormat'] = value;
        return this;
    },
    
    enableLinks: function Ext_form_HtmlEditorConfig$enableLinks(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['enableLinks'] = value;
        return this;
    },
    
    enableLists: function Ext_form_HtmlEditorConfig$enableLists(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['enableLists'] = value;
        return this;
    },
    
    enableSourceEdit: function Ext_form_HtmlEditorConfig$enableSourceEdit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['enableSourceEdit'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_HtmlEditorConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_HtmlEditorConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_HtmlEditorConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_HtmlEditorConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    fontFamilies: function Ext_form_HtmlEditorConfig$fontFamilies(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['fontFamilies'] = value;
        return this;
    },
    
    height: function Ext_form_HtmlEditorConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_HtmlEditorConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_HtmlEditorConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_HtmlEditorConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_HtmlEditorConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_HtmlEditorConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_HtmlEditorConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_HtmlEditorConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_HtmlEditorConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_HtmlEditorConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_HtmlEditorConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_HtmlEditorConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_HtmlEditorConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_HtmlEditorConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_HtmlEditorConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_HtmlEditorConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_HtmlEditorConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_HtmlEditorConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_HtmlEditorConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_HtmlEditorConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_HtmlEditorConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_HtmlEditorConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_HtmlEditorConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_HtmlEditorConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_HtmlEditorConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_HtmlEditorConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_HtmlEditorConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_HtmlEditorConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_HtmlEditorConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_HtmlEditorConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_HtmlEditorConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_HtmlEditorConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_HtmlEditorConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_HtmlEditorConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_HtmlEditorConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_HtmlEditorConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_HtmlEditorConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_HtmlEditorConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_HtmlEditorConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_HtmlEditorConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_HtmlEditorConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_HtmlEditorConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_form_HtmlEditorConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_HtmlEditorConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_HtmlEditorConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_HtmlEditorConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.HtmlEditorConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.LabelConfig

Ext.form.LabelConfig = function Ext_form_LabelConfig() {
    Ext.form.LabelConfig.initializeBase(this);
}
Ext.form.LabelConfig.prototype = {
    
    allowDomMove: function Ext_form_LabelConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_LabelConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_LabelConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_form_LabelConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_LabelConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_LabelConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_LabelConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_LabelConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_LabelConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_LabelConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_LabelConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_LabelConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_LabelConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_LabelConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_LabelConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_LabelConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_LabelConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_LabelConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_form_LabelConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_LabelConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_LabelConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_LabelConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    forId: function Ext_form_LabelConfig$forId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['forId'] = value;
        return this;
    },
    
    height: function Ext_form_LabelConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_LabelConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_LabelConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_LabelConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_LabelConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_LabelConfig$html(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_LabelConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_form_LabelConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_LabelConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_LabelConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_LabelConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_LabelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_LabelConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    overCls: function Ext_form_LabelConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_LabelConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_LabelConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_LabelConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_form_LabelConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_form_LabelConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_LabelConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_LabelConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_LabelConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_LabelConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_LabelConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_LabelConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_form_LabelConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    text: function Ext_form_LabelConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    tpl: function Ext_form_LabelConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_LabelConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_form_LabelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_LabelConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_LabelConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_LabelConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.LabelConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.NumberFieldConfig

Ext.form.NumberFieldConfig = function Ext_form_NumberFieldConfig() {
    Ext.form.NumberFieldConfig.initializeBase(this);
}
Ext.form.NumberFieldConfig.prototype = {
    
    allowBlank: function Ext_form_NumberFieldConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDecimals: function Ext_form_NumberFieldConfig$allowDecimals(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['allowDecimals'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_NumberFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    allowNegative: function Ext_form_NumberFieldConfig$allowNegative(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['allowNegative'] = value;
        return this;
    },
    
    anchor: function Ext_form_NumberFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_NumberFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_NumberFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_NumberFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_NumberFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_NumberFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_NumberFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoStripChars: function Ext_form_NumberFieldConfig$autoStripChars(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['autoStripChars'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_NumberFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseChars: function Ext_form_NumberFieldConfig$baseChars(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['baseChars'] = value;
        return this;
    },
    
    blankText: function Ext_form_NumberFieldConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_NumberFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_NumberFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_NumberFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_NumberFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_NumberFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_NumberFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_NumberFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_NumberFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_NumberFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_NumberFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    decimalPrecision: function Ext_form_NumberFieldConfig$decimalPrecision(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['decimalPrecision'] = value;
        return this;
    },
    
    decimalSeparator: function Ext_form_NumberFieldConfig$decimalSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['decimalSeparator'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_form_NumberFieldConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_form_NumberFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_NumberFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    emptyClass: function Ext_form_NumberFieldConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_form_NumberFieldConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_form_NumberFieldConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_NumberFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_NumberFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_NumberFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_NumberFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    grow: function Ext_form_NumberFieldConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_form_NumberFieldConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_form_NumberFieldConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    height: function Ext_form_NumberFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_NumberFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_NumberFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_NumberFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_NumberFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_NumberFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_NumberFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_NumberFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_NumberFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_NumberFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_NumberFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_NumberFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_NumberFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_NumberFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_NumberFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_NumberFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_form_NumberFieldConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxLength: function Ext_form_NumberFieldConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_form_NumberFieldConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    maxText: function Ext_form_NumberFieldConfig$maxText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['maxText'] = value;
        return this;
    },
    
    maxValue: function Ext_form_NumberFieldConfig$maxValue(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['maxValue'] = value;
        return this;
    },
    
    minLength: function Ext_form_NumberFieldConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_form_NumberFieldConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    minText: function Ext_form_NumberFieldConfig$minText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['minText'] = value;
        return this;
    },
    
    minValue: function Ext_form_NumberFieldConfig$minValue(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['minValue'] = value;
        return this;
    },
    
    msgFx: function Ext_form_NumberFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_NumberFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_NumberFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    nanText: function Ext_form_NumberFieldConfig$nanText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['nanText'] = value;
        return this;
    },
    
    overCls: function Ext_form_NumberFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_NumberFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_NumberFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_NumberFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_NumberFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_NumberFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_NumberFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_NumberFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_form_NumberFieldConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_form_NumberFieldConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_form_NumberFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_NumberFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_form_NumberFieldConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_NumberFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_NumberFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_NumberFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_form_NumberFieldConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_form_NumberFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_NumberFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_NumberFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_NumberFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_NumberFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_NumberFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_NumberFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_NumberFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_NumberFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_form_NumberFieldConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_form_NumberFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vtype: function Ext_form_NumberFieldConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_form_NumberFieldConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_form_NumberFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_NumberFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_NumberFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_NumberFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.NumberFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.RadioConfig

Ext.form.RadioConfig = function Ext_form_RadioConfig() {
    Ext.form.RadioConfig.initializeBase(this);
}
Ext.form.RadioConfig.prototype = {
    
    allowDomMove: function Ext_form_RadioConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_RadioConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_RadioConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_RadioConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_RadioConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_RadioConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_RadioConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_RadioConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_RadioConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxLabel: function Ext_form_RadioConfig$boxLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['boxLabel'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_RadioConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_RadioConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_RadioConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_RadioConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_RadioConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    checked_: function Ext_form_RadioConfig$checked_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['checked'] = value;
        return this;
    },
    
    clearCls: function Ext_form_RadioConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_RadioConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_RadioConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_RadioConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_RadioConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_form_RadioConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_RadioConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_RadioConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_RadioConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_RadioConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_RadioConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    handler: function Ext_form_RadioConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    height: function Ext_form_RadioConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_RadioConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_RadioConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_RadioConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_RadioConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_RadioConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_RadioConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_RadioConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    inputValue: function Ext_form_RadioConfig$inputValue(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['inputValue'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_RadioConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_RadioConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_RadioConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_RadioConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_RadioConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_RadioConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_RadioConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_RadioConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_RadioConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_RadioConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_RadioConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_RadioConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_RadioConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_RadioConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_RadioConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_RadioConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_RadioConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_RadioConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_RadioConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_RadioConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_RadioConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    scope: function Ext_form_RadioConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_RadioConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_RadioConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_RadioConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_RadioConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_RadioConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_RadioConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_RadioConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_RadioConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_RadioConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_RadioConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_RadioConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_RadioConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_RadioConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_form_RadioConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_RadioConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_RadioConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_RadioConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.RadioGroupConfig

Ext.form.RadioGroupConfig = function Ext_form_RadioGroupConfig() {
    Ext.form.RadioGroupConfig.initializeBase(this);
}
Ext.form.RadioGroupConfig.prototype = {
    
    allowBlank: function Ext_form_RadioGroupConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_RadioGroupConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_RadioGroupConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_RadioGroupConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_RadioGroupConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_RadioGroupConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_RadioGroupConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_RadioGroupConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_RadioGroupConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_RadioGroupConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_form_RadioGroupConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_RadioGroupConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_RadioGroupConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_RadioGroupConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_RadioGroupConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_RadioGroupConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_RadioGroupConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_RadioGroupConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    columns: function Ext_form_RadioGroupConfig$columns(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    contentEl: function Ext_form_RadioGroupConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_RadioGroupConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_RadioGroupConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_form_RadioGroupConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_RadioGroupConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_RadioGroupConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_RadioGroupConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_RadioGroupConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_RadioGroupConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    height: function Ext_form_RadioGroupConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_RadioGroupConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_RadioGroupConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_RadioGroupConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_RadioGroupConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_RadioGroupConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_RadioGroupConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_RadioGroupConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_RadioGroupConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_RadioGroupConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_RadioGroupConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_RadioGroupConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_form_RadioGroupConfig$items(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_RadioGroupConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_RadioGroupConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_RadioGroupConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_RadioGroupConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_RadioGroupConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_RadioGroupConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_RadioGroupConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_RadioGroupConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_RadioGroupConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_RadioGroupConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_RadioGroupConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_RadioGroupConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_RadioGroupConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_RadioGroupConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_RadioGroupConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_RadioGroupConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_RadioGroupConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_RadioGroupConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_RadioGroupConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_RadioGroupConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_RadioGroupConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_RadioGroupConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_RadioGroupConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_RadioGroupConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_RadioGroupConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_RadioGroupConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_RadioGroupConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_RadioGroupConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_RadioGroupConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_RadioGroupConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vertical: function Ext_form_RadioGroupConfig$vertical(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['vertical'] = value;
        return this;
    },
    
    width: function Ext_form_RadioGroupConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_RadioGroupConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_RadioGroupConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_RadioGroupConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.RadioGroupConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.SliderFieldConfig

Ext.form.SliderFieldConfig = function Ext_form_SliderFieldConfig() {
    Ext.form.SliderFieldConfig.initializeBase(this);
}
Ext.form.SliderFieldConfig.prototype = {
    
    allowDomMove: function Ext_form_SliderFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_SliderFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_SliderFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_SliderFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_SliderFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_SliderFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_SliderFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_SliderFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_SliderFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_SliderFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_SliderFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_SliderFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_SliderFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_SliderFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_SliderFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_SliderFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_SliderFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_SliderFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_SliderFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_form_SliderFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_SliderFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_SliderFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_SliderFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_SliderFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_SliderFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    height: function Ext_form_SliderFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_SliderFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_SliderFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_SliderFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_SliderFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_SliderFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_SliderFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_SliderFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_SliderFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_SliderFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_SliderFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_SliderFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_SliderFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_SliderFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_SliderFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_SliderFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_form_SliderFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_SliderFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_SliderFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_SliderFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_SliderFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_SliderFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_SliderFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_SliderFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_SliderFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_SliderFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_SliderFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_form_SliderFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_SliderFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_SliderFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_SliderFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_SliderFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_form_SliderFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_SliderFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_SliderFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_SliderFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tipText: function Ext_form_SliderFieldConfig$tipText(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['tipText'] = value;
        return this;
    },
    
    tpl: function Ext_form_SliderFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_SliderFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    useTips: function Ext_form_SliderFieldConfig$useTips(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['useTips'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_SliderFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_SliderFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_SliderFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_form_SliderFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_form_SliderFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_SliderFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_SliderFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_SliderFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.SliderFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.TextAreaConfig

Ext.form.TextAreaConfig = function Ext_form_TextAreaConfig() {
    Ext.form.TextAreaConfig.initializeBase(this);
}
Ext.form.TextAreaConfig.prototype = {
    
    allowBlank: function Ext_form_TextAreaConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_TextAreaConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_TextAreaConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_TextAreaConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_TextAreaConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_TextAreaConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_TextAreaConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_TextAreaConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_TextAreaConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_TextAreaConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_form_TextAreaConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_TextAreaConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_TextAreaConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_TextAreaConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_TextAreaConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_TextAreaConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_TextAreaConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_TextAreaConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_TextAreaConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_TextAreaConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_TextAreaConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_form_TextAreaConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_form_TextAreaConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_TextAreaConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    emptyClass: function Ext_form_TextAreaConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_form_TextAreaConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_form_TextAreaConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_TextAreaConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_TextAreaConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_TextAreaConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_TextAreaConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    grow: function Ext_form_TextAreaConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_form_TextAreaConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_form_TextAreaConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    height: function Ext_form_TextAreaConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_TextAreaConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_TextAreaConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_TextAreaConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_TextAreaConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_TextAreaConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_TextAreaConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_TextAreaConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_TextAreaConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_TextAreaConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_TextAreaConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_TextAreaConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_TextAreaConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_TextAreaConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_TextAreaConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_TextAreaConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_form_TextAreaConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxLength: function Ext_form_TextAreaConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_form_TextAreaConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    minLength: function Ext_form_TextAreaConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_form_TextAreaConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    msgFx: function Ext_form_TextAreaConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_TextAreaConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_TextAreaConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_TextAreaConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_TextAreaConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_TextAreaConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_TextAreaConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_TextAreaConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    preventScrollbars: function Ext_form_TextAreaConfig$preventScrollbars(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['preventScrollbars'] = value;
        return this;
    },
    
    ptype: function Ext_form_TextAreaConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_TextAreaConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_TextAreaConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_form_TextAreaConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_form_TextAreaConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_form_TextAreaConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_TextAreaConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_form_TextAreaConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_TextAreaConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_TextAreaConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_TextAreaConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_form_TextAreaConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_form_TextAreaConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_TextAreaConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_TextAreaConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_TextAreaConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_TextAreaConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_TextAreaConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_TextAreaConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_TextAreaConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_TextAreaConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_form_TextAreaConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_form_TextAreaConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vtype: function Ext_form_TextAreaConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_form_TextAreaConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_form_TextAreaConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_TextAreaConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_TextAreaConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_TextAreaConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextAreaConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.TextFieldConfig

Ext.form.TextFieldConfig = function Ext_form_TextFieldConfig() {
    Ext.form.TextFieldConfig.initializeBase(this);
}
Ext.form.TextFieldConfig.prototype = {
    
    allowBlank: function Ext_form_TextFieldConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_TextFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_TextFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_TextFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_TextFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_TextFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_TextFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_TextFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_TextFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_TextFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_form_TextFieldConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_TextFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_TextFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_TextFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_TextFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_TextFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_TextFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_TextFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_TextFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_TextFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_TextFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_form_TextFieldConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_form_TextFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_TextFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    emptyClass: function Ext_form_TextFieldConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_form_TextFieldConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_form_TextFieldConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_TextFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_TextFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_TextFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_TextFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    grow: function Ext_form_TextFieldConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_form_TextFieldConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_form_TextFieldConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    height: function Ext_form_TextFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_TextFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_TextFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_TextFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_TextFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_form_TextFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_TextFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_TextFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_TextFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_TextFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_TextFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_TextFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_TextFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_TextFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_TextFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_TextFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_form_TextFieldConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxLength: function Ext_form_TextFieldConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_form_TextFieldConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    minLength: function Ext_form_TextFieldConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_form_TextFieldConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    msgFx: function Ext_form_TextFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_TextFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_TextFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_TextFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_TextFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_TextFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_TextFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_TextFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_TextFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_TextFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_TextFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_form_TextFieldConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_form_TextFieldConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_form_TextFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_TextFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_form_TextFieldConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_TextFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_TextFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_TextFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_form_TextFieldConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_form_TextFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_TextFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_TextFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_TextFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_TextFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_TextFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_TextFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_TextFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_TextFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_form_TextFieldConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_form_TextFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vtype: function Ext_form_TextFieldConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_form_TextFieldConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_form_TextFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_form_TextFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_TextFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_TextFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TextFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.TimeFieldConfig

Ext.form.TimeFieldConfig = function Ext_form_TimeFieldConfig() {
    Ext.form.TimeFieldConfig.initializeBase(this);
}
Ext.form.TimeFieldConfig.prototype = {
    
    allQuery: function Ext_form_TimeFieldConfig$allQuery(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['allQuery'] = value;
        return this;
    },
    
    allowBlank: function Ext_form_TimeFieldConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_TimeFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    altFormats: function Ext_form_TimeFieldConfig$altFormats(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['altFormats'] = value;
        return this;
    },
    
    anchor: function Ext_form_TimeFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_TimeFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_TimeFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_TimeFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_TimeFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_TimeFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoSelect: function Ext_form_TimeFieldConfig$autoSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['autoSelect'] = value;
        return this;
    },
    
    autoShow: function Ext_form_TimeFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_TimeFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_form_TimeFieldConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_TimeFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_TimeFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_TimeFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_TimeFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_TimeFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_TimeFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clearFilterOnReset: function Ext_form_TimeFieldConfig$clearFilterOnReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['clearFilterOnReset'] = value;
        return this;
    },
    
    cls: function Ext_form_TimeFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_TimeFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_TimeFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_TimeFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_form_TimeFieldConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_form_TimeFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_TimeFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    displayField: function Ext_form_TimeFieldConfig$displayField(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['displayField'] = value;
        return this;
    },
    
    editable: function Ext_form_TimeFieldConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    emptyClass: function Ext_form_TimeFieldConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_form_TimeFieldConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_form_TimeFieldConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_TimeFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_TimeFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_TimeFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_TimeFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    forceSelection: function Ext_form_TimeFieldConfig$forceSelection(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['forceSelection'] = value;
        return this;
    },
    
    format: function Ext_form_TimeFieldConfig$format(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['format'] = value;
        return this;
    },
    
    grow: function Ext_form_TimeFieldConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_form_TimeFieldConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_form_TimeFieldConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    handleHeight: function Ext_form_TimeFieldConfig$handleHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['handleHeight'] = value;
        return this;
    },
    
    height: function Ext_form_TimeFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_TimeFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hiddenId: function Ext_form_TimeFieldConfig$hiddenId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['hiddenId'] = value;
        return this;
    },
    
    hiddenName: function Ext_form_TimeFieldConfig$hiddenName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['hiddenName'] = value;
        return this;
    },
    
    hiddenValue: function Ext_form_TimeFieldConfig$hiddenValue(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['hiddenValue'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_TimeFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_TimeFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_TimeFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    hideTrigger: function Ext_form_TimeFieldConfig$hideTrigger(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['hideTrigger'] = value;
        return this;
    },
    
    html: function Ext_form_TimeFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_TimeFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    increment: function Ext_form_TimeFieldConfig$increment(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['increment'] = value;
        return this;
    },
    
    inputType: function Ext_form_TimeFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_TimeFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_TimeFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_TimeFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_TimeFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    itemSelector: function Ext_form_TimeFieldConfig$itemSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['itemSelector'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_TimeFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_TimeFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    lazyInit: function Ext_form_TimeFieldConfig$lazyInit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['lazyInit'] = value;
        return this;
    },
    
    lazyRender: function Ext_form_TimeFieldConfig$lazyRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['lazyRender'] = value;
        return this;
    },
    
    listAlign: function Ext_form_TimeFieldConfig$listAlign(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['listAlign'] = value;
        return this;
    },
    
    listClass: function Ext_form_TimeFieldConfig$listClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['listClass'] = value;
        return this;
    },
    
    listEmptyText: function Ext_form_TimeFieldConfig$listEmptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['listEmptyText'] = value;
        return this;
    },
    
    listWidth: function Ext_form_TimeFieldConfig$listWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['listWidth'] = value;
        return this;
    },
    
    listeners: function Ext_form_TimeFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadingText: function Ext_form_TimeFieldConfig$loadingText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['loadingText'] = value;
        return this;
    },
    
    margins: function Ext_form_TimeFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_form_TimeFieldConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxHeight: function Ext_form_TimeFieldConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    maxLength: function Ext_form_TimeFieldConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_form_TimeFieldConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    maxText: function Ext_form_TimeFieldConfig$maxText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['maxText'] = value;
        return this;
    },
    
    maxValue: function Ext_form_TimeFieldConfig$maxValue(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['maxValue'] = value;
        return this;
    },
    
    minChars: function Ext_form_TimeFieldConfig$minChars(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['minChars'] = value;
        return this;
    },
    
    minHeight: function Ext_form_TimeFieldConfig$minHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['minHeight'] = value;
        return this;
    },
    
    minLength: function Ext_form_TimeFieldConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_form_TimeFieldConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    minListWidth: function Ext_form_TimeFieldConfig$minListWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['minListWidth'] = value;
        return this;
    },
    
    minText: function Ext_form_TimeFieldConfig$minText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['minText'] = value;
        return this;
    },
    
    minValue: function Ext_form_TimeFieldConfig$minValue(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['minValue'] = value;
        return this;
    },
    
    mode: function Ext_form_TimeFieldConfig$mode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['mode'] = value;
        return this;
    },
    
    msgFx: function Ext_form_TimeFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_TimeFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_TimeFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_TimeFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageSize: function Ext_form_TimeFieldConfig$pageSize(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['pageSize'] = value;
        return this;
    },
    
    pageX: function Ext_form_TimeFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_TimeFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_TimeFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_TimeFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_TimeFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    queryDelay: function Ext_form_TimeFieldConfig$queryDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['queryDelay'] = value;
        return this;
    },
    
    queryParam: function Ext_form_TimeFieldConfig$queryParam(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['queryParam'] = value;
        return this;
    },
    
    readOnly: function Ext_form_TimeFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_TimeFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_form_TimeFieldConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_form_TimeFieldConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_form_TimeFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_TimeFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizable: function Ext_form_TimeFieldConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_form_TimeFieldConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    selectedClass: function Ext_form_TimeFieldConfig$selectedClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['selectedClass'] = value;
        return this;
    },
    
    shadow: function Ext_form_TimeFieldConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_TimeFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_TimeFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_TimeFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_form_TimeFieldConfig$store(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_form_TimeFieldConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_form_TimeFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_TimeFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_TimeFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_TimeFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    title: function Ext_form_TimeFieldConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    tpl: function Ext_form_TimeFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_TimeFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    transform: function Ext_form_TimeFieldConfig$transform(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['transform'] = value;
        return this;
    },
    
    triggerAction: function Ext_form_TimeFieldConfig$triggerAction(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['triggerAction'] = value;
        return this;
    },
    
    triggerClass: function Ext_form_TimeFieldConfig$triggerClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['triggerClass'] = value;
        return this;
    },
    
    triggerConfig: function Ext_form_TimeFieldConfig$triggerConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['triggerConfig'] = value;
        return this;
    },
    
    typeAhead: function Ext_form_TimeFieldConfig$typeAhead(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['typeAhead'] = value;
        return this;
    },
    
    typeAheadDelay: function Ext_form_TimeFieldConfig$typeAheadDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['typeAheadDelay'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_TimeFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_TimeFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_TimeFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_form_TimeFieldConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_form_TimeFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    valueField: function Ext_form_TimeFieldConfig$valueField(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['valueField'] = value;
        return this;
    },
    
    valueNotFoundText: function Ext_form_TimeFieldConfig$valueNotFoundText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['valueNotFoundText'] = value;
        return this;
    },
    
    vtype: function Ext_form_TimeFieldConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_form_TimeFieldConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_form_TimeFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wrapFocusClass: function Ext_form_TimeFieldConfig$wrapFocusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['wrapFocusClass'] = value;
        return this;
    },
    
    x: function Ext_form_TimeFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_TimeFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_TimeFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TimeFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.TriggerFieldConfig

Ext.form.TriggerFieldConfig = function Ext_form_TriggerFieldConfig() {
    Ext.form.TriggerFieldConfig.initializeBase(this);
}
Ext.form.TriggerFieldConfig.prototype = {
    
    allowBlank: function Ext_form_TriggerFieldConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_TriggerFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_TriggerFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_TriggerFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_TriggerFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_TriggerFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_TriggerFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_TriggerFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_TriggerFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_TriggerFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_form_TriggerFieldConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_TriggerFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_TriggerFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_TriggerFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_TriggerFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_TriggerFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_TriggerFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_TriggerFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_TriggerFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_TriggerFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_TriggerFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_form_TriggerFieldConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_form_TriggerFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_TriggerFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    editable: function Ext_form_TriggerFieldConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    emptyClass: function Ext_form_TriggerFieldConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_form_TriggerFieldConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_form_TriggerFieldConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_TriggerFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_TriggerFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_TriggerFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_TriggerFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    grow: function Ext_form_TriggerFieldConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_form_TriggerFieldConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_form_TriggerFieldConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    height: function Ext_form_TriggerFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_TriggerFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_TriggerFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_TriggerFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_TriggerFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    hideTrigger: function Ext_form_TriggerFieldConfig$hideTrigger(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['hideTrigger'] = value;
        return this;
    },
    
    html: function Ext_form_TriggerFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_TriggerFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_TriggerFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_TriggerFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_TriggerFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_TriggerFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_TriggerFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_TriggerFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_TriggerFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_TriggerFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_TriggerFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_form_TriggerFieldConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxLength: function Ext_form_TriggerFieldConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_form_TriggerFieldConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    minLength: function Ext_form_TriggerFieldConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_form_TriggerFieldConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    msgFx: function Ext_form_TriggerFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_TriggerFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_TriggerFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_TriggerFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_TriggerFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_TriggerFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_TriggerFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_TriggerFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_TriggerFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_TriggerFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_TriggerFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_form_TriggerFieldConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_form_TriggerFieldConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_form_TriggerFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_TriggerFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_form_TriggerFieldConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_TriggerFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_TriggerFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_TriggerFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_form_TriggerFieldConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_form_TriggerFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_TriggerFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_TriggerFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_TriggerFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_TriggerFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_TriggerFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    triggerClass: function Ext_form_TriggerFieldConfig$triggerClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['triggerClass'] = value;
        return this;
    },
    
    triggerConfig: function Ext_form_TriggerFieldConfig$triggerConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['triggerConfig'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_TriggerFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_TriggerFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_TriggerFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_form_TriggerFieldConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_form_TriggerFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vtype: function Ext_form_TriggerFieldConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_form_TriggerFieldConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_form_TriggerFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wrapFocusClass: function Ext_form_TriggerFieldConfig$wrapFocusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['wrapFocusClass'] = value;
        return this;
    },
    
    x: function Ext_form_TriggerFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_TriggerFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_TriggerFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TriggerFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.form.TwinTriggerFieldConfig

Ext.form.TwinTriggerFieldConfig = function Ext_form_TwinTriggerFieldConfig() {
    Ext.form.TwinTriggerFieldConfig.initializeBase(this);
}
Ext.form.TwinTriggerFieldConfig.prototype = {
    
    allowBlank: function Ext_form_TwinTriggerFieldConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_form_TwinTriggerFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_form_TwinTriggerFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_form_TwinTriggerFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_form_TwinTriggerFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_form_TwinTriggerFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_form_TwinTriggerFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_form_TwinTriggerFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_form_TwinTriggerFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_form_TwinTriggerFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_form_TwinTriggerFieldConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_form_TwinTriggerFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_form_TwinTriggerFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_form_TwinTriggerFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_form_TwinTriggerFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_form_TwinTriggerFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_form_TwinTriggerFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_form_TwinTriggerFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_form_TwinTriggerFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_form_TwinTriggerFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_form_TwinTriggerFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_form_TwinTriggerFieldConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_form_TwinTriggerFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_form_TwinTriggerFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    editable: function Ext_form_TwinTriggerFieldConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    emptyClass: function Ext_form_TwinTriggerFieldConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_form_TwinTriggerFieldConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_form_TwinTriggerFieldConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_form_TwinTriggerFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_form_TwinTriggerFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_form_TwinTriggerFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_form_TwinTriggerFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    grow: function Ext_form_TwinTriggerFieldConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_form_TwinTriggerFieldConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_form_TwinTriggerFieldConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    height: function Ext_form_TwinTriggerFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_form_TwinTriggerFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_form_TwinTriggerFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_form_TwinTriggerFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_form_TwinTriggerFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    hideTrigger: function Ext_form_TwinTriggerFieldConfig$hideTrigger(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['hideTrigger'] = value;
        return this;
    },
    
    html: function Ext_form_TwinTriggerFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_form_TwinTriggerFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_form_TwinTriggerFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_form_TwinTriggerFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_form_TwinTriggerFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_form_TwinTriggerFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_form_TwinTriggerFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_form_TwinTriggerFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_form_TwinTriggerFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_form_TwinTriggerFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_form_TwinTriggerFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_form_TwinTriggerFieldConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxLength: function Ext_form_TwinTriggerFieldConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_form_TwinTriggerFieldConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    minLength: function Ext_form_TwinTriggerFieldConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_form_TwinTriggerFieldConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    msgFx: function Ext_form_TwinTriggerFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_form_TwinTriggerFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_form_TwinTriggerFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_form_TwinTriggerFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_form_TwinTriggerFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_form_TwinTriggerFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_form_TwinTriggerFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_form_TwinTriggerFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_form_TwinTriggerFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_form_TwinTriggerFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_form_TwinTriggerFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_form_TwinTriggerFieldConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_form_TwinTriggerFieldConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_form_TwinTriggerFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_form_TwinTriggerFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_form_TwinTriggerFieldConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    stateEvents: function Ext_form_TwinTriggerFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_form_TwinTriggerFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_form_TwinTriggerFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_form_TwinTriggerFieldConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_form_TwinTriggerFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_form_TwinTriggerFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_form_TwinTriggerFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_form_TwinTriggerFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_form_TwinTriggerFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_form_TwinTriggerFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trigger1Class: function Ext_form_TwinTriggerFieldConfig$trigger1Class(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['trigger1Class'] = value;
        return this;
    },
    
    trigger2Class: function Ext_form_TwinTriggerFieldConfig$trigger2Class(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['trigger2Class'] = value;
        return this;
    },
    
    triggerClass: function Ext_form_TwinTriggerFieldConfig$triggerClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['triggerClass'] = value;
        return this;
    },
    
    triggerConfig: function Ext_form_TwinTriggerFieldConfig$triggerConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['triggerConfig'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_form_TwinTriggerFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_form_TwinTriggerFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_form_TwinTriggerFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_form_TwinTriggerFieldConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_form_TwinTriggerFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vtype: function Ext_form_TwinTriggerFieldConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_form_TwinTriggerFieldConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_form_TwinTriggerFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wrapFocusClass: function Ext_form_TwinTriggerFieldConfig$wrapFocusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['wrapFocusClass'] = value;
        return this;
    },
    
    x: function Ext_form_TwinTriggerFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_form_TwinTriggerFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_form_TwinTriggerFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.form.TwinTriggerFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.grid');

////////////////////////////////////////////////////////////////////////////////
// Ext.grid.AbstractSelectionModelConfig

Ext.grid.AbstractSelectionModelConfig = function Ext_grid_AbstractSelectionModelConfig() {
    Ext.grid.AbstractSelectionModelConfig.initializeBase(this);
}
Ext.grid.AbstractSelectionModelConfig.prototype = {
    
    listeners: function Ext_grid_AbstractSelectionModelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.AbstractSelectionModelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.ActionColumnConfig

Ext.grid.ActionColumnConfig = function Ext_grid_ActionColumnConfig() {
    Ext.grid.ActionColumnConfig.initializeBase(this);
}
Ext.grid.ActionColumnConfig.prototype = {
    
    align: function Ext_grid_ActionColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    altText: function Ext_grid_ActionColumnConfig$altText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['altText'] = value;
        return this;
    },
    
    css: function Ext_grid_ActionColumnConfig$css(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['css'] = value;
        return this;
    },
    
    dataIndex: function Ext_grid_ActionColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    editable: function Ext_grid_ActionColumnConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    editor: function Ext_grid_ActionColumnConfig$editor(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['editor'] = value;
        return this;
    },
    
    emptyGroupText: function Ext_grid_ActionColumnConfig$emptyGroupText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['emptyGroupText'] = value;
        return this;
    },
    
    fixed_: function Ext_grid_ActionColumnConfig$fixed_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['fixed'] = value;
        return this;
    },
    
    getClass: function Ext_grid_ActionColumnConfig$getClass(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['getClass'] = value;
        return this;
    },
    
    groupName: function Ext_grid_ActionColumnConfig$groupName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['groupName'] = value;
        return this;
    },
    
    groupRenderer: function Ext_grid_ActionColumnConfig$groupRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['groupRenderer'] = value;
        return this;
    },
    
    groupable: function Ext_grid_ActionColumnConfig$groupable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['groupable'] = value;
        return this;
    },
    
    handler: function Ext_grid_ActionColumnConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    header: function Ext_grid_ActionColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    hidden: function Ext_grid_ActionColumnConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideable: function Ext_grid_ActionColumnConfig$hideable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['hideable'] = value;
        return this;
    },
    
    icon: function Ext_grid_ActionColumnConfig$icon(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['icon'] = value;
        return this;
    },
    
    iconCls: function Ext_grid_ActionColumnConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_grid_ActionColumnConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    items: function Ext_grid_ActionColumnConfig$items(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    listeners: function Ext_grid_ActionColumnConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menuDisabled: function Ext_grid_ActionColumnConfig$menuDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['menuDisabled'] = value;
        return this;
    },
    
    renderer: function Ext_grid_ActionColumnConfig$renderer(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['renderer'] = value;
        return this;
    },
    
    resizable: function Ext_grid_ActionColumnConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    scope: function Ext_grid_ActionColumnConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    sortable: function Ext_grid_ActionColumnConfig$sortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['sortable'] = value;
        return this;
    },
    
    stopSelection: function Ext_grid_ActionColumnConfig$stopSelection(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['stopSelection'] = value;
        return this;
    },
    
    tooltip: function Ext_grid_ActionColumnConfig$tooltip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    width: function Ext_grid_ActionColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    xtype: function Ext_grid_ActionColumnConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ActionColumnConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.BooleanColumnConfig

Ext.grid.BooleanColumnConfig = function Ext_grid_BooleanColumnConfig() {
    Ext.grid.BooleanColumnConfig.initializeBase(this);
}
Ext.grid.BooleanColumnConfig.prototype = {
    
    align: function Ext_grid_BooleanColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    css: function Ext_grid_BooleanColumnConfig$css(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['css'] = value;
        return this;
    },
    
    dataIndex: function Ext_grid_BooleanColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    editable: function Ext_grid_BooleanColumnConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    editor: function Ext_grid_BooleanColumnConfig$editor(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['editor'] = value;
        return this;
    },
    
    emptyGroupText: function Ext_grid_BooleanColumnConfig$emptyGroupText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['emptyGroupText'] = value;
        return this;
    },
    
    falseText: function Ext_grid_BooleanColumnConfig$falseText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['falseText'] = value;
        return this;
    },
    
    fixed_: function Ext_grid_BooleanColumnConfig$fixed_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['fixed'] = value;
        return this;
    },
    
    groupName: function Ext_grid_BooleanColumnConfig$groupName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['groupName'] = value;
        return this;
    },
    
    groupRenderer: function Ext_grid_BooleanColumnConfig$groupRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['groupRenderer'] = value;
        return this;
    },
    
    groupable: function Ext_grid_BooleanColumnConfig$groupable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['groupable'] = value;
        return this;
    },
    
    header: function Ext_grid_BooleanColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    hidden: function Ext_grid_BooleanColumnConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideable: function Ext_grid_BooleanColumnConfig$hideable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['hideable'] = value;
        return this;
    },
    
    id: function Ext_grid_BooleanColumnConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    listeners: function Ext_grid_BooleanColumnConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menuDisabled: function Ext_grid_BooleanColumnConfig$menuDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['menuDisabled'] = value;
        return this;
    },
    
    renderer: function Ext_grid_BooleanColumnConfig$renderer(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['renderer'] = value;
        return this;
    },
    
    resizable: function Ext_grid_BooleanColumnConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    scope: function Ext_grid_BooleanColumnConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    sortable: function Ext_grid_BooleanColumnConfig$sortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['sortable'] = value;
        return this;
    },
    
    tooltip: function Ext_grid_BooleanColumnConfig$tooltip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    trueText: function Ext_grid_BooleanColumnConfig$trueText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['trueText'] = value;
        return this;
    },
    
    undefinedText: function Ext_grid_BooleanColumnConfig$undefinedText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['undefinedText'] = value;
        return this;
    },
    
    width: function Ext_grid_BooleanColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    xtype: function Ext_grid_BooleanColumnConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.BooleanColumnConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.CellSelectionModelConfig

Ext.grid.CellSelectionModelConfig = function Ext_grid_CellSelectionModelConfig() {
    Ext.grid.CellSelectionModelConfig.initializeBase(this);
}
Ext.grid.CellSelectionModelConfig.prototype = {
    
    listeners: function Ext_grid_CellSelectionModelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.CellSelectionModelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.CheckboxSelectionModelConfig

Ext.grid.CheckboxSelectionModelConfig = function Ext_grid_CheckboxSelectionModelConfig() {
    Ext.grid.CheckboxSelectionModelConfig.initializeBase(this);
}
Ext.grid.CheckboxSelectionModelConfig.prototype = {
    
    checkOnly: function Ext_grid_CheckboxSelectionModelConfig$checkOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.CheckboxSelectionModelConfig"></returns>
        this.o['checkOnly'] = value;
        return this;
    },
    
    header: function Ext_grid_CheckboxSelectionModelConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.CheckboxSelectionModelConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    listeners: function Ext_grid_CheckboxSelectionModelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.CheckboxSelectionModelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    moveEditorOnEnter: function Ext_grid_CheckboxSelectionModelConfig$moveEditorOnEnter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.CheckboxSelectionModelConfig"></returns>
        this.o['moveEditorOnEnter'] = value;
        return this;
    },
    
    singleSelect: function Ext_grid_CheckboxSelectionModelConfig$singleSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.CheckboxSelectionModelConfig"></returns>
        this.o['singleSelect'] = value;
        return this;
    },
    
    sortable: function Ext_grid_CheckboxSelectionModelConfig$sortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.CheckboxSelectionModelConfig"></returns>
        this.o['sortable'] = value;
        return this;
    },
    
    width: function Ext_grid_CheckboxSelectionModelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.CheckboxSelectionModelConfig"></returns>
        this.o['width'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.ColumnConfig

Ext.grid.ColumnConfig = function Ext_grid_ColumnConfig() {
    Ext.grid.ColumnConfig.initializeBase(this);
}
Ext.grid.ColumnConfig.prototype = {
    
    align: function Ext_grid_ColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    css: function Ext_grid_ColumnConfig$css(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['css'] = value;
        return this;
    },
    
    dataIndex: function Ext_grid_ColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    editable: function Ext_grid_ColumnConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    editor: function Ext_grid_ColumnConfig$editor(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['editor'] = value;
        return this;
    },
    
    emptyGroupText: function Ext_grid_ColumnConfig$emptyGroupText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['emptyGroupText'] = value;
        return this;
    },
    
    fixed_: function Ext_grid_ColumnConfig$fixed_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['fixed'] = value;
        return this;
    },
    
    groupName: function Ext_grid_ColumnConfig$groupName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['groupName'] = value;
        return this;
    },
    
    groupRenderer: function Ext_grid_ColumnConfig$groupRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['groupRenderer'] = value;
        return this;
    },
    
    groupable: function Ext_grid_ColumnConfig$groupable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['groupable'] = value;
        return this;
    },
    
    header: function Ext_grid_ColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    hidden: function Ext_grid_ColumnConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideable: function Ext_grid_ColumnConfig$hideable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['hideable'] = value;
        return this;
    },
    
    id: function Ext_grid_ColumnConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    listeners: function Ext_grid_ColumnConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menuDisabled: function Ext_grid_ColumnConfig$menuDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['menuDisabled'] = value;
        return this;
    },
    
    renderer: function Ext_grid_ColumnConfig$renderer(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['renderer'] = value;
        return this;
    },
    
    resizable: function Ext_grid_ColumnConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    scope: function Ext_grid_ColumnConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    sortable: function Ext_grid_ColumnConfig$sortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['sortable'] = value;
        return this;
    },
    
    tooltip: function Ext_grid_ColumnConfig$tooltip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    width: function Ext_grid_ColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    xtype: function Ext_grid_ColumnConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.ColumnConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.ColumnModelConfig

Ext.grid.ColumnModelConfig = function Ext_grid_ColumnModelConfig() {
    Ext.grid.ColumnModelConfig.initializeBase(this);
}
Ext.grid.ColumnModelConfig.prototype = {
    
    columns: function Ext_grid_ColumnModelConfig$columns(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.ColumnModelConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    defaultSortable: function Ext_grid_ColumnModelConfig$defaultSortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.ColumnModelConfig"></returns>
        this.o['defaultSortable'] = value;
        return this;
    },
    
    defaultWidth: function Ext_grid_ColumnModelConfig$defaultWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.ColumnModelConfig"></returns>
        this.o['defaultWidth'] = value;
        return this;
    },
    
    defaults: function Ext_grid_ColumnModelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.ColumnModelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    listeners: function Ext_grid_ColumnModelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.ColumnModelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.DateColumnConfig

Ext.grid.DateColumnConfig = function Ext_grid_DateColumnConfig() {
    Ext.grid.DateColumnConfig.initializeBase(this);
}
Ext.grid.DateColumnConfig.prototype = {
    
    align: function Ext_grid_DateColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    css: function Ext_grid_DateColumnConfig$css(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['css'] = value;
        return this;
    },
    
    dataIndex: function Ext_grid_DateColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    editable: function Ext_grid_DateColumnConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    editor: function Ext_grid_DateColumnConfig$editor(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['editor'] = value;
        return this;
    },
    
    emptyGroupText: function Ext_grid_DateColumnConfig$emptyGroupText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['emptyGroupText'] = value;
        return this;
    },
    
    fixed_: function Ext_grid_DateColumnConfig$fixed_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['fixed'] = value;
        return this;
    },
    
    format: function Ext_grid_DateColumnConfig$format(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['format'] = value;
        return this;
    },
    
    groupName: function Ext_grid_DateColumnConfig$groupName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['groupName'] = value;
        return this;
    },
    
    groupRenderer: function Ext_grid_DateColumnConfig$groupRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['groupRenderer'] = value;
        return this;
    },
    
    groupable: function Ext_grid_DateColumnConfig$groupable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['groupable'] = value;
        return this;
    },
    
    header: function Ext_grid_DateColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    hidden: function Ext_grid_DateColumnConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideable: function Ext_grid_DateColumnConfig$hideable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['hideable'] = value;
        return this;
    },
    
    id: function Ext_grid_DateColumnConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    listeners: function Ext_grid_DateColumnConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menuDisabled: function Ext_grid_DateColumnConfig$menuDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['menuDisabled'] = value;
        return this;
    },
    
    renderer: function Ext_grid_DateColumnConfig$renderer(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['renderer'] = value;
        return this;
    },
    
    resizable: function Ext_grid_DateColumnConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    scope: function Ext_grid_DateColumnConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    sortable: function Ext_grid_DateColumnConfig$sortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['sortable'] = value;
        return this;
    },
    
    tooltip: function Ext_grid_DateColumnConfig$tooltip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    width: function Ext_grid_DateColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    xtype: function Ext_grid_DateColumnConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.DateColumnConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.EditorGridPanelConfig

Ext.grid.EditorGridPanelConfig = function Ext_grid_EditorGridPanelConfig() {
    Ext.grid.EditorGridPanelConfig.initializeBase(this);
}
Ext.grid.EditorGridPanelConfig.prototype = {
    
    activeItem: function Ext_grid_EditorGridPanelConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_grid_EditorGridPanelConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_grid_EditorGridPanelConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_grid_EditorGridPanelConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_grid_EditorGridPanelConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_grid_EditorGridPanelConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_grid_EditorGridPanelConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoEncode: function Ext_grid_EditorGridPanelConfig$autoEncode(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoEncode'] = value;
        return this;
    },
    
    autoExpandColumn: function Ext_grid_EditorGridPanelConfig$autoExpandColumn(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoExpandColumn'] = value;
        return this;
    },
    
    autoExpandMax: function Ext_grid_EditorGridPanelConfig$autoExpandMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoExpandMax'] = value;
        return this;
    },
    
    autoExpandMin: function Ext_grid_EditorGridPanelConfig$autoExpandMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoExpandMin'] = value;
        return this;
    },
    
    autoHeight: function Ext_grid_EditorGridPanelConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_grid_EditorGridPanelConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_grid_EditorGridPanelConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_grid_EditorGridPanelConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_grid_EditorGridPanelConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_grid_EditorGridPanelConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_grid_EditorGridPanelConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_grid_EditorGridPanelConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_grid_EditorGridPanelConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_grid_EditorGridPanelConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_grid_EditorGridPanelConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_grid_EditorGridPanelConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_grid_EditorGridPanelConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_grid_EditorGridPanelConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_grid_EditorGridPanelConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_grid_EditorGridPanelConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_grid_EditorGridPanelConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_grid_EditorGridPanelConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_grid_EditorGridPanelConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_grid_EditorGridPanelConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_grid_EditorGridPanelConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_grid_EditorGridPanelConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_grid_EditorGridPanelConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clicksToEdit: function Ext_grid_EditorGridPanelConfig$clicksToEdit(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['clicksToEdit'] = value;
        return this;
    },
    
    closable: function Ext_grid_EditorGridPanelConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_grid_EditorGridPanelConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    cm: function Ext_grid_EditorGridPanelConfig$cm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['cm'] = value;
        return this;
    },
    
    colModel: function Ext_grid_EditorGridPanelConfig$colModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['colModel'] = value;
        return this;
    },
    
    collapseFirst: function Ext_grid_EditorGridPanelConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_grid_EditorGridPanelConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_grid_EditorGridPanelConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_grid_EditorGridPanelConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    columnLines: function Ext_grid_EditorGridPanelConfig$columnLines(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['columnLines'] = value;
        return this;
    },
    
    columns: function Ext_grid_EditorGridPanelConfig$columns(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    contentEl: function Ext_grid_EditorGridPanelConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_grid_EditorGridPanelConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_grid_EditorGridPanelConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    ddGroup: function Ext_grid_EditorGridPanelConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    ddText: function Ext_grid_EditorGridPanelConfig$ddText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['ddText'] = value;
        return this;
    },
    
    defaultType: function Ext_grid_EditorGridPanelConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_grid_EditorGridPanelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    deferRowRender: function Ext_grid_EditorGridPanelConfig$deferRowRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['deferRowRender'] = value;
        return this;
    },
    
    disableSelection: function Ext_grid_EditorGridPanelConfig$disableSelection(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['disableSelection'] = value;
        return this;
    },
    
    disabled: function Ext_grid_EditorGridPanelConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_grid_EditorGridPanelConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_grid_EditorGridPanelConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_grid_EditorGridPanelConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableColumnHide: function Ext_grid_EditorGridPanelConfig$enableColumnHide(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['enableColumnHide'] = value;
        return this;
    },
    
    enableColumnMove: function Ext_grid_EditorGridPanelConfig$enableColumnMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['enableColumnMove'] = value;
        return this;
    },
    
    enableColumnResize: function Ext_grid_EditorGridPanelConfig$enableColumnResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['enableColumnResize'] = value;
        return this;
    },
    
    enableDragDrop: function Ext_grid_EditorGridPanelConfig$enableDragDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['enableDragDrop'] = value;
        return this;
    },
    
    enableHdMenu: function Ext_grid_EditorGridPanelConfig$enableHdMenu(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['enableHdMenu'] = value;
        return this;
    },
    
    fbar: function Ext_grid_EditorGridPanelConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_grid_EditorGridPanelConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_grid_EditorGridPanelConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_grid_EditorGridPanelConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_grid_EditorGridPanelConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_grid_EditorGridPanelConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_grid_EditorGridPanelConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    forceValidation: function Ext_grid_EditorGridPanelConfig$forceValidation(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['forceValidation'] = value;
        return this;
    },
    
    frame: function Ext_grid_EditorGridPanelConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_grid_EditorGridPanelConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_grid_EditorGridPanelConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_grid_EditorGridPanelConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_grid_EditorGridPanelConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_grid_EditorGridPanelConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_grid_EditorGridPanelConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_grid_EditorGridPanelConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideHeaders: function Ext_grid_EditorGridPanelConfig$hideHeaders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['hideHeaders'] = value;
        return this;
    },
    
    hideLabel: function Ext_grid_EditorGridPanelConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_grid_EditorGridPanelConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_grid_EditorGridPanelConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_grid_EditorGridPanelConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_grid_EditorGridPanelConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_grid_EditorGridPanelConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_grid_EditorGridPanelConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_grid_EditorGridPanelConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_grid_EditorGridPanelConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_grid_EditorGridPanelConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_grid_EditorGridPanelConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_grid_EditorGridPanelConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_grid_EditorGridPanelConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_grid_EditorGridPanelConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_grid_EditorGridPanelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadMask: function Ext_grid_EditorGridPanelConfig$loadMask(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['loadMask'] = value;
        return this;
    },
    
    margins: function Ext_grid_EditorGridPanelConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_grid_EditorGridPanelConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maxHeight: function Ext_grid_EditorGridPanelConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_grid_EditorGridPanelConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minColumnWidth: function Ext_grid_EditorGridPanelConfig$minColumnWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['minColumnWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_grid_EditorGridPanelConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_grid_EditorGridPanelConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_grid_EditorGridPanelConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_grid_EditorGridPanelConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_grid_EditorGridPanelConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_grid_EditorGridPanelConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_grid_EditorGridPanelConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_grid_EditorGridPanelConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_grid_EditorGridPanelConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_grid_EditorGridPanelConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_grid_EditorGridPanelConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_grid_EditorGridPanelConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    selModel: function Ext_grid_EditorGridPanelConfig$selModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['selModel'] = value;
        return this;
    },
    
    shadow: function Ext_grid_EditorGridPanelConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_grid_EditorGridPanelConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_grid_EditorGridPanelConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    sm: function Ext_grid_EditorGridPanelConfig$sm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['sm'] = value;
        return this;
    },
    
    stateEvents: function Ext_grid_EditorGridPanelConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_grid_EditorGridPanelConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_grid_EditorGridPanelConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_grid_EditorGridPanelConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    stripeRows: function Ext_grid_EditorGridPanelConfig$stripeRows(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['stripeRows'] = value;
        return this;
    },
    
    style: function Ext_grid_EditorGridPanelConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_grid_EditorGridPanelConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_grid_EditorGridPanelConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_grid_EditorGridPanelConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_grid_EditorGridPanelConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_grid_EditorGridPanelConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_grid_EditorGridPanelConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_grid_EditorGridPanelConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_grid_EditorGridPanelConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_grid_EditorGridPanelConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouseOver: function Ext_grid_EditorGridPanelConfig$trackMouseOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['trackMouseOver'] = value;
        return this;
    },
    
    unstyled: function Ext_grid_EditorGridPanelConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    view: function Ext_grid_EditorGridPanelConfig$view(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['view'] = value;
        return this;
    },
    
    viewConfig: function Ext_grid_EditorGridPanelConfig$viewConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['viewConfig'] = value;
        return this;
    },
    
    width: function Ext_grid_EditorGridPanelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_grid_EditorGridPanelConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_grid_EditorGridPanelConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_grid_EditorGridPanelConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.EditorGridPanelConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.GridDragZoneConfig

Ext.grid.GridDragZoneConfig = function Ext_grid_GridDragZoneConfig() {
    Ext.grid.GridDragZoneConfig.initializeBase(this);
}
Ext.grid.GridDragZoneConfig.prototype = {
    
    containerScroll: function Ext_grid_GridDragZoneConfig$containerScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridDragZoneConfig"></returns>
        this.o['containerScroll'] = value;
        return this;
    },
    
    ddGroup: function Ext_grid_GridDragZoneConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridDragZoneConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    dropAllowed: function Ext_grid_GridDragZoneConfig$dropAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridDragZoneConfig"></returns>
        this.o['dropAllowed'] = value;
        return this;
    },
    
    dropNotAllowed: function Ext_grid_GridDragZoneConfig$dropNotAllowed(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridDragZoneConfig"></returns>
        this.o['dropNotAllowed'] = value;
        return this;
    },
    
    hlColor: function Ext_grid_GridDragZoneConfig$hlColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridDragZoneConfig"></returns>
        this.o['hlColor'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.GridPanelConfig

Ext.grid.GridPanelConfig = function Ext_grid_GridPanelConfig() {
    Ext.grid.GridPanelConfig.initializeBase(this);
}
Ext.grid.GridPanelConfig.prototype = {
    
    activeItem: function Ext_grid_GridPanelConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_grid_GridPanelConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_grid_GridPanelConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_grid_GridPanelConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_grid_GridPanelConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_grid_GridPanelConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_grid_GridPanelConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoExpandColumn: function Ext_grid_GridPanelConfig$autoExpandColumn(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoExpandColumn'] = value;
        return this;
    },
    
    autoExpandMax: function Ext_grid_GridPanelConfig$autoExpandMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoExpandMax'] = value;
        return this;
    },
    
    autoExpandMin: function Ext_grid_GridPanelConfig$autoExpandMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoExpandMin'] = value;
        return this;
    },
    
    autoHeight: function Ext_grid_GridPanelConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_grid_GridPanelConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_grid_GridPanelConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_grid_GridPanelConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_grid_GridPanelConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_grid_GridPanelConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_grid_GridPanelConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_grid_GridPanelConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_grid_GridPanelConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_grid_GridPanelConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_grid_GridPanelConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_grid_GridPanelConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_grid_GridPanelConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_grid_GridPanelConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_grid_GridPanelConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_grid_GridPanelConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_grid_GridPanelConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_grid_GridPanelConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_grid_GridPanelConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_grid_GridPanelConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_grid_GridPanelConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_grid_GridPanelConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_grid_GridPanelConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_grid_GridPanelConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_grid_GridPanelConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    cm: function Ext_grid_GridPanelConfig$cm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['cm'] = value;
        return this;
    },
    
    colModel: function Ext_grid_GridPanelConfig$colModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['colModel'] = value;
        return this;
    },
    
    collapseFirst: function Ext_grid_GridPanelConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_grid_GridPanelConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_grid_GridPanelConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_grid_GridPanelConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    columnLines: function Ext_grid_GridPanelConfig$columnLines(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['columnLines'] = value;
        return this;
    },
    
    columns: function Ext_grid_GridPanelConfig$columns(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    contentEl: function Ext_grid_GridPanelConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_grid_GridPanelConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_grid_GridPanelConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    ddGroup: function Ext_grid_GridPanelConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    ddText: function Ext_grid_GridPanelConfig$ddText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['ddText'] = value;
        return this;
    },
    
    defaultType: function Ext_grid_GridPanelConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_grid_GridPanelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    deferRowRender: function Ext_grid_GridPanelConfig$deferRowRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['deferRowRender'] = value;
        return this;
    },
    
    disableSelection: function Ext_grid_GridPanelConfig$disableSelection(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['disableSelection'] = value;
        return this;
    },
    
    disabled: function Ext_grid_GridPanelConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_grid_GridPanelConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_grid_GridPanelConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_grid_GridPanelConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableColumnHide: function Ext_grid_GridPanelConfig$enableColumnHide(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['enableColumnHide'] = value;
        return this;
    },
    
    enableColumnMove: function Ext_grid_GridPanelConfig$enableColumnMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['enableColumnMove'] = value;
        return this;
    },
    
    enableColumnResize: function Ext_grid_GridPanelConfig$enableColumnResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['enableColumnResize'] = value;
        return this;
    },
    
    enableDragDrop: function Ext_grid_GridPanelConfig$enableDragDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['enableDragDrop'] = value;
        return this;
    },
    
    enableHdMenu: function Ext_grid_GridPanelConfig$enableHdMenu(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['enableHdMenu'] = value;
        return this;
    },
    
    fbar: function Ext_grid_GridPanelConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_grid_GridPanelConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_grid_GridPanelConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_grid_GridPanelConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_grid_GridPanelConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_grid_GridPanelConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_grid_GridPanelConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_grid_GridPanelConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_grid_GridPanelConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_grid_GridPanelConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_grid_GridPanelConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_grid_GridPanelConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_grid_GridPanelConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_grid_GridPanelConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_grid_GridPanelConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideHeaders: function Ext_grid_GridPanelConfig$hideHeaders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['hideHeaders'] = value;
        return this;
    },
    
    hideLabel: function Ext_grid_GridPanelConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_grid_GridPanelConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_grid_GridPanelConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_grid_GridPanelConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_grid_GridPanelConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_grid_GridPanelConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_grid_GridPanelConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_grid_GridPanelConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_grid_GridPanelConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_grid_GridPanelConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_grid_GridPanelConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_grid_GridPanelConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_grid_GridPanelConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_grid_GridPanelConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_grid_GridPanelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadMask: function Ext_grid_GridPanelConfig$loadMask(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['loadMask'] = value;
        return this;
    },
    
    margins: function Ext_grid_GridPanelConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_grid_GridPanelConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maxHeight: function Ext_grid_GridPanelConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_grid_GridPanelConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minColumnWidth: function Ext_grid_GridPanelConfig$minColumnWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['minColumnWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_grid_GridPanelConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_grid_GridPanelConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_grid_GridPanelConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_grid_GridPanelConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_grid_GridPanelConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_grid_GridPanelConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_grid_GridPanelConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_grid_GridPanelConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_grid_GridPanelConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_grid_GridPanelConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_grid_GridPanelConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_grid_GridPanelConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    selModel: function Ext_grid_GridPanelConfig$selModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['selModel'] = value;
        return this;
    },
    
    shadow: function Ext_grid_GridPanelConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_grid_GridPanelConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_grid_GridPanelConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    sm: function Ext_grid_GridPanelConfig$sm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['sm'] = value;
        return this;
    },
    
    stateEvents: function Ext_grid_GridPanelConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_grid_GridPanelConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_grid_GridPanelConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_grid_GridPanelConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    stripeRows: function Ext_grid_GridPanelConfig$stripeRows(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['stripeRows'] = value;
        return this;
    },
    
    style: function Ext_grid_GridPanelConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_grid_GridPanelConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_grid_GridPanelConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_grid_GridPanelConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_grid_GridPanelConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_grid_GridPanelConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_grid_GridPanelConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_grid_GridPanelConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_grid_GridPanelConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_grid_GridPanelConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouseOver: function Ext_grid_GridPanelConfig$trackMouseOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['trackMouseOver'] = value;
        return this;
    },
    
    unstyled: function Ext_grid_GridPanelConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    view: function Ext_grid_GridPanelConfig$view(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['view'] = value;
        return this;
    },
    
    viewConfig: function Ext_grid_GridPanelConfig$viewConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['viewConfig'] = value;
        return this;
    },
    
    width: function Ext_grid_GridPanelConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_grid_GridPanelConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_grid_GridPanelConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_grid_GridPanelConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridPanelConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.GridViewConfig

Ext.grid.GridViewConfig = function Ext_grid_GridViewConfig() {
    Ext.grid.GridViewConfig.initializeBase(this);
}
Ext.grid.GridViewConfig.prototype = {
    
    autoFill: function Ext_grid_GridViewConfig$autoFill(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['autoFill'] = value;
        return this;
    },
    
    cellSelector: function Ext_grid_GridViewConfig$cellSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['cellSelector'] = value;
        return this;
    },
    
    cellSelectorDepth: function Ext_grid_GridViewConfig$cellSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['cellSelectorDepth'] = value;
        return this;
    },
    
    columnsText: function Ext_grid_GridViewConfig$columnsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['columnsText'] = value;
        return this;
    },
    
    deferEmptyText: function Ext_grid_GridViewConfig$deferEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['deferEmptyText'] = value;
        return this;
    },
    
    emptyText: function Ext_grid_GridViewConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableRowBody: function Ext_grid_GridViewConfig$enableRowBody(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['enableRowBody'] = value;
        return this;
    },
    
    forceFit: function Ext_grid_GridViewConfig$forceFit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['forceFit'] = value;
        return this;
    },
    
    headerMenuOpenCls: function Ext_grid_GridViewConfig$headerMenuOpenCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['headerMenuOpenCls'] = value;
        return this;
    },
    
    headersDisabled: function Ext_grid_GridViewConfig$headersDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['headersDisabled'] = value;
        return this;
    },
    
    listeners: function Ext_grid_GridViewConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    markDirty: function Ext_grid_GridViewConfig$markDirty(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['markDirty'] = value;
        return this;
    },
    
    rowBodySelector: function Ext_grid_GridViewConfig$rowBodySelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['rowBodySelector'] = value;
        return this;
    },
    
    rowBodySelectorDepth: function Ext_grid_GridViewConfig$rowBodySelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['rowBodySelectorDepth'] = value;
        return this;
    },
    
    rowOverCls: function Ext_grid_GridViewConfig$rowOverCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['rowOverCls'] = value;
        return this;
    },
    
    rowSelector: function Ext_grid_GridViewConfig$rowSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['rowSelector'] = value;
        return this;
    },
    
    rowSelectorDepth: function Ext_grid_GridViewConfig$rowSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['rowSelectorDepth'] = value;
        return this;
    },
    
    scrollOffset: function Ext_grid_GridViewConfig$scrollOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['scrollOffset'] = value;
        return this;
    },
    
    sortAscText: function Ext_grid_GridViewConfig$sortAscText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['sortAscText'] = value;
        return this;
    },
    
    sortClasses: function Ext_grid_GridViewConfig$sortClasses(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['sortClasses'] = value;
        return this;
    },
    
    sortDescText: function Ext_grid_GridViewConfig$sortDescText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GridViewConfig"></returns>
        this.o['sortDescText'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.GroupingViewConfig

Ext.grid.GroupingViewConfig = function Ext_grid_GroupingViewConfig() {
    Ext.grid.GroupingViewConfig.initializeBase(this);
}
Ext.grid.GroupingViewConfig.prototype = {
    
    autoFill: function Ext_grid_GroupingViewConfig$autoFill(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['autoFill'] = value;
        return this;
    },
    
    cancelEditOnToggle: function Ext_grid_GroupingViewConfig$cancelEditOnToggle(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['cancelEditOnToggle'] = value;
        return this;
    },
    
    cellSelector: function Ext_grid_GroupingViewConfig$cellSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['cellSelector'] = value;
        return this;
    },
    
    cellSelectorDepth: function Ext_grid_GroupingViewConfig$cellSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['cellSelectorDepth'] = value;
        return this;
    },
    
    columnsText: function Ext_grid_GroupingViewConfig$columnsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['columnsText'] = value;
        return this;
    },
    
    deferEmptyText: function Ext_grid_GroupingViewConfig$deferEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['deferEmptyText'] = value;
        return this;
    },
    
    emptyGroupText: function Ext_grid_GroupingViewConfig$emptyGroupText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['emptyGroupText'] = value;
        return this;
    },
    
    emptyText: function Ext_grid_GroupingViewConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableGrouping: function Ext_grid_GroupingViewConfig$enableGrouping(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['enableGrouping'] = value;
        return this;
    },
    
    enableGroupingMenu: function Ext_grid_GroupingViewConfig$enableGroupingMenu(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['enableGroupingMenu'] = value;
        return this;
    },
    
    enableNoGroups: function Ext_grid_GroupingViewConfig$enableNoGroups(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['enableNoGroups'] = value;
        return this;
    },
    
    enableRowBody: function Ext_grid_GroupingViewConfig$enableRowBody(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['enableRowBody'] = value;
        return this;
    },
    
    forceFit: function Ext_grid_GroupingViewConfig$forceFit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['forceFit'] = value;
        return this;
    },
    
    groupByText: function Ext_grid_GroupingViewConfig$groupByText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['groupByText'] = value;
        return this;
    },
    
    groupMode: function Ext_grid_GroupingViewConfig$groupMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['groupMode'] = value;
        return this;
    },
    
    groupRenderer: function Ext_grid_GroupingViewConfig$groupRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['groupRenderer'] = value;
        return this;
    },
    
    groupTextTpl: function Ext_grid_GroupingViewConfig$groupTextTpl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['groupTextTpl'] = value;
        return this;
    },
    
    headerMenuOpenCls: function Ext_grid_GroupingViewConfig$headerMenuOpenCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['headerMenuOpenCls'] = value;
        return this;
    },
    
    headersDisabled: function Ext_grid_GroupingViewConfig$headersDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['headersDisabled'] = value;
        return this;
    },
    
    hideGroupedColumn: function Ext_grid_GroupingViewConfig$hideGroupedColumn(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['hideGroupedColumn'] = value;
        return this;
    },
    
    ignoreAdd: function Ext_grid_GroupingViewConfig$ignoreAdd(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['ignoreAdd'] = value;
        return this;
    },
    
    listeners: function Ext_grid_GroupingViewConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    markDirty: function Ext_grid_GroupingViewConfig$markDirty(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['markDirty'] = value;
        return this;
    },
    
    rowBodySelector: function Ext_grid_GroupingViewConfig$rowBodySelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['rowBodySelector'] = value;
        return this;
    },
    
    rowBodySelectorDepth: function Ext_grid_GroupingViewConfig$rowBodySelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['rowBodySelectorDepth'] = value;
        return this;
    },
    
    rowOverCls: function Ext_grid_GroupingViewConfig$rowOverCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['rowOverCls'] = value;
        return this;
    },
    
    rowSelector: function Ext_grid_GroupingViewConfig$rowSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['rowSelector'] = value;
        return this;
    },
    
    rowSelectorDepth: function Ext_grid_GroupingViewConfig$rowSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['rowSelectorDepth'] = value;
        return this;
    },
    
    scrollOffset: function Ext_grid_GroupingViewConfig$scrollOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['scrollOffset'] = value;
        return this;
    },
    
    showGroupName: function Ext_grid_GroupingViewConfig$showGroupName(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['showGroupName'] = value;
        return this;
    },
    
    showGroupsText: function Ext_grid_GroupingViewConfig$showGroupsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['showGroupsText'] = value;
        return this;
    },
    
    sortAscText: function Ext_grid_GroupingViewConfig$sortAscText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['sortAscText'] = value;
        return this;
    },
    
    sortClasses: function Ext_grid_GroupingViewConfig$sortClasses(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['sortClasses'] = value;
        return this;
    },
    
    sortDescText: function Ext_grid_GroupingViewConfig$sortDescText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['sortDescText'] = value;
        return this;
    },
    
    startCollapsed: function Ext_grid_GroupingViewConfig$startCollapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.GroupingViewConfig"></returns>
        this.o['startCollapsed'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.NumberColumnConfig

Ext.grid.NumberColumnConfig = function Ext_grid_NumberColumnConfig() {
    Ext.grid.NumberColumnConfig.initializeBase(this);
}
Ext.grid.NumberColumnConfig.prototype = {
    
    align: function Ext_grid_NumberColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    css: function Ext_grid_NumberColumnConfig$css(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['css'] = value;
        return this;
    },
    
    dataIndex: function Ext_grid_NumberColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    editable: function Ext_grid_NumberColumnConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    editor: function Ext_grid_NumberColumnConfig$editor(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['editor'] = value;
        return this;
    },
    
    emptyGroupText: function Ext_grid_NumberColumnConfig$emptyGroupText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['emptyGroupText'] = value;
        return this;
    },
    
    fixed_: function Ext_grid_NumberColumnConfig$fixed_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['fixed'] = value;
        return this;
    },
    
    format: function Ext_grid_NumberColumnConfig$format(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['format'] = value;
        return this;
    },
    
    groupName: function Ext_grid_NumberColumnConfig$groupName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['groupName'] = value;
        return this;
    },
    
    groupRenderer: function Ext_grid_NumberColumnConfig$groupRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['groupRenderer'] = value;
        return this;
    },
    
    groupable: function Ext_grid_NumberColumnConfig$groupable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['groupable'] = value;
        return this;
    },
    
    header: function Ext_grid_NumberColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    hidden: function Ext_grid_NumberColumnConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideable: function Ext_grid_NumberColumnConfig$hideable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['hideable'] = value;
        return this;
    },
    
    id: function Ext_grid_NumberColumnConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    listeners: function Ext_grid_NumberColumnConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menuDisabled: function Ext_grid_NumberColumnConfig$menuDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['menuDisabled'] = value;
        return this;
    },
    
    renderer: function Ext_grid_NumberColumnConfig$renderer(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['renderer'] = value;
        return this;
    },
    
    resizable: function Ext_grid_NumberColumnConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    scope: function Ext_grid_NumberColumnConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    sortable: function Ext_grid_NumberColumnConfig$sortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['sortable'] = value;
        return this;
    },
    
    tooltip: function Ext_grid_NumberColumnConfig$tooltip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    width: function Ext_grid_NumberColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    xtype: function Ext_grid_NumberColumnConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.NumberColumnConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.PivotAxisConfig

Ext.grid.PivotAxisConfig = function Ext_grid_PivotAxisConfig() {
    Ext.grid.PivotAxisConfig.initializeBase(this);
}
Ext.grid.PivotAxisConfig.prototype = {
    
    allowDomMove: function Ext_grid_PivotAxisConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_grid_PivotAxisConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_grid_PivotAxisConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_grid_PivotAxisConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_grid_PivotAxisConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_grid_PivotAxisConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_grid_PivotAxisConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_grid_PivotAxisConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_grid_PivotAxisConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_grid_PivotAxisConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultHeaderWidth: function Ext_grid_PivotAxisConfig$defaultHeaderWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['defaultHeaderWidth'] = value;
        return this;
    },
    
    disabled: function Ext_grid_PivotAxisConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_grid_PivotAxisConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_grid_PivotAxisConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    hidden: function Ext_grid_PivotAxisConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_grid_PivotAxisConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_grid_PivotAxisConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_grid_PivotAxisConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_grid_PivotAxisConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_grid_PivotAxisConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_grid_PivotAxisConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_grid_PivotAxisConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_grid_PivotAxisConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_grid_PivotAxisConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_grid_PivotAxisConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    orientation: function Ext_grid_PivotAxisConfig$orientation(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['orientation'] = value;
        return this;
    },
    
    overCls: function Ext_grid_PivotAxisConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_grid_PivotAxisConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_grid_PivotAxisConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_grid_PivotAxisConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_grid_PivotAxisConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_grid_PivotAxisConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_grid_PivotAxisConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_grid_PivotAxisConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_grid_PivotAxisConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tpl: function Ext_grid_PivotAxisConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_grid_PivotAxisConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    xtype: function Ext_grid_PivotAxisConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotAxisConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.PivotGridConfig

Ext.grid.PivotGridConfig = function Ext_grid_PivotGridConfig() {
    Ext.grid.PivotGridConfig.initializeBase(this);
}
Ext.grid.PivotGridConfig.prototype = {
    
    activeItem: function Ext_grid_PivotGridConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    aggregator: function Ext_grid_PivotGridConfig$aggregator(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['aggregator'] = value;
        return this;
    },
    
    allowDomMove: function Ext_grid_PivotGridConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_grid_PivotGridConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_grid_PivotGridConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_grid_PivotGridConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_grid_PivotGridConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_grid_PivotGridConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoExpandColumn: function Ext_grid_PivotGridConfig$autoExpandColumn(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoExpandColumn'] = value;
        return this;
    },
    
    autoExpandMax: function Ext_grid_PivotGridConfig$autoExpandMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoExpandMax'] = value;
        return this;
    },
    
    autoExpandMin: function Ext_grid_PivotGridConfig$autoExpandMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoExpandMin'] = value;
        return this;
    },
    
    autoHeight: function Ext_grid_PivotGridConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_grid_PivotGridConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_grid_PivotGridConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_grid_PivotGridConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_grid_PivotGridConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_grid_PivotGridConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_grid_PivotGridConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_grid_PivotGridConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_grid_PivotGridConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_grid_PivotGridConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_grid_PivotGridConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_grid_PivotGridConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_grid_PivotGridConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_grid_PivotGridConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_grid_PivotGridConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_grid_PivotGridConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_grid_PivotGridConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_grid_PivotGridConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_grid_PivotGridConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_grid_PivotGridConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_grid_PivotGridConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_grid_PivotGridConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_grid_PivotGridConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_grid_PivotGridConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_grid_PivotGridConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    cm: function Ext_grid_PivotGridConfig$cm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['cm'] = value;
        return this;
    },
    
    colModel: function Ext_grid_PivotGridConfig$colModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['colModel'] = value;
        return this;
    },
    
    collapseFirst: function Ext_grid_PivotGridConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_grid_PivotGridConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_grid_PivotGridConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_grid_PivotGridConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    columnLines: function Ext_grid_PivotGridConfig$columnLines(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['columnLines'] = value;
        return this;
    },
    
    columns: function Ext_grid_PivotGridConfig$columns(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    contentEl: function Ext_grid_PivotGridConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_grid_PivotGridConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_grid_PivotGridConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    ddGroup: function Ext_grid_PivotGridConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    ddText: function Ext_grid_PivotGridConfig$ddText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['ddText'] = value;
        return this;
    },
    
    defaultType: function Ext_grid_PivotGridConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_grid_PivotGridConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    deferRowRender: function Ext_grid_PivotGridConfig$deferRowRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['deferRowRender'] = value;
        return this;
    },
    
    disableSelection: function Ext_grid_PivotGridConfig$disableSelection(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['disableSelection'] = value;
        return this;
    },
    
    disabled: function Ext_grid_PivotGridConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_grid_PivotGridConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_grid_PivotGridConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_grid_PivotGridConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableColumnHide: function Ext_grid_PivotGridConfig$enableColumnHide(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['enableColumnHide'] = value;
        return this;
    },
    
    enableColumnMove: function Ext_grid_PivotGridConfig$enableColumnMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['enableColumnMove'] = value;
        return this;
    },
    
    enableColumnResize: function Ext_grid_PivotGridConfig$enableColumnResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['enableColumnResize'] = value;
        return this;
    },
    
    enableDragDrop: function Ext_grid_PivotGridConfig$enableDragDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['enableDragDrop'] = value;
        return this;
    },
    
    enableHdMenu: function Ext_grid_PivotGridConfig$enableHdMenu(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['enableHdMenu'] = value;
        return this;
    },
    
    fbar: function Ext_grid_PivotGridConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_grid_PivotGridConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_grid_PivotGridConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_grid_PivotGridConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_grid_PivotGridConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_grid_PivotGridConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_grid_PivotGridConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_grid_PivotGridConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_grid_PivotGridConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_grid_PivotGridConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_grid_PivotGridConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_grid_PivotGridConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_grid_PivotGridConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_grid_PivotGridConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_grid_PivotGridConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideHeaders: function Ext_grid_PivotGridConfig$hideHeaders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['hideHeaders'] = value;
        return this;
    },
    
    hideLabel: function Ext_grid_PivotGridConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_grid_PivotGridConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_grid_PivotGridConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_grid_PivotGridConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_grid_PivotGridConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_grid_PivotGridConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_grid_PivotGridConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_grid_PivotGridConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_grid_PivotGridConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_grid_PivotGridConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_grid_PivotGridConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_grid_PivotGridConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_grid_PivotGridConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_grid_PivotGridConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    leftAxis: function Ext_grid_PivotGridConfig$leftAxis(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['leftAxis'] = value;
        return this;
    },
    
    listeners: function Ext_grid_PivotGridConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadMask: function Ext_grid_PivotGridConfig$loadMask(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['loadMask'] = value;
        return this;
    },
    
    margins: function Ext_grid_PivotGridConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_grid_PivotGridConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maxHeight: function Ext_grid_PivotGridConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    measure: function Ext_grid_PivotGridConfig$measure(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['measure'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_grid_PivotGridConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minColumnWidth: function Ext_grid_PivotGridConfig$minColumnWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['minColumnWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_grid_PivotGridConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_grid_PivotGridConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_grid_PivotGridConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_grid_PivotGridConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_grid_PivotGridConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_grid_PivotGridConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_grid_PivotGridConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_grid_PivotGridConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_grid_PivotGridConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_grid_PivotGridConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_grid_PivotGridConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    renderer: function Ext_grid_PivotGridConfig$renderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['renderer'] = value;
        return this;
    },
    
    resizeEvent: function Ext_grid_PivotGridConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    selModel: function Ext_grid_PivotGridConfig$selModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['selModel'] = value;
        return this;
    },
    
    shadow: function Ext_grid_PivotGridConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_grid_PivotGridConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_grid_PivotGridConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    sm: function Ext_grid_PivotGridConfig$sm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['sm'] = value;
        return this;
    },
    
    stateEvents: function Ext_grid_PivotGridConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_grid_PivotGridConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_grid_PivotGridConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_grid_PivotGridConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    stripeRows: function Ext_grid_PivotGridConfig$stripeRows(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['stripeRows'] = value;
        return this;
    },
    
    style: function Ext_grid_PivotGridConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_grid_PivotGridConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_grid_PivotGridConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_grid_PivotGridConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_grid_PivotGridConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_grid_PivotGridConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_grid_PivotGridConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_grid_PivotGridConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    topAxis: function Ext_grid_PivotGridConfig$topAxis(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['topAxis'] = value;
        return this;
    },
    
    tpl: function Ext_grid_PivotGridConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_grid_PivotGridConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouseOver: function Ext_grid_PivotGridConfig$trackMouseOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['trackMouseOver'] = value;
        return this;
    },
    
    unstyled: function Ext_grid_PivotGridConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    view: function Ext_grid_PivotGridConfig$view(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['view'] = value;
        return this;
    },
    
    viewConfig: function Ext_grid_PivotGridConfig$viewConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['viewConfig'] = value;
        return this;
    },
    
    width: function Ext_grid_PivotGridConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_grid_PivotGridConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_grid_PivotGridConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_grid_PivotGridConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.PivotGridViewConfig

Ext.grid.PivotGridViewConfig = function Ext_grid_PivotGridViewConfig() {
    Ext.grid.PivotGridViewConfig.initializeBase(this);
}
Ext.grid.PivotGridViewConfig.prototype = {
    
    autoFill: function Ext_grid_PivotGridViewConfig$autoFill(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['autoFill'] = value;
        return this;
    },
    
    cellSelector: function Ext_grid_PivotGridViewConfig$cellSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['cellSelector'] = value;
        return this;
    },
    
    cellSelectorDepth: function Ext_grid_PivotGridViewConfig$cellSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['cellSelectorDepth'] = value;
        return this;
    },
    
    columnsText: function Ext_grid_PivotGridViewConfig$columnsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['columnsText'] = value;
        return this;
    },
    
    deferEmptyText: function Ext_grid_PivotGridViewConfig$deferEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['deferEmptyText'] = value;
        return this;
    },
    
    emptyText: function Ext_grid_PivotGridViewConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableRowBody: function Ext_grid_PivotGridViewConfig$enableRowBody(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['enableRowBody'] = value;
        return this;
    },
    
    forceFit: function Ext_grid_PivotGridViewConfig$forceFit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['forceFit'] = value;
        return this;
    },
    
    getCellCls: function Ext_grid_PivotGridViewConfig$getCellCls(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['getCellCls'] = value;
        return this;
    },
    
    headerMenuOpenCls: function Ext_grid_PivotGridViewConfig$headerMenuOpenCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['headerMenuOpenCls'] = value;
        return this;
    },
    
    headersDisabled: function Ext_grid_PivotGridViewConfig$headersDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['headersDisabled'] = value;
        return this;
    },
    
    listeners: function Ext_grid_PivotGridViewConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    markDirty: function Ext_grid_PivotGridViewConfig$markDirty(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['markDirty'] = value;
        return this;
    },
    
    rowBodySelector: function Ext_grid_PivotGridViewConfig$rowBodySelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['rowBodySelector'] = value;
        return this;
    },
    
    rowBodySelectorDepth: function Ext_grid_PivotGridViewConfig$rowBodySelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['rowBodySelectorDepth'] = value;
        return this;
    },
    
    rowOverCls: function Ext_grid_PivotGridViewConfig$rowOverCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['rowOverCls'] = value;
        return this;
    },
    
    rowSelector: function Ext_grid_PivotGridViewConfig$rowSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['rowSelector'] = value;
        return this;
    },
    
    rowSelectorDepth: function Ext_grid_PivotGridViewConfig$rowSelectorDepth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['rowSelectorDepth'] = value;
        return this;
    },
    
    scrollOffset: function Ext_grid_PivotGridViewConfig$scrollOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['scrollOffset'] = value;
        return this;
    },
    
    sortAscText: function Ext_grid_PivotGridViewConfig$sortAscText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['sortAscText'] = value;
        return this;
    },
    
    sortClasses: function Ext_grid_PivotGridViewConfig$sortClasses(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['sortClasses'] = value;
        return this;
    },
    
    sortDescText: function Ext_grid_PivotGridViewConfig$sortDescText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['sortDescText'] = value;
        return this;
    },
    
    title: function Ext_grid_PivotGridViewConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PivotGridViewConfig"></returns>
        this.o['title'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.PropertyColumnModelConfig

Ext.grid.PropertyColumnModelConfig = function Ext_grid_PropertyColumnModelConfig() {
    Ext.grid.PropertyColumnModelConfig.initializeBase(this);
}
Ext.grid.PropertyColumnModelConfig.prototype = {
    
    columns: function Ext_grid_PropertyColumnModelConfig$columns(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PropertyColumnModelConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    defaultSortable: function Ext_grid_PropertyColumnModelConfig$defaultSortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyColumnModelConfig"></returns>
        this.o['defaultSortable'] = value;
        return this;
    },
    
    defaultWidth: function Ext_grid_PropertyColumnModelConfig$defaultWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyColumnModelConfig"></returns>
        this.o['defaultWidth'] = value;
        return this;
    },
    
    defaults: function Ext_grid_PropertyColumnModelConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyColumnModelConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    listeners: function Ext_grid_PropertyColumnModelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyColumnModelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.PropertyGridConfig

Ext.grid.PropertyGridConfig = function Ext_grid_PropertyGridConfig() {
    Ext.grid.PropertyGridConfig.initializeBase(this);
}
Ext.grid.PropertyGridConfig.prototype = {
    
    activeItem: function Ext_grid_PropertyGridConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_grid_PropertyGridConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_grid_PropertyGridConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_grid_PropertyGridConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_grid_PropertyGridConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_grid_PropertyGridConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_grid_PropertyGridConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoEncode: function Ext_grid_PropertyGridConfig$autoEncode(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoEncode'] = value;
        return this;
    },
    
    autoExpandColumn: function Ext_grid_PropertyGridConfig$autoExpandColumn(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoExpandColumn'] = value;
        return this;
    },
    
    autoExpandMax: function Ext_grid_PropertyGridConfig$autoExpandMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoExpandMax'] = value;
        return this;
    },
    
    autoExpandMin: function Ext_grid_PropertyGridConfig$autoExpandMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoExpandMin'] = value;
        return this;
    },
    
    autoHeight: function Ext_grid_PropertyGridConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_grid_PropertyGridConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_grid_PropertyGridConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_grid_PropertyGridConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_grid_PropertyGridConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_grid_PropertyGridConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_grid_PropertyGridConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_grid_PropertyGridConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_grid_PropertyGridConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_grid_PropertyGridConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_grid_PropertyGridConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_grid_PropertyGridConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_grid_PropertyGridConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_grid_PropertyGridConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_grid_PropertyGridConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_grid_PropertyGridConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_grid_PropertyGridConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_grid_PropertyGridConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_grid_PropertyGridConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_grid_PropertyGridConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_grid_PropertyGridConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_grid_PropertyGridConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_grid_PropertyGridConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clicksToEdit: function Ext_grid_PropertyGridConfig$clicksToEdit(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['clicksToEdit'] = value;
        return this;
    },
    
    closable: function Ext_grid_PropertyGridConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_grid_PropertyGridConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    cm: function Ext_grid_PropertyGridConfig$cm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['cm'] = value;
        return this;
    },
    
    colModel: function Ext_grid_PropertyGridConfig$colModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['colModel'] = value;
        return this;
    },
    
    collapseFirst: function Ext_grid_PropertyGridConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_grid_PropertyGridConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_grid_PropertyGridConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_grid_PropertyGridConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    columnLines: function Ext_grid_PropertyGridConfig$columnLines(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['columnLines'] = value;
        return this;
    },
    
    columns: function Ext_grid_PropertyGridConfig$columns(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    contentEl: function Ext_grid_PropertyGridConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_grid_PropertyGridConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    customEditors: function Ext_grid_PropertyGridConfig$customEditors(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['customEditors'] = value;
        return this;
    },
    
    customRenderers: function Ext_grid_PropertyGridConfig$customRenderers(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['customRenderers'] = value;
        return this;
    },
    
    data: function Ext_grid_PropertyGridConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    ddGroup: function Ext_grid_PropertyGridConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    ddText: function Ext_grid_PropertyGridConfig$ddText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['ddText'] = value;
        return this;
    },
    
    defaultType: function Ext_grid_PropertyGridConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_grid_PropertyGridConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    deferRowRender: function Ext_grid_PropertyGridConfig$deferRowRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['deferRowRender'] = value;
        return this;
    },
    
    disableSelection: function Ext_grid_PropertyGridConfig$disableSelection(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['disableSelection'] = value;
        return this;
    },
    
    disabled: function Ext_grid_PropertyGridConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_grid_PropertyGridConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_grid_PropertyGridConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_grid_PropertyGridConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableColumnHide: function Ext_grid_PropertyGridConfig$enableColumnHide(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['enableColumnHide'] = value;
        return this;
    },
    
    enableColumnMove: function Ext_grid_PropertyGridConfig$enableColumnMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['enableColumnMove'] = value;
        return this;
    },
    
    enableColumnResize: function Ext_grid_PropertyGridConfig$enableColumnResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['enableColumnResize'] = value;
        return this;
    },
    
    enableDragDrop: function Ext_grid_PropertyGridConfig$enableDragDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['enableDragDrop'] = value;
        return this;
    },
    
    enableHdMenu: function Ext_grid_PropertyGridConfig$enableHdMenu(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['enableHdMenu'] = value;
        return this;
    },
    
    fbar: function Ext_grid_PropertyGridConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_grid_PropertyGridConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_grid_PropertyGridConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_grid_PropertyGridConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_grid_PropertyGridConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_grid_PropertyGridConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_grid_PropertyGridConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    forceValidation: function Ext_grid_PropertyGridConfig$forceValidation(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['forceValidation'] = value;
        return this;
    },
    
    frame: function Ext_grid_PropertyGridConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_grid_PropertyGridConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_grid_PropertyGridConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_grid_PropertyGridConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_grid_PropertyGridConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_grid_PropertyGridConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_grid_PropertyGridConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_grid_PropertyGridConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideHeaders: function Ext_grid_PropertyGridConfig$hideHeaders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['hideHeaders'] = value;
        return this;
    },
    
    hideLabel: function Ext_grid_PropertyGridConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_grid_PropertyGridConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_grid_PropertyGridConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_grid_PropertyGridConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_grid_PropertyGridConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_grid_PropertyGridConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_grid_PropertyGridConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_grid_PropertyGridConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_grid_PropertyGridConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_grid_PropertyGridConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_grid_PropertyGridConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_grid_PropertyGridConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_grid_PropertyGridConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_grid_PropertyGridConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_grid_PropertyGridConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadMask: function Ext_grid_PropertyGridConfig$loadMask(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['loadMask'] = value;
        return this;
    },
    
    margins: function Ext_grid_PropertyGridConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_grid_PropertyGridConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maxHeight: function Ext_grid_PropertyGridConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_grid_PropertyGridConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minColumnWidth: function Ext_grid_PropertyGridConfig$minColumnWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['minColumnWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_grid_PropertyGridConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_grid_PropertyGridConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_grid_PropertyGridConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_grid_PropertyGridConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_grid_PropertyGridConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_grid_PropertyGridConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_grid_PropertyGridConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    propertyNames: function Ext_grid_PropertyGridConfig$propertyNames(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['propertyNames'] = value;
        return this;
    },
    
    ptype: function Ext_grid_PropertyGridConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_grid_PropertyGridConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_grid_PropertyGridConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_grid_PropertyGridConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_grid_PropertyGridConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    selModel: function Ext_grid_PropertyGridConfig$selModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['selModel'] = value;
        return this;
    },
    
    shadow: function Ext_grid_PropertyGridConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_grid_PropertyGridConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_grid_PropertyGridConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    sm: function Ext_grid_PropertyGridConfig$sm(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['sm'] = value;
        return this;
    },
    
    source: function Ext_grid_PropertyGridConfig$source(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['source'] = value;
        return this;
    },
    
    stateEvents: function Ext_grid_PropertyGridConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_grid_PropertyGridConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_grid_PropertyGridConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_grid_PropertyGridConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    stripeRows: function Ext_grid_PropertyGridConfig$stripeRows(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['stripeRows'] = value;
        return this;
    },
    
    style: function Ext_grid_PropertyGridConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_grid_PropertyGridConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_grid_PropertyGridConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_grid_PropertyGridConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_grid_PropertyGridConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_grid_PropertyGridConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_grid_PropertyGridConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_grid_PropertyGridConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_grid_PropertyGridConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_grid_PropertyGridConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouseOver: function Ext_grid_PropertyGridConfig$trackMouseOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['trackMouseOver'] = value;
        return this;
    },
    
    unstyled: function Ext_grid_PropertyGridConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    view: function Ext_grid_PropertyGridConfig$view(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['view'] = value;
        return this;
    },
    
    viewConfig: function Ext_grid_PropertyGridConfig$viewConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['viewConfig'] = value;
        return this;
    },
    
    width: function Ext_grid_PropertyGridConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_grid_PropertyGridConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_grid_PropertyGridConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_grid_PropertyGridConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.PropertyGridConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.PropertyStoreConfig

Ext.grid.PropertyStoreConfig = function Ext_grid_PropertyStoreConfig() {
    Ext.grid.PropertyStoreConfig.initializeBase(this);
}
Ext.grid.PropertyStoreConfig.prototype = {
    
    listeners: function Ext_grid_PropertyStoreConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.PropertyStoreConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.RowNumbererConfig

Ext.grid.RowNumbererConfig = function Ext_grid_RowNumbererConfig() {
    Ext.grid.RowNumbererConfig.initializeBase(this);
}
Ext.grid.RowNumbererConfig.prototype = {
    
    header: function Ext_grid_RowNumbererConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.RowNumbererConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    width: function Ext_grid_RowNumbererConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.RowNumbererConfig"></returns>
        this.o['width'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.RowSelectionModelConfig

Ext.grid.RowSelectionModelConfig = function Ext_grid_RowSelectionModelConfig() {
    Ext.grid.RowSelectionModelConfig.initializeBase(this);
}
Ext.grid.RowSelectionModelConfig.prototype = {
    
    listeners: function Ext_grid_RowSelectionModelConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.RowSelectionModelConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    moveEditorOnEnter: function Ext_grid_RowSelectionModelConfig$moveEditorOnEnter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.RowSelectionModelConfig"></returns>
        this.o['moveEditorOnEnter'] = value;
        return this;
    },
    
    singleSelect: function Ext_grid_RowSelectionModelConfig$singleSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.RowSelectionModelConfig"></returns>
        this.o['singleSelect'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.grid.TemplateColumnConfig

Ext.grid.TemplateColumnConfig = function Ext_grid_TemplateColumnConfig() {
    Ext.grid.TemplateColumnConfig.initializeBase(this);
}
Ext.grid.TemplateColumnConfig.prototype = {
    
    align: function Ext_grid_TemplateColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    css: function Ext_grid_TemplateColumnConfig$css(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['css'] = value;
        return this;
    },
    
    dataIndex: function Ext_grid_TemplateColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    editable: function Ext_grid_TemplateColumnConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    editor: function Ext_grid_TemplateColumnConfig$editor(value) {
        /// <param name="value" type="Ext.form.Field">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['editor'] = value;
        return this;
    },
    
    emptyGroupText: function Ext_grid_TemplateColumnConfig$emptyGroupText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['emptyGroupText'] = value;
        return this;
    },
    
    fixed_: function Ext_grid_TemplateColumnConfig$fixed_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['fixed'] = value;
        return this;
    },
    
    groupName: function Ext_grid_TemplateColumnConfig$groupName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['groupName'] = value;
        return this;
    },
    
    groupRenderer: function Ext_grid_TemplateColumnConfig$groupRenderer(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['groupRenderer'] = value;
        return this;
    },
    
    groupable: function Ext_grid_TemplateColumnConfig$groupable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['groupable'] = value;
        return this;
    },
    
    header: function Ext_grid_TemplateColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    hidden: function Ext_grid_TemplateColumnConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideable: function Ext_grid_TemplateColumnConfig$hideable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['hideable'] = value;
        return this;
    },
    
    id: function Ext_grid_TemplateColumnConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    listeners: function Ext_grid_TemplateColumnConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menuDisabled: function Ext_grid_TemplateColumnConfig$menuDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['menuDisabled'] = value;
        return this;
    },
    
    renderer: function Ext_grid_TemplateColumnConfig$renderer(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['renderer'] = value;
        return this;
    },
    
    resizable: function Ext_grid_TemplateColumnConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    scope: function Ext_grid_TemplateColumnConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    sortable: function Ext_grid_TemplateColumnConfig$sortable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['sortable'] = value;
        return this;
    },
    
    tooltip: function Ext_grid_TemplateColumnConfig$tooltip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['tooltip'] = value;
        return this;
    },
    
    tpl: function Ext_grid_TemplateColumnConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    width: function Ext_grid_TemplateColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    xtype: function Ext_grid_TemplateColumnConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.grid.TemplateColumnConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.layout');

////////////////////////////////////////////////////////////////////////////////
// Ext.layout.AbsoluteLayoutConfig

Ext.layout.AbsoluteLayoutConfig = function Ext_layout_AbsoluteLayoutConfig() {
    Ext.layout.AbsoluteLayoutConfig.initializeBase(this);
}
Ext.layout.AbsoluteLayoutConfig.prototype = {
    
    anchor: function Ext_layout_AbsoluteLayoutConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.AbsoluteLayoutConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    defaultAnchor: function Ext_layout_AbsoluteLayoutConfig$defaultAnchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.AbsoluteLayoutConfig"></returns>
        this.o['defaultAnchor'] = value;
        return this;
    },
    
    extraCls: function Ext_layout_AbsoluteLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.AbsoluteLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_AbsoluteLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AbsoluteLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.AccordionLayoutConfig

Ext.layout.AccordionLayoutConfig = function Ext_layout_AccordionLayoutConfig() {
    Ext.layout.AccordionLayoutConfig.initializeBase(this);
}
Ext.layout.AccordionLayoutConfig.prototype = {
    
    activeOnTop: function Ext_layout_AccordionLayoutConfig$activeOnTop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['activeOnTop'] = value;
        return this;
    },
    
    animate: function Ext_layout_AccordionLayoutConfig$animate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['animate'] = value;
        return this;
    },
    
    autoWidth: function Ext_layout_AccordionLayoutConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    collapseFirst: function Ext_layout_AccordionLayoutConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    extraCls: function Ext_layout_AccordionLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    fill: function Ext_layout_AccordionLayoutConfig$fill(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['fill'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_layout_AccordionLayoutConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_AccordionLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    },
    
    sequence: function Ext_layout_AccordionLayoutConfig$sequence(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['sequence'] = value;
        return this;
    },
    
    titleCollapse: function Ext_layout_AccordionLayoutConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AccordionLayoutConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.AnchorLayoutConfig

Ext.layout.AnchorLayoutConfig = function Ext_layout_AnchorLayoutConfig() {
    Ext.layout.AnchorLayoutConfig.initializeBase(this);
}
Ext.layout.AnchorLayoutConfig.prototype = {
    
    anchor: function Ext_layout_AnchorLayoutConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.AnchorLayoutConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    defaultAnchor: function Ext_layout_AnchorLayoutConfig$defaultAnchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.AnchorLayoutConfig"></returns>
        this.o['defaultAnchor'] = value;
        return this;
    },
    
    extraCls: function Ext_layout_AnchorLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.AnchorLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_AnchorLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AnchorLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.AutoLayoutConfig

Ext.layout.AutoLayoutConfig = function Ext_layout_AutoLayoutConfig() {
    Ext.layout.AutoLayoutConfig.initializeBase(this);
}
Ext.layout.AutoLayoutConfig.prototype = {
    
    extraCls: function Ext_layout_AutoLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.AutoLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_AutoLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.AutoLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.BorderLayoutConfig

Ext.layout.BorderLayoutConfig = function Ext_layout_BorderLayoutConfig() {
    Ext.layout.BorderLayoutConfig.initializeBase(this);
}
Ext.layout.BorderLayoutConfig.prototype = {
    
    extraCls: function Ext_layout_BorderLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_BorderLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.BorderLayoutRegionConfig

Ext.layout.BorderLayoutRegionConfig = function Ext_layout_BorderLayoutRegionConfig() {
    Ext.layout.BorderLayoutRegionConfig.initializeBase(this);
}
Ext.layout.BorderLayoutRegionConfig.prototype = {
    
    animFloat: function Ext_layout_BorderLayoutRegionConfig$animFloat(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['animFloat'] = value;
        return this;
    },
    
    autoHide: function Ext_layout_BorderLayoutRegionConfig$autoHide(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['autoHide'] = value;
        return this;
    },
    
    cmargins: function Ext_layout_BorderLayoutRegionConfig$cmargins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['cmargins'] = value;
        return this;
    },
    
    collapseMode: function Ext_layout_BorderLayoutRegionConfig$collapseMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['collapseMode'] = value;
        return this;
    },
    
    collapsible: function Ext_layout_BorderLayoutRegionConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    floatable: function Ext_layout_BorderLayoutRegionConfig$floatable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['floatable'] = value;
        return this;
    },
    
    margins: function Ext_layout_BorderLayoutRegionConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    minHeight: function Ext_layout_BorderLayoutRegionConfig$minHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['minHeight'] = value;
        return this;
    },
    
    minWidth: function Ext_layout_BorderLayoutRegionConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    split: function Ext_layout_BorderLayoutRegionConfig$split(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutRegionConfig"></returns>
        this.o['split'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.BorderLayoutSplitRegionConfig

Ext.layout.BorderLayoutSplitRegionConfig = function Ext_layout_BorderLayoutSplitRegionConfig() {
    Ext.layout.BorderLayoutSplitRegionConfig.initializeBase(this);
}
Ext.layout.BorderLayoutSplitRegionConfig.prototype = {
    
    animFloat: function Ext_layout_BorderLayoutSplitRegionConfig$animFloat(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['animFloat'] = value;
        return this;
    },
    
    autoHide: function Ext_layout_BorderLayoutSplitRegionConfig$autoHide(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['autoHide'] = value;
        return this;
    },
    
    cmargins: function Ext_layout_BorderLayoutSplitRegionConfig$cmargins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['cmargins'] = value;
        return this;
    },
    
    collapseMode: function Ext_layout_BorderLayoutSplitRegionConfig$collapseMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['collapseMode'] = value;
        return this;
    },
    
    collapsible: function Ext_layout_BorderLayoutSplitRegionConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    collapsibleSplitTip: function Ext_layout_BorderLayoutSplitRegionConfig$collapsibleSplitTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['collapsibleSplitTip'] = value;
        return this;
    },
    
    floatable: function Ext_layout_BorderLayoutSplitRegionConfig$floatable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['floatable'] = value;
        return this;
    },
    
    margins: function Ext_layout_BorderLayoutSplitRegionConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    minHeight: function Ext_layout_BorderLayoutSplitRegionConfig$minHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['minHeight'] = value;
        return this;
    },
    
    minWidth: function Ext_layout_BorderLayoutSplitRegionConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    split: function Ext_layout_BorderLayoutSplitRegionConfig$split(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['split'] = value;
        return this;
    },
    
    splitTip: function Ext_layout_BorderLayoutSplitRegionConfig$splitTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['splitTip'] = value;
        return this;
    },
    
    tickSize: function Ext_layout_BorderLayoutSplitRegionConfig$tickSize(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['tickSize'] = value;
        return this;
    },
    
    useSplitTips: function Ext_layout_BorderLayoutSplitRegionConfig$useSplitTips(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BorderLayoutSplitRegionConfig"></returns>
        this.o['useSplitTips'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.BoxLayoutConfig

Ext.layout.BoxLayoutConfig = function Ext_layout_BoxLayoutConfig() {
    Ext.layout.BoxLayoutConfig.initializeBase(this);
}
Ext.layout.BoxLayoutConfig.prototype = {
    
    defaultMargins: function Ext_layout_BoxLayoutConfig$defaultMargins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.layout.BoxLayoutConfig"></returns>
        this.o['defaultMargins'] = value;
        return this;
    },
    
    extraCls: function Ext_layout_BoxLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.BoxLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    padding: function Ext_layout_BoxLayoutConfig$padding(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.BoxLayoutConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_BoxLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.BoxLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.CardLayoutConfig

Ext.layout.CardLayoutConfig = function Ext_layout_CardLayoutConfig() {
    Ext.layout.CardLayoutConfig.initializeBase(this);
}
Ext.layout.CardLayoutConfig.prototype = {
    
    deferredRender: function Ext_layout_CardLayoutConfig$deferredRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.CardLayoutConfig"></returns>
        this.o['deferredRender'] = value;
        return this;
    },
    
    extraCls: function Ext_layout_CardLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.CardLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    layoutOnCardChange: function Ext_layout_CardLayoutConfig$layoutOnCardChange(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.CardLayoutConfig"></returns>
        this.o['layoutOnCardChange'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_CardLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.CardLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.ColumnLayoutConfig

Ext.layout.ColumnLayoutConfig = function Ext_layout_ColumnLayoutConfig() {
    Ext.layout.ColumnLayoutConfig.initializeBase(this);
}
Ext.layout.ColumnLayoutConfig.prototype = {
    
    extraCls: function Ext_layout_ColumnLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.ColumnLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_ColumnLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.ColumnLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.ContainerLayoutConfig

Ext.layout.ContainerLayoutConfig = function Ext_layout_ContainerLayoutConfig() {
    Ext.layout.ContainerLayoutConfig.initializeBase(this);
}
Ext.layout.ContainerLayoutConfig.prototype = {
    
    extraCls: function Ext_layout_ContainerLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.ContainerLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_ContainerLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.ContainerLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.FitLayoutConfig

Ext.layout.FitLayoutConfig = function Ext_layout_FitLayoutConfig() {
    Ext.layout.FitLayoutConfig.initializeBase(this);
}
Ext.layout.FitLayoutConfig.prototype = {
    
    extraCls: function Ext_layout_FitLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.FitLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_FitLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.FitLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.FormLayoutConfig

Ext.layout.FormLayoutConfig = function Ext_layout_FormLayoutConfig() {
    Ext.layout.FormLayoutConfig.initializeBase(this);
}
Ext.layout.FormLayoutConfig.prototype = {
    
    anchor: function Ext_layout_FormLayoutConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.FormLayoutConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    defaultAnchor: function Ext_layout_FormLayoutConfig$defaultAnchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.FormLayoutConfig"></returns>
        this.o['defaultAnchor'] = value;
        return this;
    },
    
    extraCls: function Ext_layout_FormLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.FormLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    fieldTpl: function Ext_layout_FormLayoutConfig$fieldTpl(value) {
        /// <param name="value" type="Ext.Template">
        /// </param>
        /// <returns type="Ext.layout.FormLayoutConfig"></returns>
        this.o['fieldTpl'] = value;
        return this;
    },
    
    labelSeparator: function Ext_layout_FormLayoutConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.FormLayoutConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_FormLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.FormLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    },
    
    trackLabels: function Ext_layout_FormLayoutConfig$trackLabels(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.FormLayoutConfig"></returns>
        this.o['trackLabels'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.HBoxLayoutConfig

Ext.layout.HBoxLayoutConfig = function Ext_layout_HBoxLayoutConfig() {
    Ext.layout.HBoxLayoutConfig.initializeBase(this);
}
Ext.layout.HBoxLayoutConfig.prototype = {
    
    align: function Ext_layout_HBoxLayoutConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.HBoxLayoutConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    defaultMargins: function Ext_layout_HBoxLayoutConfig$defaultMargins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.layout.HBoxLayoutConfig"></returns>
        this.o['defaultMargins'] = value;
        return this;
    },
    
    extraCls: function Ext_layout_HBoxLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.HBoxLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    flex: function Ext_layout_HBoxLayoutConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.layout.HBoxLayoutConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    pack: function Ext_layout_HBoxLayoutConfig$pack(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.HBoxLayoutConfig"></returns>
        this.o['pack'] = value;
        return this;
    },
    
    padding: function Ext_layout_HBoxLayoutConfig$padding(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.HBoxLayoutConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_HBoxLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.HBoxLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.MenuLayoutConfig

Ext.layout.MenuLayoutConfig = function Ext_layout_MenuLayoutConfig() {
    Ext.layout.MenuLayoutConfig.initializeBase(this);
}
Ext.layout.MenuLayoutConfig.prototype = {
    
    extraCls: function Ext_layout_MenuLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.MenuLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_MenuLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.MenuLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.TableLayoutConfig

Ext.layout.TableLayoutConfig = function Ext_layout_TableLayoutConfig() {
    Ext.layout.TableLayoutConfig.initializeBase(this);
}
Ext.layout.TableLayoutConfig.prototype = {
    
    columns: function Ext_layout_TableLayoutConfig$columns(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.layout.TableLayoutConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    extraCls: function Ext_layout_TableLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.TableLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_TableLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.TableLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    },
    
    tableAttrs: function Ext_layout_TableLayoutConfig$tableAttrs(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.layout.TableLayoutConfig"></returns>
        this.o['tableAttrs'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.ToolbarLayoutConfig

Ext.layout.ToolbarLayoutConfig = function Ext_layout_ToolbarLayoutConfig() {
    Ext.layout.ToolbarLayoutConfig.initializeBase(this);
}
Ext.layout.ToolbarLayoutConfig.prototype = {
    
    extraCls: function Ext_layout_ToolbarLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.ToolbarLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_ToolbarLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.ToolbarLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.layout.VBoxLayoutConfig

Ext.layout.VBoxLayoutConfig = function Ext_layout_VBoxLayoutConfig() {
    Ext.layout.VBoxLayoutConfig.initializeBase(this);
}
Ext.layout.VBoxLayoutConfig.prototype = {
    
    align: function Ext_layout_VBoxLayoutConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.VBoxLayoutConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    defaultMargins: function Ext_layout_VBoxLayoutConfig$defaultMargins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.layout.VBoxLayoutConfig"></returns>
        this.o['defaultMargins'] = value;
        return this;
    },
    
    extraCls: function Ext_layout_VBoxLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.VBoxLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    flex: function Ext_layout_VBoxLayoutConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.layout.VBoxLayoutConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    pack: function Ext_layout_VBoxLayoutConfig$pack(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.VBoxLayoutConfig"></returns>
        this.o['pack'] = value;
        return this;
    },
    
    padding: function Ext_layout_VBoxLayoutConfig$padding(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.layout.VBoxLayoutConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    renderHidden: function Ext_layout_VBoxLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.layout.VBoxLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.list');

////////////////////////////////////////////////////////////////////////////////
// Ext.list.BooleanColumnConfig

Ext.list.BooleanColumnConfig = function Ext_list_BooleanColumnConfig() {
    Ext.list.BooleanColumnConfig.initializeBase(this);
}
Ext.list.BooleanColumnConfig.prototype = {
    
    align: function Ext_list_BooleanColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.BooleanColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    cls: function Ext_list_BooleanColumnConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.BooleanColumnConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    dataIndex: function Ext_list_BooleanColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.BooleanColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    falseText: function Ext_list_BooleanColumnConfig$falseText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.BooleanColumnConfig"></returns>
        this.o['falseText'] = value;
        return this;
    },
    
    header: function Ext_list_BooleanColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.BooleanColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    tpl: function Ext_list_BooleanColumnConfig$tpl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.BooleanColumnConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    trueText: function Ext_list_BooleanColumnConfig$trueText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.BooleanColumnConfig"></returns>
        this.o['trueText'] = value;
        return this;
    },
    
    undefinedText: function Ext_list_BooleanColumnConfig$undefinedText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.BooleanColumnConfig"></returns>
        this.o['undefinedText'] = value;
        return this;
    },
    
    width: function Ext_list_BooleanColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.BooleanColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.list.ColumnConfig

Ext.list.ColumnConfig = function Ext_list_ColumnConfig() {
    Ext.list.ColumnConfig.initializeBase(this);
}
Ext.list.ColumnConfig.prototype = {
    
    align: function Ext_list_ColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    cls: function Ext_list_ColumnConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ColumnConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    dataIndex: function Ext_list_ColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    header: function Ext_list_ColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    tpl: function Ext_list_ColumnConfig$tpl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ColumnConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    width: function Ext_list_ColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.list.ColumnResizerConfig

Ext.list.ColumnResizerConfig = function Ext_list_ColumnResizerConfig() {
    Ext.list.ColumnResizerConfig.initializeBase(this);
}
Ext.list.ColumnResizerConfig.prototype = {
    
    listeners: function Ext_list_ColumnResizerConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ColumnResizerConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    minPct: function Ext_list_ColumnResizerConfig$minPct(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ColumnResizerConfig"></returns>
        this.o['minPct'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.list.DateColumnConfig

Ext.list.DateColumnConfig = function Ext_list_DateColumnConfig() {
    Ext.list.DateColumnConfig.initializeBase(this);
}
Ext.list.DateColumnConfig.prototype = {
    
    align: function Ext_list_DateColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.DateColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    cls: function Ext_list_DateColumnConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.DateColumnConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    dataIndex: function Ext_list_DateColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.DateColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    header: function Ext_list_DateColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.DateColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    tpl: function Ext_list_DateColumnConfig$tpl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.DateColumnConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    width: function Ext_list_DateColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.DateColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.list.ListViewConfig

Ext.list.ListViewConfig = function Ext_list_ListViewConfig() {
    Ext.list.ListViewConfig.initializeBase(this);
}
Ext.list.ListViewConfig.prototype = {
    
    allowDomMove: function Ext_list_ListViewConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_list_ListViewConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_list_ListViewConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_list_ListViewConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_list_ListViewConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_list_ListViewConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_list_ListViewConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_list_ListViewConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blockRefresh: function Ext_list_ListViewConfig$blockRefresh(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['blockRefresh'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_list_ListViewConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_list_ListViewConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_list_ListViewConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_list_ListViewConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_list_ListViewConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_list_ListViewConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_list_ListViewConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    columnResize: function Ext_list_ListViewConfig$columnResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['columnResize'] = value;
        return this;
    },
    
    columnSort: function Ext_list_ListViewConfig$columnSort(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['columnSort'] = value;
        return this;
    },
    
    columns: function Ext_list_ListViewConfig$columns(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['columns'] = value;
        return this;
    },
    
    contentEl: function Ext_list_ListViewConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_list_ListViewConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_list_ListViewConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    deferEmptyText: function Ext_list_ListViewConfig$deferEmptyText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['deferEmptyText'] = value;
        return this;
    },
    
    disabled: function Ext_list_ListViewConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_list_ListViewConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    emptyText: function Ext_list_ListViewConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    fieldLabel: function Ext_list_ListViewConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_list_ListViewConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_list_ListViewConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_list_ListViewConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideHeaders: function Ext_list_ListViewConfig$hideHeaders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['hideHeaders'] = value;
        return this;
    },
    
    hideLabel: function Ext_list_ListViewConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_list_ListViewConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_list_ListViewConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_list_ListViewConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_list_ListViewConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    internalTpl: function Ext_list_ListViewConfig$internalTpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['internalTpl'] = value;
        return this;
    },
    
    itemCls: function Ext_list_ListViewConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_list_ListViewConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    itemSelector: function Ext_list_ListViewConfig$itemSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['itemSelector'] = value;
        return this;
    },
    
    labelSeparator: function Ext_list_ListViewConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_list_ListViewConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_list_ListViewConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadingText: function Ext_list_ListViewConfig$loadingText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['loadingText'] = value;
        return this;
    },
    
    margins: function Ext_list_ListViewConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    multiSelect: function Ext_list_ListViewConfig$multiSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['multiSelect'] = value;
        return this;
    },
    
    overClass: function Ext_list_ListViewConfig$overClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['overClass'] = value;
        return this;
    },
    
    overCls: function Ext_list_ListViewConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_list_ListViewConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_list_ListViewConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_list_ListViewConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_list_ListViewConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_list_ListViewConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_list_ListViewConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_list_ListViewConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    reserveScrollOffset: function Ext_list_ListViewConfig$reserveScrollOffset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['reserveScrollOffset'] = value;
        return this;
    },
    
    scrollOffset: function Ext_list_ListViewConfig$scrollOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['scrollOffset'] = value;
        return this;
    },
    
    selectedClass: function Ext_list_ListViewConfig$selectedClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['selectedClass'] = value;
        return this;
    },
    
    simpleSelect: function Ext_list_ListViewConfig$simpleSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['simpleSelect'] = value;
        return this;
    },
    
    singleSelect: function Ext_list_ListViewConfig$singleSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['singleSelect'] = value;
        return this;
    },
    
    stateEvents: function Ext_list_ListViewConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_list_ListViewConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_list_ListViewConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_list_ListViewConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    style: function Ext_list_ListViewConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_list_ListViewConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_list_ListViewConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_list_ListViewConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackOver: function Ext_list_ListViewConfig$trackOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['trackOver'] = value;
        return this;
    },
    
    width: function Ext_list_ListViewConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_list_ListViewConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_list_ListViewConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_list_ListViewConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.ListViewConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.list.NumberColumnConfig

Ext.list.NumberColumnConfig = function Ext_list_NumberColumnConfig() {
    Ext.list.NumberColumnConfig.initializeBase(this);
}
Ext.list.NumberColumnConfig.prototype = {
    
    align: function Ext_list_NumberColumnConfig$align(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.NumberColumnConfig"></returns>
        this.o['align'] = value;
        return this;
    },
    
    cls: function Ext_list_NumberColumnConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.NumberColumnConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    dataIndex: function Ext_list_NumberColumnConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.NumberColumnConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    format: function Ext_list_NumberColumnConfig$format(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.NumberColumnConfig"></returns>
        this.o['format'] = value;
        return this;
    },
    
    header: function Ext_list_NumberColumnConfig$header(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.NumberColumnConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    tpl: function Ext_list_NumberColumnConfig$tpl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.list.NumberColumnConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    width: function Ext_list_NumberColumnConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.list.NumberColumnConfig"></returns>
        this.o['width'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.list.SorterConfig

Ext.list.SorterConfig = function Ext_list_SorterConfig() {
    Ext.list.SorterConfig.initializeBase(this);
}
Ext.list.SorterConfig.prototype = {
    
    listeners: function Ext_list_SorterConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.list.SorterConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    sortClasses: function Ext_list_SorterConfig$sortClasses(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.list.SorterConfig"></returns>
        this.o['sortClasses'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.menu');

////////////////////////////////////////////////////////////////////////////////
// Ext.menu.BaseItemConfig

Ext.menu.BaseItemConfig = function Ext_menu_BaseItemConfig() {
    Ext.menu.BaseItemConfig.initializeBase(this);
}
Ext.menu.BaseItemConfig.prototype = {
    
    activeClass: function Ext_menu_BaseItemConfig$activeClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['activeClass'] = value;
        return this;
    },
    
    allowDomMove: function Ext_menu_BaseItemConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_menu_BaseItemConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_menu_BaseItemConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_menu_BaseItemConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_menu_BaseItemConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    canActivate: function Ext_menu_BaseItemConfig$canActivate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['canActivate'] = value;
        return this;
    },
    
    clearCls: function Ext_menu_BaseItemConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickHideDelay: function Ext_menu_BaseItemConfig$clickHideDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['clickHideDelay'] = value;
        return this;
    },
    
    cls: function Ext_menu_BaseItemConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_menu_BaseItemConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_menu_BaseItemConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_menu_BaseItemConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_menu_BaseItemConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_menu_BaseItemConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_menu_BaseItemConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    handler: function Ext_menu_BaseItemConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    hidden: function Ext_menu_BaseItemConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_menu_BaseItemConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_menu_BaseItemConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideOnClick: function Ext_menu_BaseItemConfig$hideOnClick(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['hideOnClick'] = value;
        return this;
    },
    
    hideParent: function Ext_menu_BaseItemConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_menu_BaseItemConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_menu_BaseItemConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_menu_BaseItemConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_menu_BaseItemConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_menu_BaseItemConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_menu_BaseItemConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_menu_BaseItemConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    overCls: function Ext_menu_BaseItemConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_menu_BaseItemConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_menu_BaseItemConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_menu_BaseItemConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_menu_BaseItemConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    scope: function Ext_menu_BaseItemConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stateEvents: function Ext_menu_BaseItemConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_menu_BaseItemConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_menu_BaseItemConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_menu_BaseItemConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tpl: function Ext_menu_BaseItemConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_menu_BaseItemConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    xtype: function Ext_menu_BaseItemConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.BaseItemConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.menu.CheckItemConfig

Ext.menu.CheckItemConfig = function Ext_menu_CheckItemConfig() {
    Ext.menu.CheckItemConfig.initializeBase(this);
}
Ext.menu.CheckItemConfig.prototype = {
    
    activeClass: function Ext_menu_CheckItemConfig$activeClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['activeClass'] = value;
        return this;
    },
    
    allowDomMove: function Ext_menu_CheckItemConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    altText: function Ext_menu_CheckItemConfig$altText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['altText'] = value;
        return this;
    },
    
    applyTo: function Ext_menu_CheckItemConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_menu_CheckItemConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_menu_CheckItemConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_menu_CheckItemConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    canActivate: function Ext_menu_CheckItemConfig$canActivate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['canActivate'] = value;
        return this;
    },
    
    checked_: function Ext_menu_CheckItemConfig$checked_(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['checked'] = value;
        return this;
    },
    
    clearCls: function Ext_menu_CheckItemConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickHideDelay: function Ext_menu_CheckItemConfig$clickHideDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['clickHideDelay'] = value;
        return this;
    },
    
    cls: function Ext_menu_CheckItemConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_menu_CheckItemConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_menu_CheckItemConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_menu_CheckItemConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_menu_CheckItemConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_menu_CheckItemConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_menu_CheckItemConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    group: function Ext_menu_CheckItemConfig$group(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['group'] = value;
        return this;
    },
    
    groupClass: function Ext_menu_CheckItemConfig$groupClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['groupClass'] = value;
        return this;
    },
    
    handler: function Ext_menu_CheckItemConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    hidden: function Ext_menu_CheckItemConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_menu_CheckItemConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_menu_CheckItemConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideOnClick: function Ext_menu_CheckItemConfig$hideOnClick(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['hideOnClick'] = value;
        return this;
    },
    
    hideParent: function Ext_menu_CheckItemConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    href: function Ext_menu_CheckItemConfig$href(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['href'] = value;
        return this;
    },
    
    hrefTarget: function Ext_menu_CheckItemConfig$hrefTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['hrefTarget'] = value;
        return this;
    },
    
    html: function Ext_menu_CheckItemConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    icon: function Ext_menu_CheckItemConfig$icon(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['icon'] = value;
        return this;
    },
    
    iconCls: function Ext_menu_CheckItemConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_menu_CheckItemConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_menu_CheckItemConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_menu_CheckItemConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_menu_CheckItemConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_menu_CheckItemConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_menu_CheckItemConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menu: function Ext_menu_CheckItemConfig$menu(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['menu'] = value;
        return this;
    },
    
    overCls: function Ext_menu_CheckItemConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_menu_CheckItemConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_menu_CheckItemConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_menu_CheckItemConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_menu_CheckItemConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    scope: function Ext_menu_CheckItemConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    showDelay: function Ext_menu_CheckItemConfig$showDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['showDelay'] = value;
        return this;
    },
    
    stateEvents: function Ext_menu_CheckItemConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_menu_CheckItemConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_menu_CheckItemConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_menu_CheckItemConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    text: function Ext_menu_CheckItemConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    tpl: function Ext_menu_CheckItemConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_menu_CheckItemConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    xtype: function Ext_menu_CheckItemConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.CheckItemConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.menu.ColorMenuConfig

Ext.menu.ColorMenuConfig = function Ext_menu_ColorMenuConfig() {
    Ext.menu.ColorMenuConfig.initializeBase(this);
}
Ext.menu.ColorMenuConfig.prototype = {
    
    activeItem: function Ext_menu_ColorMenuConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_menu_ColorMenuConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    allowOtherMenus: function Ext_menu_ColorMenuConfig$allowOtherMenus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['allowOtherMenus'] = value;
        return this;
    },
    
    anchor: function Ext_menu_ColorMenuConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_menu_ColorMenuConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_menu_ColorMenuConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_menu_ColorMenuConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_menu_ColorMenuConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_menu_ColorMenuConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_menu_ColorMenuConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_menu_ColorMenuConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_menu_ColorMenuConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_menu_ColorMenuConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_menu_ColorMenuConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_menu_ColorMenuConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_menu_ColorMenuConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_menu_ColorMenuConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    clearCls: function Ext_menu_ColorMenuConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_menu_ColorMenuConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_menu_ColorMenuConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_menu_ColorMenuConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_menu_ColorMenuConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultAlign: function Ext_menu_ColorMenuConfig$defaultAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['defaultAlign'] = value;
        return this;
    },
    
    defaultOffsets: function Ext_menu_ColorMenuConfig$defaultOffsets(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['defaultOffsets'] = value;
        return this;
    },
    
    defaultType: function Ext_menu_ColorMenuConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_menu_ColorMenuConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_menu_ColorMenuConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_menu_ColorMenuConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableScrolling: function Ext_menu_ColorMenuConfig$enableScrolling(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['enableScrolling'] = value;
        return this;
    },
    
    fieldLabel: function Ext_menu_ColorMenuConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_menu_ColorMenuConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_menu_ColorMenuConfig$floating(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    forceLayout: function Ext_menu_ColorMenuConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    handler: function Ext_menu_ColorMenuConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    height: function Ext_menu_ColorMenuConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_menu_ColorMenuConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_menu_ColorMenuConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_menu_ColorMenuConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_menu_ColorMenuConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideOnClick: function Ext_menu_ColorMenuConfig$hideOnClick(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['hideOnClick'] = value;
        return this;
    },
    
    hideParent: function Ext_menu_ColorMenuConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_menu_ColorMenuConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_menu_ColorMenuConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    ignoreParentClicks: function Ext_menu_ColorMenuConfig$ignoreParentClicks(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['ignoreParentClicks'] = value;
        return this;
    },
    
    itemCls: function Ext_menu_ColorMenuConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_menu_ColorMenuConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_menu_ColorMenuConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_menu_ColorMenuConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_menu_ColorMenuConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_menu_ColorMenuConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_menu_ColorMenuConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_menu_ColorMenuConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_menu_ColorMenuConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maxHeight: function Ext_menu_ColorMenuConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    minWidth: function Ext_menu_ColorMenuConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_menu_ColorMenuConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_menu_ColorMenuConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_menu_ColorMenuConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_menu_ColorMenuConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    paletteId: function Ext_menu_ColorMenuConfig$paletteId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['paletteId'] = value;
        return this;
    },
    
    plain: function Ext_menu_ColorMenuConfig$plain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['plain'] = value;
        return this;
    },
    
    plugins: function Ext_menu_ColorMenuConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_menu_ColorMenuConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_menu_ColorMenuConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_menu_ColorMenuConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_menu_ColorMenuConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_menu_ColorMenuConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    scope: function Ext_menu_ColorMenuConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    scrollIncrement: function Ext_menu_ColorMenuConfig$scrollIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['scrollIncrement'] = value;
        return this;
    },
    
    shadow: function Ext_menu_ColorMenuConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    showSeparator: function Ext_menu_ColorMenuConfig$showSeparator(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['showSeparator'] = value;
        return this;
    },
    
    stateEvents: function Ext_menu_ColorMenuConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_menu_ColorMenuConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_menu_ColorMenuConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_menu_ColorMenuConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    subMenuAlign: function Ext_menu_ColorMenuConfig$subMenuAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['subMenuAlign'] = value;
        return this;
    },
    
    tabTip: function Ext_menu_ColorMenuConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_menu_ColorMenuConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_menu_ColorMenuConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_menu_ColorMenuConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_menu_ColorMenuConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_menu_ColorMenuConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_menu_ColorMenuConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['y'] = value;
        return this;
    },
    
    zIndex: function Ext_menu_ColorMenuConfig$zIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ColorMenuConfig"></returns>
        this.o['zIndex'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.menu.DateMenuConfig

Ext.menu.DateMenuConfig = function Ext_menu_DateMenuConfig() {
    Ext.menu.DateMenuConfig.initializeBase(this);
}
Ext.menu.DateMenuConfig.prototype = {
    
    activeItem: function Ext_menu_DateMenuConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_menu_DateMenuConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    allowOtherMenus: function Ext_menu_DateMenuConfig$allowOtherMenus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['allowOtherMenus'] = value;
        return this;
    },
    
    anchor: function Ext_menu_DateMenuConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_menu_DateMenuConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_menu_DateMenuConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_menu_DateMenuConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_menu_DateMenuConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_menu_DateMenuConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_menu_DateMenuConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_menu_DateMenuConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_menu_DateMenuConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_menu_DateMenuConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_menu_DateMenuConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_menu_DateMenuConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_menu_DateMenuConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_menu_DateMenuConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    clearCls: function Ext_menu_DateMenuConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_menu_DateMenuConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_menu_DateMenuConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_menu_DateMenuConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_menu_DateMenuConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultAlign: function Ext_menu_DateMenuConfig$defaultAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['defaultAlign'] = value;
        return this;
    },
    
    defaultOffsets: function Ext_menu_DateMenuConfig$defaultOffsets(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['defaultOffsets'] = value;
        return this;
    },
    
    defaultType: function Ext_menu_DateMenuConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_menu_DateMenuConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_menu_DateMenuConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_menu_DateMenuConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableScrolling: function Ext_menu_DateMenuConfig$enableScrolling(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['enableScrolling'] = value;
        return this;
    },
    
    fieldLabel: function Ext_menu_DateMenuConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_menu_DateMenuConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_menu_DateMenuConfig$floating(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    forceLayout: function Ext_menu_DateMenuConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    handler: function Ext_menu_DateMenuConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    height: function Ext_menu_DateMenuConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_menu_DateMenuConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_menu_DateMenuConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_menu_DateMenuConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_menu_DateMenuConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideOnClick: function Ext_menu_DateMenuConfig$hideOnClick(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['hideOnClick'] = value;
        return this;
    },
    
    hideParent: function Ext_menu_DateMenuConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_menu_DateMenuConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_menu_DateMenuConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    ignoreParentClicks: function Ext_menu_DateMenuConfig$ignoreParentClicks(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['ignoreParentClicks'] = value;
        return this;
    },
    
    itemCls: function Ext_menu_DateMenuConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_menu_DateMenuConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_menu_DateMenuConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_menu_DateMenuConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_menu_DateMenuConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_menu_DateMenuConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_menu_DateMenuConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_menu_DateMenuConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_menu_DateMenuConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maxHeight: function Ext_menu_DateMenuConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    minWidth: function Ext_menu_DateMenuConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_menu_DateMenuConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_menu_DateMenuConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_menu_DateMenuConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_menu_DateMenuConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    pickerId: function Ext_menu_DateMenuConfig$pickerId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['pickerId'] = value;
        return this;
    },
    
    plain: function Ext_menu_DateMenuConfig$plain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['plain'] = value;
        return this;
    },
    
    plugins: function Ext_menu_DateMenuConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_menu_DateMenuConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_menu_DateMenuConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_menu_DateMenuConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_menu_DateMenuConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_menu_DateMenuConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    scope: function Ext_menu_DateMenuConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    scrollIncrement: function Ext_menu_DateMenuConfig$scrollIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['scrollIncrement'] = value;
        return this;
    },
    
    shadow: function Ext_menu_DateMenuConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    showSeparator: function Ext_menu_DateMenuConfig$showSeparator(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['showSeparator'] = value;
        return this;
    },
    
    stateEvents: function Ext_menu_DateMenuConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_menu_DateMenuConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_menu_DateMenuConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_menu_DateMenuConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    subMenuAlign: function Ext_menu_DateMenuConfig$subMenuAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['subMenuAlign'] = value;
        return this;
    },
    
    tabTip: function Ext_menu_DateMenuConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_menu_DateMenuConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_menu_DateMenuConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_menu_DateMenuConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_menu_DateMenuConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_menu_DateMenuConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_menu_DateMenuConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['y'] = value;
        return this;
    },
    
    zIndex: function Ext_menu_DateMenuConfig$zIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.DateMenuConfig"></returns>
        this.o['zIndex'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.menu.ItemConfig

Ext.menu.ItemConfig = function Ext_menu_ItemConfig() {
    Ext.menu.ItemConfig.initializeBase(this);
}
Ext.menu.ItemConfig.prototype = {
    
    activeClass: function Ext_menu_ItemConfig$activeClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['activeClass'] = value;
        return this;
    },
    
    allowDomMove: function Ext_menu_ItemConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    altText: function Ext_menu_ItemConfig$altText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['altText'] = value;
        return this;
    },
    
    applyTo: function Ext_menu_ItemConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_menu_ItemConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_menu_ItemConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_menu_ItemConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    canActivate: function Ext_menu_ItemConfig$canActivate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['canActivate'] = value;
        return this;
    },
    
    clearCls: function Ext_menu_ItemConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickHideDelay: function Ext_menu_ItemConfig$clickHideDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['clickHideDelay'] = value;
        return this;
    },
    
    cls: function Ext_menu_ItemConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_menu_ItemConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_menu_ItemConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_menu_ItemConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_menu_ItemConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_menu_ItemConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_menu_ItemConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    handler: function Ext_menu_ItemConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    hidden: function Ext_menu_ItemConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_menu_ItemConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_menu_ItemConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideOnClick: function Ext_menu_ItemConfig$hideOnClick(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['hideOnClick'] = value;
        return this;
    },
    
    hideParent: function Ext_menu_ItemConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    href: function Ext_menu_ItemConfig$href(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['href'] = value;
        return this;
    },
    
    hrefTarget: function Ext_menu_ItemConfig$hrefTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['hrefTarget'] = value;
        return this;
    },
    
    html: function Ext_menu_ItemConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    icon: function Ext_menu_ItemConfig$icon(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['icon'] = value;
        return this;
    },
    
    iconCls: function Ext_menu_ItemConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_menu_ItemConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_menu_ItemConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_menu_ItemConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_menu_ItemConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_menu_ItemConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_menu_ItemConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menu: function Ext_menu_ItemConfig$menu(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['menu'] = value;
        return this;
    },
    
    overCls: function Ext_menu_ItemConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_menu_ItemConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_menu_ItemConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_menu_ItemConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_menu_ItemConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    scope: function Ext_menu_ItemConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    showDelay: function Ext_menu_ItemConfig$showDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['showDelay'] = value;
        return this;
    },
    
    stateEvents: function Ext_menu_ItemConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_menu_ItemConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_menu_ItemConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_menu_ItemConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    text: function Ext_menu_ItemConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    tpl: function Ext_menu_ItemConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_menu_ItemConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    xtype: function Ext_menu_ItemConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.ItemConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.menu.MenuConfig

Ext.menu.MenuConfig = function Ext_menu_MenuConfig() {
    Ext.menu.MenuConfig.initializeBase(this);
}
Ext.menu.MenuConfig.prototype = {
    
    activeItem: function Ext_menu_MenuConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_menu_MenuConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    allowOtherMenus: function Ext_menu_MenuConfig$allowOtherMenus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['allowOtherMenus'] = value;
        return this;
    },
    
    anchor: function Ext_menu_MenuConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_menu_MenuConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_menu_MenuConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_menu_MenuConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_menu_MenuConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_menu_MenuConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_menu_MenuConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_menu_MenuConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_menu_MenuConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_menu_MenuConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_menu_MenuConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_menu_MenuConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_menu_MenuConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_menu_MenuConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    clearCls: function Ext_menu_MenuConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_menu_MenuConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_menu_MenuConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_menu_MenuConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_menu_MenuConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultAlign: function Ext_menu_MenuConfig$defaultAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['defaultAlign'] = value;
        return this;
    },
    
    defaultOffsets: function Ext_menu_MenuConfig$defaultOffsets(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['defaultOffsets'] = value;
        return this;
    },
    
    defaultType: function Ext_menu_MenuConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_menu_MenuConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_menu_MenuConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_menu_MenuConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableScrolling: function Ext_menu_MenuConfig$enableScrolling(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['enableScrolling'] = value;
        return this;
    },
    
    fieldLabel: function Ext_menu_MenuConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_menu_MenuConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_menu_MenuConfig$floating(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    forceLayout: function Ext_menu_MenuConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    height: function Ext_menu_MenuConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_menu_MenuConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_menu_MenuConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_menu_MenuConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_menu_MenuConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_menu_MenuConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_menu_MenuConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_menu_MenuConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    ignoreParentClicks: function Ext_menu_MenuConfig$ignoreParentClicks(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['ignoreParentClicks'] = value;
        return this;
    },
    
    itemCls: function Ext_menu_MenuConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_menu_MenuConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_menu_MenuConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_menu_MenuConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_menu_MenuConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_menu_MenuConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_menu_MenuConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_menu_MenuConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_menu_MenuConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maxHeight: function Ext_menu_MenuConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    minWidth: function Ext_menu_MenuConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_menu_MenuConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_menu_MenuConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_menu_MenuConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_menu_MenuConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plain: function Ext_menu_MenuConfig$plain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['plain'] = value;
        return this;
    },
    
    plugins: function Ext_menu_MenuConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_menu_MenuConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_menu_MenuConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_menu_MenuConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_menu_MenuConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_menu_MenuConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    scrollIncrement: function Ext_menu_MenuConfig$scrollIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['scrollIncrement'] = value;
        return this;
    },
    
    shadow: function Ext_menu_MenuConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    showSeparator: function Ext_menu_MenuConfig$showSeparator(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['showSeparator'] = value;
        return this;
    },
    
    stateEvents: function Ext_menu_MenuConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_menu_MenuConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_menu_MenuConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_menu_MenuConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    subMenuAlign: function Ext_menu_MenuConfig$subMenuAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['subMenuAlign'] = value;
        return this;
    },
    
    tabTip: function Ext_menu_MenuConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_menu_MenuConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_menu_MenuConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_menu_MenuConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_menu_MenuConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_menu_MenuConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_menu_MenuConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['y'] = value;
        return this;
    },
    
    zIndex: function Ext_menu_MenuConfig$zIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.MenuConfig"></returns>
        this.o['zIndex'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.menu.SeparatorConfig

Ext.menu.SeparatorConfig = function Ext_menu_SeparatorConfig() {
    Ext.menu.SeparatorConfig.initializeBase(this);
}
Ext.menu.SeparatorConfig.prototype = {
    
    activeClass: function Ext_menu_SeparatorConfig$activeClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['activeClass'] = value;
        return this;
    },
    
    allowDomMove: function Ext_menu_SeparatorConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_menu_SeparatorConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_menu_SeparatorConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_menu_SeparatorConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_menu_SeparatorConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    canActivate: function Ext_menu_SeparatorConfig$canActivate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['canActivate'] = value;
        return this;
    },
    
    clearCls: function Ext_menu_SeparatorConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickHideDelay: function Ext_menu_SeparatorConfig$clickHideDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['clickHideDelay'] = value;
        return this;
    },
    
    cls: function Ext_menu_SeparatorConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_menu_SeparatorConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_menu_SeparatorConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_menu_SeparatorConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_menu_SeparatorConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_menu_SeparatorConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_menu_SeparatorConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    handler: function Ext_menu_SeparatorConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    hidden: function Ext_menu_SeparatorConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_menu_SeparatorConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_menu_SeparatorConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideOnClick: function Ext_menu_SeparatorConfig$hideOnClick(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['hideOnClick'] = value;
        return this;
    },
    
    hideParent: function Ext_menu_SeparatorConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_menu_SeparatorConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_menu_SeparatorConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_menu_SeparatorConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_menu_SeparatorConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_menu_SeparatorConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_menu_SeparatorConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_menu_SeparatorConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    overCls: function Ext_menu_SeparatorConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_menu_SeparatorConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_menu_SeparatorConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_menu_SeparatorConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_menu_SeparatorConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    scope: function Ext_menu_SeparatorConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stateEvents: function Ext_menu_SeparatorConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_menu_SeparatorConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_menu_SeparatorConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_menu_SeparatorConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tpl: function Ext_menu_SeparatorConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_menu_SeparatorConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    xtype: function Ext_menu_SeparatorConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.SeparatorConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.menu.TextItemConfig

Ext.menu.TextItemConfig = function Ext_menu_TextItemConfig() {
    Ext.menu.TextItemConfig.initializeBase(this);
}
Ext.menu.TextItemConfig.prototype = {
    
    activeClass: function Ext_menu_TextItemConfig$activeClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['activeClass'] = value;
        return this;
    },
    
    allowDomMove: function Ext_menu_TextItemConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    applyTo: function Ext_menu_TextItemConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_menu_TextItemConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoShow: function Ext_menu_TextItemConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_menu_TextItemConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    canActivate: function Ext_menu_TextItemConfig$canActivate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['canActivate'] = value;
        return this;
    },
    
    clearCls: function Ext_menu_TextItemConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickHideDelay: function Ext_menu_TextItemConfig$clickHideDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['clickHideDelay'] = value;
        return this;
    },
    
    cls: function Ext_menu_TextItemConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_menu_TextItemConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_menu_TextItemConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_menu_TextItemConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_menu_TextItemConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_menu_TextItemConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_menu_TextItemConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    handler: function Ext_menu_TextItemConfig$handler(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['handler'] = value;
        return this;
    },
    
    hidden: function Ext_menu_TextItemConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_menu_TextItemConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_menu_TextItemConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideOnClick: function Ext_menu_TextItemConfig$hideOnClick(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['hideOnClick'] = value;
        return this;
    },
    
    hideParent: function Ext_menu_TextItemConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_menu_TextItemConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_menu_TextItemConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_menu_TextItemConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_menu_TextItemConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_menu_TextItemConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_menu_TextItemConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_menu_TextItemConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    overCls: function Ext_menu_TextItemConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    plugins: function Ext_menu_TextItemConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_menu_TextItemConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_menu_TextItemConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    renderTo: function Ext_menu_TextItemConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    scope: function Ext_menu_TextItemConfig$scope(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['scope'] = value;
        return this;
    },
    
    stateEvents: function Ext_menu_TextItemConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_menu_TextItemConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_menu_TextItemConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_menu_TextItemConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    text: function Ext_menu_TextItemConfig$text(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['text'] = value;
        return this;
    },
    
    tpl: function Ext_menu_TextItemConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_menu_TextItemConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    xtype: function Ext_menu_TextItemConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.menu.TextItemConfig"></returns>
        this.o['xtype'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.slider');

////////////////////////////////////////////////////////////////////////////////
// Ext.slider.MultiSliderConfig

Ext.slider.MultiSliderConfig = function Ext_slider_MultiSliderConfig() {
    Ext.slider.MultiSliderConfig.initializeBase(this);
}
Ext.slider.MultiSliderConfig.prototype = {
    
    allowDomMove: function Ext_slider_MultiSliderConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_slider_MultiSliderConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animate: function Ext_slider_MultiSliderConfig$animate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['animate'] = value;
        return this;
    },
    
    applyTo: function Ext_slider_MultiSliderConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_slider_MultiSliderConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_slider_MultiSliderConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_slider_MultiSliderConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_slider_MultiSliderConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_slider_MultiSliderConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_slider_MultiSliderConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_slider_MultiSliderConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_slider_MultiSliderConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_slider_MultiSliderConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_slider_MultiSliderConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_slider_MultiSliderConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickToChange: function Ext_slider_MultiSliderConfig$clickToChange(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['clickToChange'] = value;
        return this;
    },
    
    cls: function Ext_slider_MultiSliderConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    constrainThumbs: function Ext_slider_MultiSliderConfig$constrainThumbs(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['constrainThumbs'] = value;
        return this;
    },
    
    contentEl: function Ext_slider_MultiSliderConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_slider_MultiSliderConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_slider_MultiSliderConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    decimalPrecision: function Ext_slider_MultiSliderConfig$decimalPrecision(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['decimalPrecision'] = value;
        return this;
    },
    
    disabled: function Ext_slider_MultiSliderConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_slider_MultiSliderConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_slider_MultiSliderConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_slider_MultiSliderConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_slider_MultiSliderConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_slider_MultiSliderConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_slider_MultiSliderConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_slider_MultiSliderConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_slider_MultiSliderConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_slider_MultiSliderConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_slider_MultiSliderConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    increment: function Ext_slider_MultiSliderConfig$increment(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['increment'] = value;
        return this;
    },
    
    itemCls: function Ext_slider_MultiSliderConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_slider_MultiSliderConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    keyIncrement: function Ext_slider_MultiSliderConfig$keyIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['keyIncrement'] = value;
        return this;
    },
    
    labelSeparator: function Ext_slider_MultiSliderConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_slider_MultiSliderConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_slider_MultiSliderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_slider_MultiSliderConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maxValue: function Ext_slider_MultiSliderConfig$maxValue(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['maxValue'] = value;
        return this;
    },
    
    minValue: function Ext_slider_MultiSliderConfig$minValue(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['minValue'] = value;
        return this;
    },
    
    overCls: function Ext_slider_MultiSliderConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_slider_MultiSliderConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_slider_MultiSliderConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_slider_MultiSliderConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_slider_MultiSliderConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_slider_MultiSliderConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_slider_MultiSliderConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_slider_MultiSliderConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_slider_MultiSliderConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_slider_MultiSliderConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_slider_MultiSliderConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_slider_MultiSliderConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_slider_MultiSliderConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_slider_MultiSliderConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_slider_MultiSliderConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    value: function Ext_slider_MultiSliderConfig$value(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vertical: function Ext_slider_MultiSliderConfig$vertical(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['vertical'] = value;
        return this;
    },
    
    width: function Ext_slider_MultiSliderConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_slider_MultiSliderConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_slider_MultiSliderConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_slider_MultiSliderConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.MultiSliderConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.slider.SingleSliderConfig

Ext.slider.SingleSliderConfig = function Ext_slider_SingleSliderConfig() {
    Ext.slider.SingleSliderConfig.initializeBase(this);
}
Ext.slider.SingleSliderConfig.prototype = {
    
    allowDomMove: function Ext_slider_SingleSliderConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_slider_SingleSliderConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animate: function Ext_slider_SingleSliderConfig$animate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['animate'] = value;
        return this;
    },
    
    applyTo: function Ext_slider_SingleSliderConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoEl: function Ext_slider_SingleSliderConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_slider_SingleSliderConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_slider_SingleSliderConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_slider_SingleSliderConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_slider_SingleSliderConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_slider_SingleSliderConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_slider_SingleSliderConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_slider_SingleSliderConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_slider_SingleSliderConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_slider_SingleSliderConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_slider_SingleSliderConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clickToChange: function Ext_slider_SingleSliderConfig$clickToChange(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['clickToChange'] = value;
        return this;
    },
    
    cls: function Ext_slider_SingleSliderConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    constrainThumbs: function Ext_slider_SingleSliderConfig$constrainThumbs(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['constrainThumbs'] = value;
        return this;
    },
    
    contentEl: function Ext_slider_SingleSliderConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_slider_SingleSliderConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_slider_SingleSliderConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    decimalPrecision: function Ext_slider_SingleSliderConfig$decimalPrecision(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['decimalPrecision'] = value;
        return this;
    },
    
    disabled: function Ext_slider_SingleSliderConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_slider_SingleSliderConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_slider_SingleSliderConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_slider_SingleSliderConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    height: function Ext_slider_SingleSliderConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_slider_SingleSliderConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_slider_SingleSliderConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_slider_SingleSliderConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_slider_SingleSliderConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_slider_SingleSliderConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_slider_SingleSliderConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    increment: function Ext_slider_SingleSliderConfig$increment(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['increment'] = value;
        return this;
    },
    
    itemCls: function Ext_slider_SingleSliderConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_slider_SingleSliderConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    keyIncrement: function Ext_slider_SingleSliderConfig$keyIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['keyIncrement'] = value;
        return this;
    },
    
    labelSeparator: function Ext_slider_SingleSliderConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_slider_SingleSliderConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_slider_SingleSliderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_slider_SingleSliderConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maxValue: function Ext_slider_SingleSliderConfig$maxValue(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['maxValue'] = value;
        return this;
    },
    
    minValue: function Ext_slider_SingleSliderConfig$minValue(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['minValue'] = value;
        return this;
    },
    
    overCls: function Ext_slider_SingleSliderConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_slider_SingleSliderConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_slider_SingleSliderConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_slider_SingleSliderConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_slider_SingleSliderConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_slider_SingleSliderConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_slider_SingleSliderConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_slider_SingleSliderConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_slider_SingleSliderConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_slider_SingleSliderConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_slider_SingleSliderConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_slider_SingleSliderConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_slider_SingleSliderConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_slider_SingleSliderConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_slider_SingleSliderConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    value: function Ext_slider_SingleSliderConfig$value(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vertical: function Ext_slider_SingleSliderConfig$vertical(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['vertical'] = value;
        return this;
    },
    
    width: function Ext_slider_SingleSliderConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_slider_SingleSliderConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_slider_SingleSliderConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_slider_SingleSliderConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.SingleSliderConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.slider.ThumbConfig

Ext.slider.ThumbConfig = function Ext_slider_ThumbConfig() {
    Ext.slider.ThumbConfig.initializeBase(this);
}
Ext.slider.ThumbConfig.prototype = {
    
    constrain: function Ext_slider_ThumbConfig$constrain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.ThumbConfig"></returns>
        this.o['constrain'] = value;
        return this;
    },
    
    slider: function Ext_slider_ThumbConfig$slider(value) {
        /// <param name="value" type="Ext.slider.MultiSlider">
        /// </param>
        /// <returns type="Ext.slider.ThumbConfig"></returns>
        this.o['slider'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.slider.TipConfig

Ext.slider.TipConfig = function Ext_slider_TipConfig() {
    Ext.slider.TipConfig.initializeBase(this);
}
Ext.slider.TipConfig.prototype = {
    
    activeItem: function Ext_slider_TipConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_slider_TipConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_slider_TipConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_slider_TipConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    applyTo: function Ext_slider_TipConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_slider_TipConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_slider_TipConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_slider_TipConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_slider_TipConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_slider_TipConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_slider_TipConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_slider_TipConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_slider_TipConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_slider_TipConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_slider_TipConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_slider_TipConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_slider_TipConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_slider_TipConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_slider_TipConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_slider_TipConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_slider_TipConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_slider_TipConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_slider_TipConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_slider_TipConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_slider_TipConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_slider_TipConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_slider_TipConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_slider_TipConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_slider_TipConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_slider_TipConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_slider_TipConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_slider_TipConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_slider_TipConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_slider_TipConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_slider_TipConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_slider_TipConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    contentEl: function Ext_slider_TipConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_slider_TipConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_slider_TipConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultAlign: function Ext_slider_TipConfig$defaultAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['defaultAlign'] = value;
        return this;
    },
    
    defaultType: function Ext_slider_TipConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_slider_TipConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_slider_TipConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_slider_TipConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    draggable: function Ext_slider_TipConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    elements: function Ext_slider_TipConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    fbar: function Ext_slider_TipConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_slider_TipConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_slider_TipConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_slider_TipConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_slider_TipConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_slider_TipConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_slider_TipConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_slider_TipConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_slider_TipConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_slider_TipConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_slider_TipConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_slider_TipConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_slider_TipConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_slider_TipConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_slider_TipConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_slider_TipConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_slider_TipConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_slider_TipConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_slider_TipConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_slider_TipConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_slider_TipConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_slider_TipConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_slider_TipConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_slider_TipConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_slider_TipConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_slider_TipConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_slider_TipConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_slider_TipConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_slider_TipConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_slider_TipConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_slider_TipConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_slider_TipConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    maxWidth: function Ext_slider_TipConfig$maxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['maxWidth'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_slider_TipConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    minWidth: function Ext_slider_TipConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_slider_TipConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_slider_TipConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_slider_TipConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_slider_TipConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_slider_TipConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_slider_TipConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_slider_TipConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_slider_TipConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_slider_TipConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_slider_TipConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_slider_TipConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_slider_TipConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    shadow: function Ext_slider_TipConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_slider_TipConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_slider_TipConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    stateEvents: function Ext_slider_TipConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_slider_TipConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_slider_TipConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_slider_TipConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_slider_TipConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_slider_TipConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_slider_TipConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_slider_TipConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_slider_TipConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_slider_TipConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_slider_TipConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_slider_TipConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_slider_TipConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    unstyled: function Ext_slider_TipConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    width: function Ext_slider_TipConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_slider_TipConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_slider_TipConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_slider_TipConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.slider.TipConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.state');

////////////////////////////////////////////////////////////////////////////////
// Ext.state.CookieProviderConfig

Ext.state.CookieProviderConfig = function Ext_state_CookieProviderConfig() {
    Ext.state.CookieProviderConfig.initializeBase(this);
}
Ext.state.CookieProviderConfig.prototype = {
    
    domain: function Ext_state_CookieProviderConfig$domain(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.state.CookieProviderConfig"></returns>
        this.o['domain'] = value;
        return this;
    },
    
    expires: function Ext_state_CookieProviderConfig$expires(value) {
        /// <param name="value" type="Date">
        /// </param>
        /// <returns type="Ext.state.CookieProviderConfig"></returns>
        this.o['expires'] = value;
        return this;
    },
    
    listeners: function Ext_state_CookieProviderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.state.CookieProviderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    path: function Ext_state_CookieProviderConfig$path(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.state.CookieProviderConfig"></returns>
        this.o['path'] = value;
        return this;
    },
    
    secure: function Ext_state_CookieProviderConfig$secure(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.state.CookieProviderConfig"></returns>
        this.o['secure'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.state.ProviderConfig

Ext.state.ProviderConfig = function Ext_state_ProviderConfig() {
    Ext.state.ProviderConfig.initializeBase(this);
}
Ext.state.ProviderConfig.prototype = {
    
    listeners: function Ext_state_ProviderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.state.ProviderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.util');

////////////////////////////////////////////////////////////////////////////////
// Ext.util.ClickRepeaterConfig

Ext.util.ClickRepeaterConfig = function Ext_util_ClickRepeaterConfig() {
    Ext.util.ClickRepeaterConfig.initializeBase(this);
}
Ext.util.ClickRepeaterConfig.prototype = {
    
    accelerate: function Ext_util_ClickRepeaterConfig$accelerate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.util.ClickRepeaterConfig"></returns>
        this.o['accelerate'] = value;
        return this;
    },
    
    delay: function Ext_util_ClickRepeaterConfig$delay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.util.ClickRepeaterConfig"></returns>
        this.o['delay'] = value;
        return this;
    },
    
    el: function Ext_util_ClickRepeaterConfig$el(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.util.ClickRepeaterConfig"></returns>
        this.o['el'] = value;
        return this;
    },
    
    interval: function Ext_util_ClickRepeaterConfig$interval(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.util.ClickRepeaterConfig"></returns>
        this.o['interval'] = value;
        return this;
    },
    
    listeners: function Ext_util_ClickRepeaterConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.util.ClickRepeaterConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    pressClass: function Ext_util_ClickRepeaterConfig$pressClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.util.ClickRepeaterConfig"></returns>
        this.o['pressClass'] = value;
        return this;
    },
    
    preventDefault: function Ext_util_ClickRepeaterConfig$preventDefault(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.util.ClickRepeaterConfig"></returns>
        this.o['preventDefault'] = value;
        return this;
    },
    
    stopDefault: function Ext_util_ClickRepeaterConfig$stopDefault(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.util.ClickRepeaterConfig"></returns>
        this.o['stopDefault'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.util.MixedCollectionConfig

Ext.util.MixedCollectionConfig = function Ext_util_MixedCollectionConfig() {
    Ext.util.MixedCollectionConfig.initializeBase(this);
}
Ext.util.MixedCollectionConfig.prototype = {
    
    allowFunctions: function Ext_util_MixedCollectionConfig$allowFunctions(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.util.MixedCollectionConfig"></returns>
        this.o['allowFunctions'] = value;
        return this;
    },
    
    listeners: function Ext_util_MixedCollectionConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.util.MixedCollectionConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.util.ObservableConfig

Ext.util.ObservableConfig = function Ext_util_ObservableConfig() {
    Ext.util.ObservableConfig.initializeBase(this);
}
Ext.util.ObservableConfig.prototype = {
    
    listeners: function Ext_util_ObservableConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.util.ObservableConfig"></returns>
        this.o['listeners'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.ux.data');

////////////////////////////////////////////////////////////////////////////////
// Ext.ux.data.PagingMemoryProxyConfig

Ext.ux.data.PagingMemoryProxyConfig = function Ext_ux_data_PagingMemoryProxyConfig() {
    Ext.ux.data.PagingMemoryProxyConfig.initializeBase(this);
}
Ext.ux.data.PagingMemoryProxyConfig.prototype = {
    
    api: function Ext_ux_data_PagingMemoryProxyConfig$api(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.data.PagingMemoryProxyConfig"></returns>
        this.o['api'] = value;
        return this;
    },
    
    doRequest: function Ext_ux_data_PagingMemoryProxyConfig$doRequest(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.data.PagingMemoryProxyConfig"></returns>
        this.o['doRequest'] = value;
        return this;
    },
    
    listeners: function Ext_ux_data_PagingMemoryProxyConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.data.PagingMemoryProxyConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    restful: function Ext_ux_data_PagingMemoryProxyConfig$restful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.data.PagingMemoryProxyConfig"></returns>
        this.o['restful'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.ux.form');

////////////////////////////////////////////////////////////////////////////////
// Ext.ux.form.FileUploadFieldConfig

Ext.ux.form.FileUploadFieldConfig = function Ext_ux_form_FileUploadFieldConfig() {
    Ext.ux.form.FileUploadFieldConfig.initializeBase(this);
}
Ext.ux.form.FileUploadFieldConfig.prototype = {
    
    allowBlank: function Ext_ux_form_FileUploadFieldConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_form_FileUploadFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_form_FileUploadFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_form_FileUploadFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_ux_form_FileUploadFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_form_FileUploadFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_form_FileUploadFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_form_FileUploadFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_form_FileUploadFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_form_FileUploadFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_ux_form_FileUploadFieldConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_form_FileUploadFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_form_FileUploadFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_form_FileUploadFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_form_FileUploadFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_form_FileUploadFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    buttonCfg: function Ext_ux_form_FileUploadFieldConfig$buttonCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['buttonCfg'] = value;
        return this;
    },
    
    buttonOffset: function Ext_ux_form_FileUploadFieldConfig$buttonOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['buttonOffset'] = value;
        return this;
    },
    
    buttonOnly: function Ext_ux_form_FileUploadFieldConfig$buttonOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['buttonOnly'] = value;
        return this;
    },
    
    buttonText: function Ext_ux_form_FileUploadFieldConfig$buttonText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['buttonText'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_form_FileUploadFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ux_form_FileUploadFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_form_FileUploadFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_form_FileUploadFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_form_FileUploadFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_ux_form_FileUploadFieldConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_ux_form_FileUploadFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_form_FileUploadFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    emptyClass: function Ext_ux_form_FileUploadFieldConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_ux_form_FileUploadFieldConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_ux_form_FileUploadFieldConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_ux_form_FileUploadFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_form_FileUploadFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_form_FileUploadFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_ux_form_FileUploadFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    grow: function Ext_ux_form_FileUploadFieldConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_ux_form_FileUploadFieldConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_ux_form_FileUploadFieldConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    height: function Ext_ux_form_FileUploadFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_form_FileUploadFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_form_FileUploadFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_form_FileUploadFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_form_FileUploadFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_form_FileUploadFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ux_form_FileUploadFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_ux_form_FileUploadFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_ux_form_FileUploadFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_ux_form_FileUploadFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_form_FileUploadFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_form_FileUploadFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_form_FileUploadFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_form_FileUploadFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ux_form_FileUploadFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_form_FileUploadFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_ux_form_FileUploadFieldConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxLength: function Ext_ux_form_FileUploadFieldConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_ux_form_FileUploadFieldConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    minLength: function Ext_ux_form_FileUploadFieldConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_ux_form_FileUploadFieldConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    msgFx: function Ext_ux_form_FileUploadFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_ux_form_FileUploadFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_ux_form_FileUploadFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_ux_form_FileUploadFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ux_form_FileUploadFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_form_FileUploadFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_form_FileUploadFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_ux_form_FileUploadFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_ux_form_FileUploadFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_ux_form_FileUploadFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_ux_form_FileUploadFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_ux_form_FileUploadFieldConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_ux_form_FileUploadFieldConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_ux_form_FileUploadFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_form_FileUploadFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_ux_form_FileUploadFieldConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_form_FileUploadFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_form_FileUploadFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_form_FileUploadFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_ux_form_FileUploadFieldConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_ux_form_FileUploadFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_ux_form_FileUploadFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_ux_form_FileUploadFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_form_FileUploadFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ux_form_FileUploadFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_form_FileUploadFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_ux_form_FileUploadFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_ux_form_FileUploadFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_ux_form_FileUploadFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_ux_form_FileUploadFieldConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_ux_form_FileUploadFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vtype: function Ext_ux_form_FileUploadFieldConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_ux_form_FileUploadFieldConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_ux_form_FileUploadFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_form_FileUploadFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_form_FileUploadFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_form_FileUploadFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.FileUploadFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.form.ItemSelectorConfig

Ext.ux.form.ItemSelectorConfig = function Ext_ux_form_ItemSelectorConfig() {
    Ext.ux.form.ItemSelectorConfig.initializeBase(this);
}
Ext.ux.form.ItemSelectorConfig.prototype = {
    
    allowDomMove: function Ext_ux_form_ItemSelectorConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_form_ItemSelectorConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_form_ItemSelectorConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_ux_form_ItemSelectorConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_form_ItemSelectorConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_form_ItemSelectorConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_form_ItemSelectorConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_form_ItemSelectorConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_form_ItemSelectorConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_form_ItemSelectorConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_form_ItemSelectorConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_form_ItemSelectorConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_form_ItemSelectorConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_form_ItemSelectorConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_form_ItemSelectorConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ux_form_ItemSelectorConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_form_ItemSelectorConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_form_ItemSelectorConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_form_ItemSelectorConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disabled: function Ext_ux_form_ItemSelectorConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_form_ItemSelectorConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    fieldClass: function Ext_ux_form_ItemSelectorConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_form_ItemSelectorConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_form_ItemSelectorConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_ux_form_ItemSelectorConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    height: function Ext_ux_form_ItemSelectorConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_form_ItemSelectorConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_form_ItemSelectorConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_form_ItemSelectorConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_form_ItemSelectorConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_form_ItemSelectorConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ux_form_ItemSelectorConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_ux_form_ItemSelectorConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_ux_form_ItemSelectorConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_ux_form_ItemSelectorConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_form_ItemSelectorConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_form_ItemSelectorConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_form_ItemSelectorConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_form_ItemSelectorConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ux_form_ItemSelectorConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_form_ItemSelectorConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    msgFx: function Ext_ux_form_ItemSelectorConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_ux_form_ItemSelectorConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    multiselects: function Ext_ux_form_ItemSelectorConfig$multiselects(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['multiselects'] = value;
        return this;
    },
    
    name: function Ext_ux_form_ItemSelectorConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_ux_form_ItemSelectorConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ux_form_ItemSelectorConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_form_ItemSelectorConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_form_ItemSelectorConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_ux_form_ItemSelectorConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_ux_form_ItemSelectorConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_ux_form_ItemSelectorConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_ux_form_ItemSelectorConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_form_ItemSelectorConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_form_ItemSelectorConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_form_ItemSelectorConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_form_ItemSelectorConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_form_ItemSelectorConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_form_ItemSelectorConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_ux_form_ItemSelectorConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_ux_form_ItemSelectorConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_form_ItemSelectorConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ux_form_ItemSelectorConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_form_ItemSelectorConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_ux_form_ItemSelectorConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_ux_form_ItemSelectorConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_ux_form_ItemSelectorConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_ux_form_ItemSelectorConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    width: function Ext_ux_form_ItemSelectorConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_form_ItemSelectorConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_form_ItemSelectorConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_form_ItemSelectorConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.ItemSelectorConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.form.MultiSelectConfig

Ext.ux.form.MultiSelectConfig = function Ext_ux_form_MultiSelectConfig() {
    Ext.ux.form.MultiSelectConfig.initializeBase(this);
}
Ext.ux.form.MultiSelectConfig.prototype = {
    
    allowBlank: function Ext_ux_form_MultiSelectConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_form_MultiSelectConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_form_MultiSelectConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    appendOnly: function Ext_ux_form_MultiSelectConfig$appendOnly(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['appendOnly'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_form_MultiSelectConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_ux_form_MultiSelectConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_form_MultiSelectConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_form_MultiSelectConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_form_MultiSelectConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_form_MultiSelectConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_form_MultiSelectConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_ux_form_MultiSelectConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_form_MultiSelectConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_form_MultiSelectConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_form_MultiSelectConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_form_MultiSelectConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_form_MultiSelectConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_form_MultiSelectConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ux_form_MultiSelectConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_form_MultiSelectConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_form_MultiSelectConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_form_MultiSelectConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    ddReorder: function Ext_ux_form_MultiSelectConfig$ddReorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['ddReorder'] = value;
        return this;
    },
    
    delimiter: function Ext_ux_form_MultiSelectConfig$delimiter(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['delimiter'] = value;
        return this;
    },
    
    disabled: function Ext_ux_form_MultiSelectConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_form_MultiSelectConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    displayField: function Ext_ux_form_MultiSelectConfig$displayField(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['displayField'] = value;
        return this;
    },
    
    dragGroup: function Ext_ux_form_MultiSelectConfig$dragGroup(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['dragGroup'] = value;
        return this;
    },
    
    dropGroup: function Ext_ux_form_MultiSelectConfig$dropGroup(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['dropGroup'] = value;
        return this;
    },
    
    fieldClass: function Ext_ux_form_MultiSelectConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_form_MultiSelectConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_form_MultiSelectConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_ux_form_MultiSelectConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    height: function Ext_ux_form_MultiSelectConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_form_MultiSelectConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_form_MultiSelectConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_form_MultiSelectConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_form_MultiSelectConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_form_MultiSelectConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ux_form_MultiSelectConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_ux_form_MultiSelectConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_ux_form_MultiSelectConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_ux_form_MultiSelectConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_form_MultiSelectConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_form_MultiSelectConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_form_MultiSelectConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_form_MultiSelectConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    legend: function Ext_ux_form_MultiSelectConfig$legend(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['legend'] = value;
        return this;
    },
    
    listeners: function Ext_ux_form_MultiSelectConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_form_MultiSelectConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maxSelections: function Ext_ux_form_MultiSelectConfig$maxSelections(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['maxSelections'] = value;
        return this;
    },
    
    maxSelectionsText: function Ext_ux_form_MultiSelectConfig$maxSelectionsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['maxSelectionsText'] = value;
        return this;
    },
    
    minSelections: function Ext_ux_form_MultiSelectConfig$minSelections(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['minSelections'] = value;
        return this;
    },
    
    minSelectionsText: function Ext_ux_form_MultiSelectConfig$minSelectionsText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['minSelectionsText'] = value;
        return this;
    },
    
    msgFx: function Ext_ux_form_MultiSelectConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_ux_form_MultiSelectConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_ux_form_MultiSelectConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_ux_form_MultiSelectConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ux_form_MultiSelectConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_form_MultiSelectConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_form_MultiSelectConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_ux_form_MultiSelectConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_ux_form_MultiSelectConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_ux_form_MultiSelectConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_ux_form_MultiSelectConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_form_MultiSelectConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_form_MultiSelectConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_form_MultiSelectConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_form_MultiSelectConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_form_MultiSelectConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_ux_form_MultiSelectConfig$store(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    style: function Ext_ux_form_MultiSelectConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_ux_form_MultiSelectConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_ux_form_MultiSelectConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_form_MultiSelectConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_ux_form_MultiSelectConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tpl: function Ext_ux_form_MultiSelectConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_form_MultiSelectConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_ux_form_MultiSelectConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_ux_form_MultiSelectConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_ux_form_MultiSelectConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    value: function Ext_ux_form_MultiSelectConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    valueField: function Ext_ux_form_MultiSelectConfig$valueField(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['valueField'] = value;
        return this;
    },
    
    view: function Ext_ux_form_MultiSelectConfig$view(value) {
        /// <param name="value" type="Ext.list.ListView">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['view'] = value;
        return this;
    },
    
    width: function Ext_ux_form_MultiSelectConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_form_MultiSelectConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_form_MultiSelectConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_form_MultiSelectConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.MultiSelectConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.form.SelectBoxConfig

Ext.ux.form.SelectBoxConfig = function Ext_ux_form_SelectBoxConfig() {
    Ext.ux.form.SelectBoxConfig.initializeBase(this);
}
Ext.ux.form.SelectBoxConfig.prototype = {
    
    allQuery: function Ext_ux_form_SelectBoxConfig$allQuery(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['allQuery'] = value;
        return this;
    },
    
    allowBlank: function Ext_ux_form_SelectBoxConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_form_SelectBoxConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_form_SelectBoxConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_form_SelectBoxConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_ux_form_SelectBoxConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_form_SelectBoxConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_form_SelectBoxConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_form_SelectBoxConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoSelect: function Ext_ux_form_SelectBoxConfig$autoSelect(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['autoSelect'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_form_SelectBoxConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_form_SelectBoxConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    blankText: function Ext_ux_form_SelectBoxConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_form_SelectBoxConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_form_SelectBoxConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_form_SelectBoxConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_form_SelectBoxConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_form_SelectBoxConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_form_SelectBoxConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    clearFilterOnReset: function Ext_ux_form_SelectBoxConfig$clearFilterOnReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['clearFilterOnReset'] = value;
        return this;
    },
    
    cls: function Ext_ux_form_SelectBoxConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_form_SelectBoxConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_form_SelectBoxConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_form_SelectBoxConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_ux_form_SelectBoxConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_ux_form_SelectBoxConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_form_SelectBoxConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    displayField: function Ext_ux_form_SelectBoxConfig$displayField(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['displayField'] = value;
        return this;
    },
    
    editable: function Ext_ux_form_SelectBoxConfig$editable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['editable'] = value;
        return this;
    },
    
    emptyClass: function Ext_ux_form_SelectBoxConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_ux_form_SelectBoxConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_ux_form_SelectBoxConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_ux_form_SelectBoxConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_form_SelectBoxConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_form_SelectBoxConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_ux_form_SelectBoxConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    forceSelection: function Ext_ux_form_SelectBoxConfig$forceSelection(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['forceSelection'] = value;
        return this;
    },
    
    grow: function Ext_ux_form_SelectBoxConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_ux_form_SelectBoxConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_ux_form_SelectBoxConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    handleHeight: function Ext_ux_form_SelectBoxConfig$handleHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['handleHeight'] = value;
        return this;
    },
    
    height: function Ext_ux_form_SelectBoxConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_form_SelectBoxConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hiddenId: function Ext_ux_form_SelectBoxConfig$hiddenId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['hiddenId'] = value;
        return this;
    },
    
    hiddenName: function Ext_ux_form_SelectBoxConfig$hiddenName(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['hiddenName'] = value;
        return this;
    },
    
    hiddenValue: function Ext_ux_form_SelectBoxConfig$hiddenValue(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['hiddenValue'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_form_SelectBoxConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_form_SelectBoxConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_form_SelectBoxConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    hideTrigger: function Ext_ux_form_SelectBoxConfig$hideTrigger(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['hideTrigger'] = value;
        return this;
    },
    
    html: function Ext_ux_form_SelectBoxConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ux_form_SelectBoxConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_ux_form_SelectBoxConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_ux_form_SelectBoxConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_ux_form_SelectBoxConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_form_SelectBoxConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_form_SelectBoxConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    itemSelector: function Ext_ux_form_SelectBoxConfig$itemSelector(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['itemSelector'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_form_SelectBoxConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_form_SelectBoxConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    lazyInit: function Ext_ux_form_SelectBoxConfig$lazyInit(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['lazyInit'] = value;
        return this;
    },
    
    lazyRender: function Ext_ux_form_SelectBoxConfig$lazyRender(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['lazyRender'] = value;
        return this;
    },
    
    listAlign: function Ext_ux_form_SelectBoxConfig$listAlign(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['listAlign'] = value;
        return this;
    },
    
    listClass: function Ext_ux_form_SelectBoxConfig$listClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['listClass'] = value;
        return this;
    },
    
    listEmptyText: function Ext_ux_form_SelectBoxConfig$listEmptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['listEmptyText'] = value;
        return this;
    },
    
    listWidth: function Ext_ux_form_SelectBoxConfig$listWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['listWidth'] = value;
        return this;
    },
    
    listeners: function Ext_ux_form_SelectBoxConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadingText: function Ext_ux_form_SelectBoxConfig$loadingText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['loadingText'] = value;
        return this;
    },
    
    margins: function Ext_ux_form_SelectBoxConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_ux_form_SelectBoxConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxHeight: function Ext_ux_form_SelectBoxConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    maxLength: function Ext_ux_form_SelectBoxConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_ux_form_SelectBoxConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    minChars: function Ext_ux_form_SelectBoxConfig$minChars(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['minChars'] = value;
        return this;
    },
    
    minHeight: function Ext_ux_form_SelectBoxConfig$minHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['minHeight'] = value;
        return this;
    },
    
    minLength: function Ext_ux_form_SelectBoxConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_ux_form_SelectBoxConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    minListWidth: function Ext_ux_form_SelectBoxConfig$minListWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['minListWidth'] = value;
        return this;
    },
    
    mode: function Ext_ux_form_SelectBoxConfig$mode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['mode'] = value;
        return this;
    },
    
    msgFx: function Ext_ux_form_SelectBoxConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_ux_form_SelectBoxConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_ux_form_SelectBoxConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    overCls: function Ext_ux_form_SelectBoxConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageSize: function Ext_ux_form_SelectBoxConfig$pageSize(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['pageSize'] = value;
        return this;
    },
    
    pageX: function Ext_ux_form_SelectBoxConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_form_SelectBoxConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_form_SelectBoxConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_ux_form_SelectBoxConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_ux_form_SelectBoxConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    queryDelay: function Ext_ux_form_SelectBoxConfig$queryDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['queryDelay'] = value;
        return this;
    },
    
    queryParam: function Ext_ux_form_SelectBoxConfig$queryParam(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['queryParam'] = value;
        return this;
    },
    
    readOnly: function Ext_ux_form_SelectBoxConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_ux_form_SelectBoxConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_ux_form_SelectBoxConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_ux_form_SelectBoxConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_ux_form_SelectBoxConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_form_SelectBoxConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizable: function Ext_ux_form_SelectBoxConfig$resizable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['resizable'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_ux_form_SelectBoxConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    selectedClass: function Ext_ux_form_SelectBoxConfig$selectedClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['selectedClass'] = value;
        return this;
    },
    
    shadow: function Ext_ux_form_SelectBoxConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_form_SelectBoxConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_form_SelectBoxConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_form_SelectBoxConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    store: function Ext_ux_form_SelectBoxConfig$store(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_ux_form_SelectBoxConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_ux_form_SelectBoxConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_ux_form_SelectBoxConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_ux_form_SelectBoxConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_form_SelectBoxConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    title: function Ext_ux_form_SelectBoxConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    tpl: function Ext_ux_form_SelectBoxConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_form_SelectBoxConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    transform: function Ext_ux_form_SelectBoxConfig$transform(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['transform'] = value;
        return this;
    },
    
    triggerAction: function Ext_ux_form_SelectBoxConfig$triggerAction(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['triggerAction'] = value;
        return this;
    },
    
    triggerClass: function Ext_ux_form_SelectBoxConfig$triggerClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['triggerClass'] = value;
        return this;
    },
    
    triggerConfig: function Ext_ux_form_SelectBoxConfig$triggerConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['triggerConfig'] = value;
        return this;
    },
    
    typeAhead: function Ext_ux_form_SelectBoxConfig$typeAhead(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['typeAhead'] = value;
        return this;
    },
    
    typeAheadDelay: function Ext_ux_form_SelectBoxConfig$typeAheadDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['typeAheadDelay'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_ux_form_SelectBoxConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_ux_form_SelectBoxConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_ux_form_SelectBoxConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_ux_form_SelectBoxConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_ux_form_SelectBoxConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    valueField: function Ext_ux_form_SelectBoxConfig$valueField(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['valueField'] = value;
        return this;
    },
    
    valueNotFoundText: function Ext_ux_form_SelectBoxConfig$valueNotFoundText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['valueNotFoundText'] = value;
        return this;
    },
    
    vtype: function Ext_ux_form_SelectBoxConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_ux_form_SelectBoxConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_ux_form_SelectBoxConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    wrapFocusClass: function Ext_ux_form_SelectBoxConfig$wrapFocusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['wrapFocusClass'] = value;
        return this;
    },
    
    x: function Ext_ux_form_SelectBoxConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_form_SelectBoxConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_form_SelectBoxConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SelectBoxConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.form.SpinnerFieldConfig

Ext.ux.form.SpinnerFieldConfig = function Ext_ux_form_SpinnerFieldConfig() {
    Ext.ux.form.SpinnerFieldConfig.initializeBase(this);
}
Ext.ux.form.SpinnerFieldConfig.prototype = {
    
    allowBlank: function Ext_ux_form_SpinnerFieldConfig$allowBlank(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['allowBlank'] = value;
        return this;
    },
    
    allowDecimals: function Ext_ux_form_SpinnerFieldConfig$allowDecimals(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['allowDecimals'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_form_SpinnerFieldConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    allowNegative: function Ext_ux_form_SpinnerFieldConfig$allowNegative(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['allowNegative'] = value;
        return this;
    },
    
    anchor: function Ext_ux_form_SpinnerFieldConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_form_SpinnerFieldConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoCreate: function Ext_ux_form_SpinnerFieldConfig$autoCreate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['autoCreate'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_form_SpinnerFieldConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_form_SpinnerFieldConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_form_SpinnerFieldConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_form_SpinnerFieldConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoStripChars: function Ext_ux_form_SpinnerFieldConfig$autoStripChars(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['autoStripChars'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_form_SpinnerFieldConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseChars: function Ext_ux_form_SpinnerFieldConfig$baseChars(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['baseChars'] = value;
        return this;
    },
    
    blankText: function Ext_ux_form_SpinnerFieldConfig$blankText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['blankText'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_form_SpinnerFieldConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_form_SpinnerFieldConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_form_SpinnerFieldConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_form_SpinnerFieldConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_form_SpinnerFieldConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_form_SpinnerFieldConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ux_form_SpinnerFieldConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_form_SpinnerFieldConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_form_SpinnerFieldConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_form_SpinnerFieldConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    decimalPrecision: function Ext_ux_form_SpinnerFieldConfig$decimalPrecision(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['decimalPrecision'] = value;
        return this;
    },
    
    decimalSeparator: function Ext_ux_form_SpinnerFieldConfig$decimalSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['decimalSeparator'] = value;
        return this;
    },
    
    disableKeyFilter: function Ext_ux_form_SpinnerFieldConfig$disableKeyFilter(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['disableKeyFilter'] = value;
        return this;
    },
    
    disabled: function Ext_ux_form_SpinnerFieldConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_form_SpinnerFieldConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    emptyClass: function Ext_ux_form_SpinnerFieldConfig$emptyClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['emptyClass'] = value;
        return this;
    },
    
    emptyText: function Ext_ux_form_SpinnerFieldConfig$emptyText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['emptyText'] = value;
        return this;
    },
    
    enableKeyEvents: function Ext_ux_form_SpinnerFieldConfig$enableKeyEvents(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['enableKeyEvents'] = value;
        return this;
    },
    
    fieldClass: function Ext_ux_form_SpinnerFieldConfig$fieldClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['fieldClass'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_form_SpinnerFieldConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_form_SpinnerFieldConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    focusClass: function Ext_ux_form_SpinnerFieldConfig$focusClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['focusClass'] = value;
        return this;
    },
    
    grow: function Ext_ux_form_SpinnerFieldConfig$grow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['grow'] = value;
        return this;
    },
    
    growMax: function Ext_ux_form_SpinnerFieldConfig$growMax(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['growMax'] = value;
        return this;
    },
    
    growMin: function Ext_ux_form_SpinnerFieldConfig$growMin(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['growMin'] = value;
        return this;
    },
    
    height: function Ext_ux_form_SpinnerFieldConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_form_SpinnerFieldConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_form_SpinnerFieldConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_form_SpinnerFieldConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_form_SpinnerFieldConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_form_SpinnerFieldConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ux_form_SpinnerFieldConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    inputType: function Ext_ux_form_SpinnerFieldConfig$inputType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['inputType'] = value;
        return this;
    },
    
    invalidClass: function Ext_ux_form_SpinnerFieldConfig$invalidClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['invalidClass'] = value;
        return this;
    },
    
    invalidText: function Ext_ux_form_SpinnerFieldConfig$invalidText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['invalidText'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_form_SpinnerFieldConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_form_SpinnerFieldConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_form_SpinnerFieldConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_form_SpinnerFieldConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    listeners: function Ext_ux_form_SpinnerFieldConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_form_SpinnerFieldConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskRe: function Ext_ux_form_SpinnerFieldConfig$maskRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['maskRe'] = value;
        return this;
    },
    
    maxLength: function Ext_ux_form_SpinnerFieldConfig$maxLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['maxLength'] = value;
        return this;
    },
    
    maxLengthText: function Ext_ux_form_SpinnerFieldConfig$maxLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['maxLengthText'] = value;
        return this;
    },
    
    maxText: function Ext_ux_form_SpinnerFieldConfig$maxText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['maxText'] = value;
        return this;
    },
    
    maxValue: function Ext_ux_form_SpinnerFieldConfig$maxValue(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['maxValue'] = value;
        return this;
    },
    
    minLength: function Ext_ux_form_SpinnerFieldConfig$minLength(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['minLength'] = value;
        return this;
    },
    
    minLengthText: function Ext_ux_form_SpinnerFieldConfig$minLengthText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['minLengthText'] = value;
        return this;
    },
    
    minText: function Ext_ux_form_SpinnerFieldConfig$minText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['minText'] = value;
        return this;
    },
    
    minValue: function Ext_ux_form_SpinnerFieldConfig$minValue(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['minValue'] = value;
        return this;
    },
    
    msgFx: function Ext_ux_form_SpinnerFieldConfig$msgFx(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['msgFx'] = value;
        return this;
    },
    
    msgTarget: function Ext_ux_form_SpinnerFieldConfig$msgTarget(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['msgTarget'] = value;
        return this;
    },
    
    name: function Ext_ux_form_SpinnerFieldConfig$name(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['name'] = value;
        return this;
    },
    
    nanText: function Ext_ux_form_SpinnerFieldConfig$nanText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['nanText'] = value;
        return this;
    },
    
    overCls: function Ext_ux_form_SpinnerFieldConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ux_form_SpinnerFieldConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_form_SpinnerFieldConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plugins: function Ext_ux_form_SpinnerFieldConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventMark: function Ext_ux_form_SpinnerFieldConfig$preventMark(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['preventMark'] = value;
        return this;
    },
    
    ptype: function Ext_ux_form_SpinnerFieldConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    readOnly: function Ext_ux_form_SpinnerFieldConfig$readOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['readOnly'] = value;
        return this;
    },
    
    ref_: function Ext_ux_form_SpinnerFieldConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    regex: function Ext_ux_form_SpinnerFieldConfig$regex(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['regex'] = value;
        return this;
    },
    
    regexText: function Ext_ux_form_SpinnerFieldConfig$regexText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['regexText'] = value;
        return this;
    },
    
    region: function Ext_ux_form_SpinnerFieldConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_form_SpinnerFieldConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    selectOnFocus: function Ext_ux_form_SpinnerFieldConfig$selectOnFocus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['selectOnFocus'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_form_SpinnerFieldConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_form_SpinnerFieldConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_form_SpinnerFieldConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    stripCharsRe: function Ext_ux_form_SpinnerFieldConfig$stripCharsRe(value) {
        /// <param name="value" type="RegExp">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['stripCharsRe'] = value;
        return this;
    },
    
    style: function Ext_ux_form_SpinnerFieldConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    submitValue: function Ext_ux_form_SpinnerFieldConfig$submitValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['submitValue'] = value;
        return this;
    },
    
    tabIndex: function Ext_ux_form_SpinnerFieldConfig$tabIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['tabIndex'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_form_SpinnerFieldConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ux_form_SpinnerFieldConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_form_SpinnerFieldConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    validateOnBlur: function Ext_ux_form_SpinnerFieldConfig$validateOnBlur(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['validateOnBlur'] = value;
        return this;
    },
    
    validationDelay: function Ext_ux_form_SpinnerFieldConfig$validationDelay(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['validationDelay'] = value;
        return this;
    },
    
    validationEvent: function Ext_ux_form_SpinnerFieldConfig$validationEvent(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['validationEvent'] = value;
        return this;
    },
    
    validator: function Ext_ux_form_SpinnerFieldConfig$validator(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['validator'] = value;
        return this;
    },
    
    value: function Ext_ux_form_SpinnerFieldConfig$value(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['value'] = value;
        return this;
    },
    
    vtype: function Ext_ux_form_SpinnerFieldConfig$vtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['vtype'] = value;
        return this;
    },
    
    vtypeText: function Ext_ux_form_SpinnerFieldConfig$vtypeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['vtypeText'] = value;
        return this;
    },
    
    width: function Ext_ux_form_SpinnerFieldConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_form_SpinnerFieldConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_form_SpinnerFieldConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_form_SpinnerFieldConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.form.SpinnerFieldConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.ux.grid.filter');

////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.filter.BooleanFilterConfig

Ext.ux.grid.filter.BooleanFilterConfig = function Ext_ux_grid_filter_BooleanFilterConfig() {
    Ext.ux.grid.filter.BooleanFilterConfig.initializeBase(this);
}
Ext.ux.grid.filter.BooleanFilterConfig.prototype = {
    
    active: function Ext_ux_grid_filter_BooleanFilterConfig$active(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.BooleanFilterConfig"></returns>
        this.o['active'] = value;
        return this;
    },
    
    dataIndex: function Ext_ux_grid_filter_BooleanFilterConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.BooleanFilterConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    defaultValue: function Ext_ux_grid_filter_BooleanFilterConfig$defaultValue(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.BooleanFilterConfig"></returns>
        this.o['defaultValue'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_filter_BooleanFilterConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.BooleanFilterConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    noText: function Ext_ux_grid_filter_BooleanFilterConfig$noText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.BooleanFilterConfig"></returns>
        this.o['noText'] = value;
        return this;
    },
    
    updateBuffer: function Ext_ux_grid_filter_BooleanFilterConfig$updateBuffer(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.BooleanFilterConfig"></returns>
        this.o['updateBuffer'] = value;
        return this;
    },
    
    yesText: function Ext_ux_grid_filter_BooleanFilterConfig$yesText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.BooleanFilterConfig"></returns>
        this.o['yesText'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.filter.DateFilterConfig

Ext.ux.grid.filter.DateFilterConfig = function Ext_ux_grid_filter_DateFilterConfig() {
    Ext.ux.grid.filter.DateFilterConfig.initializeBase(this);
}
Ext.ux.grid.filter.DateFilterConfig.prototype = {
    
    active: function Ext_ux_grid_filter_DateFilterConfig$active(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['active'] = value;
        return this;
    },
    
    afterText: function Ext_ux_grid_filter_DateFilterConfig$afterText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['afterText'] = value;
        return this;
    },
    
    beforeText: function Ext_ux_grid_filter_DateFilterConfig$beforeText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['beforeText'] = value;
        return this;
    },
    
    compareMap: function Ext_ux_grid_filter_DateFilterConfig$compareMap(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['compareMap'] = value;
        return this;
    },
    
    dataIndex: function Ext_ux_grid_filter_DateFilterConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    dateFormat: function Ext_ux_grid_filter_DateFilterConfig$dateFormat(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['dateFormat'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_filter_DateFilterConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    maxDate: function Ext_ux_grid_filter_DateFilterConfig$maxDate(value) {
        /// <param name="value" type="Date">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['maxDate'] = value;
        return this;
    },
    
    menuItemCfgs: function Ext_ux_grid_filter_DateFilterConfig$menuItemCfgs(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['menuItemCfgs'] = value;
        return this;
    },
    
    menuItems: function Ext_ux_grid_filter_DateFilterConfig$menuItems(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['menuItems'] = value;
        return this;
    },
    
    minDate: function Ext_ux_grid_filter_DateFilterConfig$minDate(value) {
        /// <param name="value" type="Date">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['minDate'] = value;
        return this;
    },
    
    onText: function Ext_ux_grid_filter_DateFilterConfig$onText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['onText'] = value;
        return this;
    },
    
    pickerOpts: function Ext_ux_grid_filter_DateFilterConfig$pickerOpts(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['pickerOpts'] = value;
        return this;
    },
    
    updateBuffer: function Ext_ux_grid_filter_DateFilterConfig$updateBuffer(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.DateFilterConfig"></returns>
        this.o['updateBuffer'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.filter.FilterConfig

Ext.ux.grid.filter.FilterConfig = function Ext_ux_grid_filter_FilterConfig() {
    Ext.ux.grid.filter.FilterConfig.initializeBase(this);
}
Ext.ux.grid.filter.FilterConfig.prototype = {
    
    active: function Ext_ux_grid_filter_FilterConfig$active(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.FilterConfig"></returns>
        this.o['active'] = value;
        return this;
    },
    
    dataIndex: function Ext_ux_grid_filter_FilterConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.FilterConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_filter_FilterConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.FilterConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    updateBuffer: function Ext_ux_grid_filter_FilterConfig$updateBuffer(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.FilterConfig"></returns>
        this.o['updateBuffer'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.filter.ListFilterConfig

Ext.ux.grid.filter.ListFilterConfig = function Ext_ux_grid_filter_ListFilterConfig() {
    Ext.ux.grid.filter.ListFilterConfig.initializeBase(this);
}
Ext.ux.grid.filter.ListFilterConfig.prototype = {
    
    active: function Ext_ux_grid_filter_ListFilterConfig$active(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.ListFilterConfig"></returns>
        this.o['active'] = value;
        return this;
    },
    
    dataIndex: function Ext_ux_grid_filter_ListFilterConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.ListFilterConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_filter_ListFilterConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.ListFilterConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    options: function Ext_ux_grid_filter_ListFilterConfig$options(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.ListFilterConfig"></returns>
        this.o['options'] = value;
        return this;
    },
    
    phpMode: function Ext_ux_grid_filter_ListFilterConfig$phpMode(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.ListFilterConfig"></returns>
        this.o['phpMode'] = value;
        return this;
    },
    
    store: function Ext_ux_grid_filter_ListFilterConfig$store(value) {
        /// <param name="value" type="Ext.data.Store">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.ListFilterConfig"></returns>
        this.o['store'] = value;
        return this;
    },
    
    updateBuffer: function Ext_ux_grid_filter_ListFilterConfig$updateBuffer(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.ListFilterConfig"></returns>
        this.o['updateBuffer'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.filter.NumericFilterConfig

Ext.ux.grid.filter.NumericFilterConfig = function Ext_ux_grid_filter_NumericFilterConfig() {
    Ext.ux.grid.filter.NumericFilterConfig.initializeBase(this);
}
Ext.ux.grid.filter.NumericFilterConfig.prototype = {
    
    active: function Ext_ux_grid_filter_NumericFilterConfig$active(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['active'] = value;
        return this;
    },
    
    dataIndex: function Ext_ux_grid_filter_NumericFilterConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    fieldCfg: function Ext_ux_grid_filter_NumericFilterConfig$fieldCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['fieldCfg'] = value;
        return this;
    },
    
    fieldCls: function Ext_ux_grid_filter_NumericFilterConfig$fieldCls(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['fieldCls'] = value;
        return this;
    },
    
    fields: function Ext_ux_grid_filter_NumericFilterConfig$fields(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['fields'] = value;
        return this;
    },
    
    iconCls: function Ext_ux_grid_filter_NumericFilterConfig$iconCls(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_filter_NumericFilterConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    menuItemCfgs: function Ext_ux_grid_filter_NumericFilterConfig$menuItemCfgs(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['menuItemCfgs'] = value;
        return this;
    },
    
    menuItems: function Ext_ux_grid_filter_NumericFilterConfig$menuItems(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['menuItems'] = value;
        return this;
    },
    
    updateBuffer: function Ext_ux_grid_filter_NumericFilterConfig$updateBuffer(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.NumericFilterConfig"></returns>
        this.o['updateBuffer'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.grid.filter.StringFilterConfig

Ext.ux.grid.filter.StringFilterConfig = function Ext_ux_grid_filter_StringFilterConfig() {
    Ext.ux.grid.filter.StringFilterConfig.initializeBase(this);
}
Ext.ux.grid.filter.StringFilterConfig.prototype = {
    
    active: function Ext_ux_grid_filter_StringFilterConfig$active(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.StringFilterConfig"></returns>
        this.o['active'] = value;
        return this;
    },
    
    dataIndex: function Ext_ux_grid_filter_StringFilterConfig$dataIndex(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.StringFilterConfig"></returns>
        this.o['dataIndex'] = value;
        return this;
    },
    
    iconCls: function Ext_ux_grid_filter_StringFilterConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.StringFilterConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    listeners: function Ext_ux_grid_filter_StringFilterConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.StringFilterConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    updateBuffer: function Ext_ux_grid_filter_StringFilterConfig$updateBuffer(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.grid.filter.StringFilterConfig"></returns>
        this.o['updateBuffer'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.ux.layout');

////////////////////////////////////////////////////////////////////////////////
// Ext.ux.layout.CenterLayoutConfig

Ext.ux.layout.CenterLayoutConfig = function Ext_ux_layout_CenterLayoutConfig() {
    Ext.ux.layout.CenterLayoutConfig.initializeBase(this);
}
Ext.ux.layout.CenterLayoutConfig.prototype = {
    
    extraCls: function Ext_ux_layout_CenterLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.layout.CenterLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_ux_layout_CenterLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.layout.CenterLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.layout.RowLayoutConfig

Ext.ux.layout.RowLayoutConfig = function Ext_ux_layout_RowLayoutConfig() {
    Ext.ux.layout.RowLayoutConfig.initializeBase(this);
}
Ext.ux.layout.RowLayoutConfig.prototype = {
    
    extraCls: function Ext_ux_layout_RowLayoutConfig$extraCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.layout.RowLayoutConfig"></returns>
        this.o['extraCls'] = value;
        return this;
    },
    
    renderHidden: function Ext_ux_layout_RowLayoutConfig$renderHidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.layout.RowLayoutConfig"></returns>
        this.o['renderHidden'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.ux.menu');

////////////////////////////////////////////////////////////////////////////////
// Ext.ux.menu.ListMenuConfig

Ext.ux.menu.ListMenuConfig = function Ext_ux_menu_ListMenuConfig() {
    Ext.ux.menu.ListMenuConfig.initializeBase(this);
}
Ext.ux.menu.ListMenuConfig.prototype = {
    
    activeItem: function Ext_ux_menu_ListMenuConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_menu_ListMenuConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    allowOtherMenus: function Ext_ux_menu_ListMenuConfig$allowOtherMenus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['allowOtherMenus'] = value;
        return this;
    },
    
    anchor: function Ext_ux_menu_ListMenuConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_menu_ListMenuConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_menu_ListMenuConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_menu_ListMenuConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_menu_ListMenuConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_menu_ListMenuConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_menu_ListMenuConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_menu_ListMenuConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_menu_ListMenuConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_menu_ListMenuConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_menu_ListMenuConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_menu_ListMenuConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_menu_ListMenuConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_menu_ListMenuConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_menu_ListMenuConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ux_menu_ListMenuConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_menu_ListMenuConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_menu_ListMenuConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_menu_ListMenuConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultAlign: function Ext_ux_menu_ListMenuConfig$defaultAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['defaultAlign'] = value;
        return this;
    },
    
    defaultOffsets: function Ext_ux_menu_ListMenuConfig$defaultOffsets(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['defaultOffsets'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_menu_ListMenuConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_menu_ListMenuConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ux_menu_ListMenuConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_menu_ListMenuConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableScrolling: function Ext_ux_menu_ListMenuConfig$enableScrolling(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['enableScrolling'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_menu_ListMenuConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_menu_ListMenuConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ux_menu_ListMenuConfig$floating(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_menu_ListMenuConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    height: function Ext_ux_menu_ListMenuConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_menu_ListMenuConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_menu_ListMenuConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_menu_ListMenuConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_menu_ListMenuConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_menu_ListMenuConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_menu_ListMenuConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ux_menu_ListMenuConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    ignoreParentClicks: function Ext_ux_menu_ListMenuConfig$ignoreParentClicks(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['ignoreParentClicks'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_menu_ListMenuConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_menu_ListMenuConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ux_menu_ListMenuConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelField: function Ext_ux_menu_ListMenuConfig$labelField(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['labelField'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_menu_ListMenuConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_menu_ListMenuConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_menu_ListMenuConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_menu_ListMenuConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ux_menu_ListMenuConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loadOnShow: function Ext_ux_menu_ListMenuConfig$loadOnShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['loadOnShow'] = value;
        return this;
    },
    
    margins: function Ext_ux_menu_ListMenuConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maxHeight: function Ext_ux_menu_ListMenuConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    minWidth: function Ext_ux_menu_ListMenuConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_menu_ListMenuConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_menu_ListMenuConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ux_menu_ListMenuConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_menu_ListMenuConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    paramPrefix: function Ext_ux_menu_ListMenuConfig$paramPrefix(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['paramPrefix'] = value;
        return this;
    },
    
    plain: function Ext_ux_menu_ListMenuConfig$plain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['plain'] = value;
        return this;
    },
    
    plugins: function Ext_ux_menu_ListMenuConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ux_menu_ListMenuConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_menu_ListMenuConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_menu_ListMenuConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_menu_ListMenuConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_menu_ListMenuConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    scrollIncrement: function Ext_ux_menu_ListMenuConfig$scrollIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['scrollIncrement'] = value;
        return this;
    },
    
    shadow: function Ext_ux_menu_ListMenuConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    showSeparator: function Ext_ux_menu_ListMenuConfig$showSeparator(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['showSeparator'] = value;
        return this;
    },
    
    single: function Ext_ux_menu_ListMenuConfig$single(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['single'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_menu_ListMenuConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_menu_ListMenuConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_menu_ListMenuConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_menu_ListMenuConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    subMenuAlign: function Ext_ux_menu_ListMenuConfig$subMenuAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['subMenuAlign'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_menu_ListMenuConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ux_menu_ListMenuConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_menu_ListMenuConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ux_menu_ListMenuConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_menu_ListMenuConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_menu_ListMenuConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_menu_ListMenuConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['y'] = value;
        return this;
    },
    
    zIndex: function Ext_ux_menu_ListMenuConfig$zIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.ListMenuConfig"></returns>
        this.o['zIndex'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.menu.RangeMenuConfig

Ext.ux.menu.RangeMenuConfig = function Ext_ux_menu_RangeMenuConfig() {
    Ext.ux.menu.RangeMenuConfig.initializeBase(this);
}
Ext.ux.menu.RangeMenuConfig.prototype = {
    
    activeItem: function Ext_ux_menu_RangeMenuConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_menu_RangeMenuConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    allowOtherMenus: function Ext_ux_menu_RangeMenuConfig$allowOtherMenus(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['allowOtherMenus'] = value;
        return this;
    },
    
    anchor: function Ext_ux_menu_RangeMenuConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_menu_RangeMenuConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_menu_RangeMenuConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_menu_RangeMenuConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_menu_RangeMenuConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_menu_RangeMenuConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_menu_RangeMenuConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_menu_RangeMenuConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_menu_RangeMenuConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_menu_RangeMenuConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_menu_RangeMenuConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_menu_RangeMenuConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_menu_RangeMenuConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_menu_RangeMenuConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_menu_RangeMenuConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    cls: function Ext_ux_menu_RangeMenuConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_menu_RangeMenuConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_menu_RangeMenuConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_menu_RangeMenuConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    defaultAlign: function Ext_ux_menu_RangeMenuConfig$defaultAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['defaultAlign'] = value;
        return this;
    },
    
    defaultOffsets: function Ext_ux_menu_RangeMenuConfig$defaultOffsets(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['defaultOffsets'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_menu_RangeMenuConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_menu_RangeMenuConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ux_menu_RangeMenuConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_menu_RangeMenuConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    enableScrolling: function Ext_ux_menu_RangeMenuConfig$enableScrolling(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['enableScrolling'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_menu_RangeMenuConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_menu_RangeMenuConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ux_menu_RangeMenuConfig$floating(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_menu_RangeMenuConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    height: function Ext_ux_menu_RangeMenuConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_menu_RangeMenuConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_menu_RangeMenuConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_menu_RangeMenuConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_menu_RangeMenuConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_menu_RangeMenuConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    html: function Ext_ux_menu_RangeMenuConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    id: function Ext_ux_menu_RangeMenuConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    ignoreParentClicks: function Ext_ux_menu_RangeMenuConfig$ignoreParentClicks(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['ignoreParentClicks'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_menu_RangeMenuConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_menu_RangeMenuConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ux_menu_RangeMenuConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_menu_RangeMenuConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_menu_RangeMenuConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_menu_RangeMenuConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_menu_RangeMenuConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    listeners: function Ext_ux_menu_RangeMenuConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    margins: function Ext_ux_menu_RangeMenuConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maxHeight: function Ext_ux_menu_RangeMenuConfig$maxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['maxHeight'] = value;
        return this;
    },
    
    minWidth: function Ext_ux_menu_RangeMenuConfig$minWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['minWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_menu_RangeMenuConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_menu_RangeMenuConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    pageX: function Ext_ux_menu_RangeMenuConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_menu_RangeMenuConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    plain: function Ext_ux_menu_RangeMenuConfig$plain(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['plain'] = value;
        return this;
    },
    
    plugins: function Ext_ux_menu_RangeMenuConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    ptype: function Ext_ux_menu_RangeMenuConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_menu_RangeMenuConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_menu_RangeMenuConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_menu_RangeMenuConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_menu_RangeMenuConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    scrollIncrement: function Ext_ux_menu_RangeMenuConfig$scrollIncrement(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['scrollIncrement'] = value;
        return this;
    },
    
    shadow: function Ext_ux_menu_RangeMenuConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    showSeparator: function Ext_ux_menu_RangeMenuConfig$showSeparator(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['showSeparator'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_menu_RangeMenuConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_menu_RangeMenuConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_menu_RangeMenuConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_menu_RangeMenuConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    subMenuAlign: function Ext_ux_menu_RangeMenuConfig$subMenuAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['subMenuAlign'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_menu_RangeMenuConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tpl: function Ext_ux_menu_RangeMenuConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_menu_RangeMenuConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    width: function Ext_ux_menu_RangeMenuConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_menu_RangeMenuConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_menu_RangeMenuConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_menu_RangeMenuConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['y'] = value;
        return this;
    },
    
    zIndex: function Ext_ux_menu_RangeMenuConfig$zIndex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.menu.RangeMenuConfig"></returns>
        this.o['zIndex'] = value;
        return this;
    }
}


Type.registerNamespace('Ext.ux.tree');

////////////////////////////////////////////////////////////////////////////////
// Ext.ux.tree.ColumnTreeConfig

Ext.ux.tree.ColumnTreeConfig = function Ext_ux_tree_ColumnTreeConfig() {
    Ext.ux.tree.ColumnTreeConfig.initializeBase(this);
}
Ext.ux.tree.ColumnTreeConfig.prototype = {
    
    activeItem: function Ext_ux_tree_ColumnTreeConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_tree_ColumnTreeConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_tree_ColumnTreeConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_ux_tree_ColumnTreeConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    animate: function Ext_ux_tree_ColumnTreeConfig$animate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['animate'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_tree_ColumnTreeConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_tree_ColumnTreeConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_tree_ColumnTreeConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_tree_ColumnTreeConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_ux_tree_ColumnTreeConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_tree_ColumnTreeConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_tree_ColumnTreeConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_tree_ColumnTreeConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_ux_tree_ColumnTreeConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_ux_tree_ColumnTreeConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_ux_tree_ColumnTreeConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_ux_tree_ColumnTreeConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_ux_tree_ColumnTreeConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_ux_tree_ColumnTreeConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_ux_tree_ColumnTreeConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_ux_tree_ColumnTreeConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_tree_ColumnTreeConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_tree_ColumnTreeConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_tree_ColumnTreeConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_tree_ColumnTreeConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_tree_ColumnTreeConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_tree_ColumnTreeConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ux_tree_ColumnTreeConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_ux_tree_ColumnTreeConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_ux_tree_ColumnTreeConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_tree_ColumnTreeConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_ux_tree_ColumnTreeConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_ux_tree_ColumnTreeConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_ux_tree_ColumnTreeConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_ux_tree_ColumnTreeConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_ux_tree_ColumnTreeConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_ux_tree_ColumnTreeConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    containerScroll: function Ext_ux_tree_ColumnTreeConfig$containerScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['containerScroll'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_tree_ColumnTreeConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_tree_ColumnTreeConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_tree_ColumnTreeConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    ddAppendOnly: function Ext_ux_tree_ColumnTreeConfig$ddAppendOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['ddAppendOnly'] = value;
        return this;
    },
    
    ddGroup: function Ext_ux_tree_ColumnTreeConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    ddScroll: function Ext_ux_tree_ColumnTreeConfig$ddScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['ddScroll'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_tree_ColumnTreeConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_tree_ColumnTreeConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ux_tree_ColumnTreeConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_tree_ColumnTreeConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    dragConfig: function Ext_ux_tree_ColumnTreeConfig$dragConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['dragConfig'] = value;
        return this;
    },
    
    draggable: function Ext_ux_tree_ColumnTreeConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    dropConfig: function Ext_ux_tree_ColumnTreeConfig$dropConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['dropConfig'] = value;
        return this;
    },
    
    elements: function Ext_ux_tree_ColumnTreeConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableDD: function Ext_ux_tree_ColumnTreeConfig$enableDD(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['enableDD'] = value;
        return this;
    },
    
    enableDrag: function Ext_ux_tree_ColumnTreeConfig$enableDrag(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['enableDrag'] = value;
        return this;
    },
    
    enableDrop: function Ext_ux_tree_ColumnTreeConfig$enableDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['enableDrop'] = value;
        return this;
    },
    
    fbar: function Ext_ux_tree_ColumnTreeConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_tree_ColumnTreeConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_tree_ColumnTreeConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ux_tree_ColumnTreeConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_ux_tree_ColumnTreeConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_ux_tree_ColumnTreeConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_tree_ColumnTreeConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_ux_tree_ColumnTreeConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_ux_tree_ColumnTreeConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_ux_tree_ColumnTreeConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_ux_tree_ColumnTreeConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_ux_tree_ColumnTreeConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_tree_ColumnTreeConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_tree_ColumnTreeConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_ux_tree_ColumnTreeConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_tree_ColumnTreeConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_tree_ColumnTreeConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_tree_ColumnTreeConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    hlColor: function Ext_ux_tree_ColumnTreeConfig$hlColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['hlColor'] = value;
        return this;
    },
    
    hlDrop: function Ext_ux_tree_ColumnTreeConfig$hlDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['hlDrop'] = value;
        return this;
    },
    
    html: function Ext_ux_tree_ColumnTreeConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_ux_tree_ColumnTreeConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ux_tree_ColumnTreeConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_tree_ColumnTreeConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_tree_ColumnTreeConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ux_tree_ColumnTreeConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_ux_tree_ColumnTreeConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_tree_ColumnTreeConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_tree_ColumnTreeConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_tree_ColumnTreeConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_tree_ColumnTreeConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    lines: function Ext_ux_tree_ColumnTreeConfig$lines(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['lines'] = value;
        return this;
    },
    
    listeners: function Ext_ux_tree_ColumnTreeConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loader: function Ext_ux_tree_ColumnTreeConfig$loader(value) {
        /// <param name="value" type="Ext.tree.TreeLoader">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['loader'] = value;
        return this;
    },
    
    margins: function Ext_ux_tree_ColumnTreeConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_ux_tree_ColumnTreeConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_ux_tree_ColumnTreeConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_tree_ColumnTreeConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_tree_ColumnTreeConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_ux_tree_ColumnTreeConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_ux_tree_ColumnTreeConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_tree_ColumnTreeConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    pathSeparator: function Ext_ux_tree_ColumnTreeConfig$pathSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['pathSeparator'] = value;
        return this;
    },
    
    plugins: function Ext_ux_tree_ColumnTreeConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_ux_tree_ColumnTreeConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_ux_tree_ColumnTreeConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_tree_ColumnTreeConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_tree_ColumnTreeConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_tree_ColumnTreeConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    requestMethod: function Ext_ux_tree_ColumnTreeConfig$requestMethod(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['requestMethod'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_tree_ColumnTreeConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    root: function Ext_ux_tree_ColumnTreeConfig$root(value) {
        /// <param name="value" type="Ext.tree.TreeNode">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['root'] = value;
        return this;
    },
    
    rootVisible: function Ext_ux_tree_ColumnTreeConfig$rootVisible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['rootVisible'] = value;
        return this;
    },
    
    selModel: function Ext_ux_tree_ColumnTreeConfig$selModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['selModel'] = value;
        return this;
    },
    
    shadow: function Ext_ux_tree_ColumnTreeConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_ux_tree_ColumnTreeConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_ux_tree_ColumnTreeConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    singleExpand: function Ext_ux_tree_ColumnTreeConfig$singleExpand(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['singleExpand'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_tree_ColumnTreeConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_tree_ColumnTreeConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_tree_ColumnTreeConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_tree_ColumnTreeConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_tree_ColumnTreeConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_ux_tree_ColumnTreeConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_ux_tree_ColumnTreeConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_ux_tree_ColumnTreeConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_ux_tree_ColumnTreeConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_ux_tree_ColumnTreeConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_ux_tree_ColumnTreeConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_ux_tree_ColumnTreeConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_tree_ColumnTreeConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouseOver: function Ext_ux_tree_ColumnTreeConfig$trackMouseOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['trackMouseOver'] = value;
        return this;
    },
    
    unstyled: function Ext_ux_tree_ColumnTreeConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    useArrows: function Ext_ux_tree_ColumnTreeConfig$useArrows(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['useArrows'] = value;
        return this;
    },
    
    width: function Ext_ux_tree_ColumnTreeConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_tree_ColumnTreeConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_tree_ColumnTreeConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_tree_ColumnTreeConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.ColumnTreeConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.tree.TreeGridConfig

Ext.ux.tree.TreeGridConfig = function Ext_ux_tree_TreeGridConfig() {
    Ext.ux.tree.TreeGridConfig.initializeBase(this);
}
Ext.ux.tree.TreeGridConfig.prototype = {
    
    activeItem: function Ext_ux_tree_TreeGridConfig$activeItem(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['activeItem'] = value;
        return this;
    },
    
    allowDomMove: function Ext_ux_tree_TreeGridConfig$allowDomMove(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['allowDomMove'] = value;
        return this;
    },
    
    anchor: function Ext_ux_tree_TreeGridConfig$anchor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['anchor'] = value;
        return this;
    },
    
    animCollapse: function Ext_ux_tree_TreeGridConfig$animCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['animCollapse'] = value;
        return this;
    },
    
    animate: function Ext_ux_tree_TreeGridConfig$animate(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['animate'] = value;
        return this;
    },
    
    applyTo: function Ext_ux_tree_TreeGridConfig$applyTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['applyTo'] = value;
        return this;
    },
    
    autoDestroy: function Ext_ux_tree_TreeGridConfig$autoDestroy(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['autoDestroy'] = value;
        return this;
    },
    
    autoEl: function Ext_ux_tree_TreeGridConfig$autoEl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['autoEl'] = value;
        return this;
    },
    
    autoHeight: function Ext_ux_tree_TreeGridConfig$autoHeight(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['autoHeight'] = value;
        return this;
    },
    
    autoLoad: function Ext_ux_tree_TreeGridConfig$autoLoad(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['autoLoad'] = value;
        return this;
    },
    
    autoScroll: function Ext_ux_tree_TreeGridConfig$autoScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['autoScroll'] = value;
        return this;
    },
    
    autoShow: function Ext_ux_tree_TreeGridConfig$autoShow(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['autoShow'] = value;
        return this;
    },
    
    autoWidth: function Ext_ux_tree_TreeGridConfig$autoWidth(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['autoWidth'] = value;
        return this;
    },
    
    baseCls: function Ext_ux_tree_TreeGridConfig$baseCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['baseCls'] = value;
        return this;
    },
    
    bbar: function Ext_ux_tree_TreeGridConfig$bbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['bbar'] = value;
        return this;
    },
    
    bbarCfg: function Ext_ux_tree_TreeGridConfig$bbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['bbarCfg'] = value;
        return this;
    },
    
    bodyBorder: function Ext_ux_tree_TreeGridConfig$bodyBorder(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['bodyBorder'] = value;
        return this;
    },
    
    bodyCfg: function Ext_ux_tree_TreeGridConfig$bodyCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['bodyCfg'] = value;
        return this;
    },
    
    bodyCssClass: function Ext_ux_tree_TreeGridConfig$bodyCssClass(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['bodyCssClass'] = value;
        return this;
    },
    
    bodyStyle: function Ext_ux_tree_TreeGridConfig$bodyStyle(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['bodyStyle'] = value;
        return this;
    },
    
    border: function Ext_ux_tree_TreeGridConfig$border(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['border'] = value;
        return this;
    },
    
    boxMaxHeight: function Ext_ux_tree_TreeGridConfig$boxMaxHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['boxMaxHeight'] = value;
        return this;
    },
    
    boxMaxWidth: function Ext_ux_tree_TreeGridConfig$boxMaxWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['boxMaxWidth'] = value;
        return this;
    },
    
    boxMinHeight: function Ext_ux_tree_TreeGridConfig$boxMinHeight(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['boxMinHeight'] = value;
        return this;
    },
    
    boxMinWidth: function Ext_ux_tree_TreeGridConfig$boxMinWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['boxMinWidth'] = value;
        return this;
    },
    
    bubbleEvents: function Ext_ux_tree_TreeGridConfig$bubbleEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['bubbleEvents'] = value;
        return this;
    },
    
    bufferResize: function Ext_ux_tree_TreeGridConfig$bufferResize(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['bufferResize'] = value;
        return this;
    },
    
    buttonAlign: function Ext_ux_tree_TreeGridConfig$buttonAlign(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['buttonAlign'] = value;
        return this;
    },
    
    buttons: function Ext_ux_tree_TreeGridConfig$buttons(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['buttons'] = value;
        return this;
    },
    
    bwrapCfg: function Ext_ux_tree_TreeGridConfig$bwrapCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['bwrapCfg'] = value;
        return this;
    },
    
    clearCls: function Ext_ux_tree_TreeGridConfig$clearCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['clearCls'] = value;
        return this;
    },
    
    closable: function Ext_ux_tree_TreeGridConfig$closable(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['closable'] = value;
        return this;
    },
    
    cls: function Ext_ux_tree_TreeGridConfig$cls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['cls'] = value;
        return this;
    },
    
    collapseFirst: function Ext_ux_tree_TreeGridConfig$collapseFirst(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['collapseFirst'] = value;
        return this;
    },
    
    collapsed: function Ext_ux_tree_TreeGridConfig$collapsed(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['collapsed'] = value;
        return this;
    },
    
    collapsedCls: function Ext_ux_tree_TreeGridConfig$collapsedCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['collapsedCls'] = value;
        return this;
    },
    
    collapsible: function Ext_ux_tree_TreeGridConfig$collapsible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['collapsible'] = value;
        return this;
    },
    
    containerScroll: function Ext_ux_tree_TreeGridConfig$containerScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['containerScroll'] = value;
        return this;
    },
    
    contentEl: function Ext_ux_tree_TreeGridConfig$contentEl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['contentEl'] = value;
        return this;
    },
    
    ctCls: function Ext_ux_tree_TreeGridConfig$ctCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['ctCls'] = value;
        return this;
    },
    
    data: function Ext_ux_tree_TreeGridConfig$data(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['data'] = value;
        return this;
    },
    
    ddAppendOnly: function Ext_ux_tree_TreeGridConfig$ddAppendOnly(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['ddAppendOnly'] = value;
        return this;
    },
    
    ddGroup: function Ext_ux_tree_TreeGridConfig$ddGroup(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['ddGroup'] = value;
        return this;
    },
    
    ddScroll: function Ext_ux_tree_TreeGridConfig$ddScroll(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['ddScroll'] = value;
        return this;
    },
    
    defaultType: function Ext_ux_tree_TreeGridConfig$defaultType(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['defaultType'] = value;
        return this;
    },
    
    defaults: function Ext_ux_tree_TreeGridConfig$defaults(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['defaults'] = value;
        return this;
    },
    
    disabled: function Ext_ux_tree_TreeGridConfig$disabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['disabled'] = value;
        return this;
    },
    
    disabledClass: function Ext_ux_tree_TreeGridConfig$disabledClass(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['disabledClass'] = value;
        return this;
    },
    
    dragConfig: function Ext_ux_tree_TreeGridConfig$dragConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['dragConfig'] = value;
        return this;
    },
    
    draggable: function Ext_ux_tree_TreeGridConfig$draggable(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['draggable'] = value;
        return this;
    },
    
    dropConfig: function Ext_ux_tree_TreeGridConfig$dropConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['dropConfig'] = value;
        return this;
    },
    
    elements: function Ext_ux_tree_TreeGridConfig$elements(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['elements'] = value;
        return this;
    },
    
    enableDD: function Ext_ux_tree_TreeGridConfig$enableDD(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['enableDD'] = value;
        return this;
    },
    
    enableDrag: function Ext_ux_tree_TreeGridConfig$enableDrag(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['enableDrag'] = value;
        return this;
    },
    
    enableDrop: function Ext_ux_tree_TreeGridConfig$enableDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['enableDrop'] = value;
        return this;
    },
    
    fbar: function Ext_ux_tree_TreeGridConfig$fbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['fbar'] = value;
        return this;
    },
    
    fieldLabel: function Ext_ux_tree_TreeGridConfig$fieldLabel(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['fieldLabel'] = value;
        return this;
    },
    
    flex: function Ext_ux_tree_TreeGridConfig$flex(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['flex'] = value;
        return this;
    },
    
    floating: function Ext_ux_tree_TreeGridConfig$floating(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['floating'] = value;
        return this;
    },
    
    footer: function Ext_ux_tree_TreeGridConfig$footer(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['footer'] = value;
        return this;
    },
    
    footerCfg: function Ext_ux_tree_TreeGridConfig$footerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['footerCfg'] = value;
        return this;
    },
    
    forceLayout: function Ext_ux_tree_TreeGridConfig$forceLayout(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['forceLayout'] = value;
        return this;
    },
    
    frame: function Ext_ux_tree_TreeGridConfig$frame(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['frame'] = value;
        return this;
    },
    
    header: function Ext_ux_tree_TreeGridConfig$header(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['header'] = value;
        return this;
    },
    
    headerAsText: function Ext_ux_tree_TreeGridConfig$headerAsText(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['headerAsText'] = value;
        return this;
    },
    
    headerCfg: function Ext_ux_tree_TreeGridConfig$headerCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['headerCfg'] = value;
        return this;
    },
    
    height: function Ext_ux_tree_TreeGridConfig$height(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['height'] = value;
        return this;
    },
    
    hidden: function Ext_ux_tree_TreeGridConfig$hidden(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['hidden'] = value;
        return this;
    },
    
    hideBorders: function Ext_ux_tree_TreeGridConfig$hideBorders(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['hideBorders'] = value;
        return this;
    },
    
    hideCollapseTool: function Ext_ux_tree_TreeGridConfig$hideCollapseTool(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['hideCollapseTool'] = value;
        return this;
    },
    
    hideLabel: function Ext_ux_tree_TreeGridConfig$hideLabel(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['hideLabel'] = value;
        return this;
    },
    
    hideMode: function Ext_ux_tree_TreeGridConfig$hideMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['hideMode'] = value;
        return this;
    },
    
    hideParent: function Ext_ux_tree_TreeGridConfig$hideParent(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['hideParent'] = value;
        return this;
    },
    
    hlColor: function Ext_ux_tree_TreeGridConfig$hlColor(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['hlColor'] = value;
        return this;
    },
    
    hlDrop: function Ext_ux_tree_TreeGridConfig$hlDrop(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['hlDrop'] = value;
        return this;
    },
    
    html: function Ext_ux_tree_TreeGridConfig$html(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['html'] = value;
        return this;
    },
    
    iconCls: function Ext_ux_tree_TreeGridConfig$iconCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['iconCls'] = value;
        return this;
    },
    
    id: function Ext_ux_tree_TreeGridConfig$id(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['id'] = value;
        return this;
    },
    
    itemCls: function Ext_ux_tree_TreeGridConfig$itemCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['itemCls'] = value;
        return this;
    },
    
    itemId: function Ext_ux_tree_TreeGridConfig$itemId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['itemId'] = value;
        return this;
    },
    
    items: function Ext_ux_tree_TreeGridConfig$items(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['items'] = value;
        return this;
    },
    
    keys: function Ext_ux_tree_TreeGridConfig$keys(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['keys'] = value;
        return this;
    },
    
    labelSeparator: function Ext_ux_tree_TreeGridConfig$labelSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['labelSeparator'] = value;
        return this;
    },
    
    labelStyle: function Ext_ux_tree_TreeGridConfig$labelStyle(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['labelStyle'] = value;
        return this;
    },
    
    layout: function Ext_ux_tree_TreeGridConfig$layout(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['layout'] = value;
        return this;
    },
    
    layoutConfig: function Ext_ux_tree_TreeGridConfig$layoutConfig(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['layoutConfig'] = value;
        return this;
    },
    
    lines: function Ext_ux_tree_TreeGridConfig$lines(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['lines'] = value;
        return this;
    },
    
    listeners: function Ext_ux_tree_TreeGridConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    loader: function Ext_ux_tree_TreeGridConfig$loader(value) {
        /// <param name="value" type="Ext.tree.TreeLoader">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['loader'] = value;
        return this;
    },
    
    margins: function Ext_ux_tree_TreeGridConfig$margins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['margins'] = value;
        return this;
    },
    
    maskDisabled: function Ext_ux_tree_TreeGridConfig$maskDisabled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['maskDisabled'] = value;
        return this;
    },
    
    minButtonWidth: function Ext_ux_tree_TreeGridConfig$minButtonWidth(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['minButtonWidth'] = value;
        return this;
    },
    
    monitorResize: function Ext_ux_tree_TreeGridConfig$monitorResize(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['monitorResize'] = value;
        return this;
    },
    
    overCls: function Ext_ux_tree_TreeGridConfig$overCls(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['overCls'] = value;
        return this;
    },
    
    padding: function Ext_ux_tree_TreeGridConfig$padding(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['padding'] = value;
        return this;
    },
    
    pageX: function Ext_ux_tree_TreeGridConfig$pageX(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['pageX'] = value;
        return this;
    },
    
    pageY: function Ext_ux_tree_TreeGridConfig$pageY(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['pageY'] = value;
        return this;
    },
    
    pathSeparator: function Ext_ux_tree_TreeGridConfig$pathSeparator(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['pathSeparator'] = value;
        return this;
    },
    
    plugins: function Ext_ux_tree_TreeGridConfig$plugins(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['plugins'] = value;
        return this;
    },
    
    preventBodyReset: function Ext_ux_tree_TreeGridConfig$preventBodyReset(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['preventBodyReset'] = value;
        return this;
    },
    
    ptype: function Ext_ux_tree_TreeGridConfig$ptype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['ptype'] = value;
        return this;
    },
    
    ref_: function Ext_ux_tree_TreeGridConfig$ref_(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['ref'] = value;
        return this;
    },
    
    region: function Ext_ux_tree_TreeGridConfig$region(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['region'] = value;
        return this;
    },
    
    renderTo: function Ext_ux_tree_TreeGridConfig$renderTo(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['renderTo'] = value;
        return this;
    },
    
    requestMethod: function Ext_ux_tree_TreeGridConfig$requestMethod(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['requestMethod'] = value;
        return this;
    },
    
    resizeEvent: function Ext_ux_tree_TreeGridConfig$resizeEvent(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['resizeEvent'] = value;
        return this;
    },
    
    root: function Ext_ux_tree_TreeGridConfig$root(value) {
        /// <param name="value" type="Ext.tree.TreeNode">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['root'] = value;
        return this;
    },
    
    rootVisible: function Ext_ux_tree_TreeGridConfig$rootVisible(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['rootVisible'] = value;
        return this;
    },
    
    selModel: function Ext_ux_tree_TreeGridConfig$selModel(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['selModel'] = value;
        return this;
    },
    
    shadow: function Ext_ux_tree_TreeGridConfig$shadow(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['shadow'] = value;
        return this;
    },
    
    shadowOffset: function Ext_ux_tree_TreeGridConfig$shadowOffset(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['shadowOffset'] = value;
        return this;
    },
    
    shim: function Ext_ux_tree_TreeGridConfig$shim(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['shim'] = value;
        return this;
    },
    
    singleExpand: function Ext_ux_tree_TreeGridConfig$singleExpand(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['singleExpand'] = value;
        return this;
    },
    
    stateEvents: function Ext_ux_tree_TreeGridConfig$stateEvents(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['stateEvents'] = value;
        return this;
    },
    
    stateId: function Ext_ux_tree_TreeGridConfig$stateId(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['stateId'] = value;
        return this;
    },
    
    stateful: function Ext_ux_tree_TreeGridConfig$stateful(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['stateful'] = value;
        return this;
    },
    
    style: function Ext_ux_tree_TreeGridConfig$style(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['style'] = value;
        return this;
    },
    
    tabTip: function Ext_ux_tree_TreeGridConfig$tabTip(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['tabTip'] = value;
        return this;
    },
    
    tbar: function Ext_ux_tree_TreeGridConfig$tbar(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['tbar'] = value;
        return this;
    },
    
    tbarCfg: function Ext_ux_tree_TreeGridConfig$tbarCfg(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['tbarCfg'] = value;
        return this;
    },
    
    title: function Ext_ux_tree_TreeGridConfig$title(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['title'] = value;
        return this;
    },
    
    titleCollapse: function Ext_ux_tree_TreeGridConfig$titleCollapse(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['titleCollapse'] = value;
        return this;
    },
    
    toolTemplate: function Ext_ux_tree_TreeGridConfig$toolTemplate(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['toolTemplate'] = value;
        return this;
    },
    
    tools: function Ext_ux_tree_TreeGridConfig$tools(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['tools'] = value;
        return this;
    },
    
    tpl: function Ext_ux_tree_TreeGridConfig$tpl(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['tpl'] = value;
        return this;
    },
    
    tplWriteMode: function Ext_ux_tree_TreeGridConfig$tplWriteMode(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['tplWriteMode'] = value;
        return this;
    },
    
    trackMouseOver: function Ext_ux_tree_TreeGridConfig$trackMouseOver(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['trackMouseOver'] = value;
        return this;
    },
    
    unstyled: function Ext_ux_tree_TreeGridConfig$unstyled(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['unstyled'] = value;
        return this;
    },
    
    useArrows: function Ext_ux_tree_TreeGridConfig$useArrows(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['useArrows'] = value;
        return this;
    },
    
    width: function Ext_ux_tree_TreeGridConfig$width(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['width'] = value;
        return this;
    },
    
    x: function Ext_ux_tree_TreeGridConfig$x(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['x'] = value;
        return this;
    },
    
    xtype: function Ext_ux_tree_TreeGridConfig$xtype(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['xtype'] = value;
        return this;
    },
    
    y: function Ext_ux_tree_TreeGridConfig$y(value) {
        /// <param name="value" type="Number">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridConfig"></returns>
        this.o['y'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.tree.TreeGridLoaderConfig

Ext.ux.tree.TreeGridLoaderConfig = function Ext_ux_tree_TreeGridLoaderConfig() {
    Ext.ux.tree.TreeGridLoaderConfig.initializeBase(this);
}
Ext.ux.tree.TreeGridLoaderConfig.prototype = {
    
    baseAttrs: function Ext_ux_tree_TreeGridLoaderConfig$baseAttrs(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['baseAttrs'] = value;
        return this;
    },
    
    baseParams: function Ext_ux_tree_TreeGridLoaderConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    clearOnLoad: function Ext_ux_tree_TreeGridLoaderConfig$clearOnLoad(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['clearOnLoad'] = value;
        return this;
    },
    
    dataUrl: function Ext_ux_tree_TreeGridLoaderConfig$dataUrl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['dataUrl'] = value;
        return this;
    },
    
    directFn: function Ext_ux_tree_TreeGridLoaderConfig$directFn(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['directFn'] = value;
        return this;
    },
    
    listeners: function Ext_ux_tree_TreeGridLoaderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    nodeParameter: function Ext_ux_tree_TreeGridLoaderConfig$nodeParameter(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['nodeParameter'] = value;
        return this;
    },
    
    paramOrder: function Ext_ux_tree_TreeGridLoaderConfig$paramOrder(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['paramOrder'] = value;
        return this;
    },
    
    paramsAsHash: function Ext_ux_tree_TreeGridLoaderConfig$paramsAsHash(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['paramsAsHash'] = value;
        return this;
    },
    
    preloadChildren: function Ext_ux_tree_TreeGridLoaderConfig$preloadChildren(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['preloadChildren'] = value;
        return this;
    },
    
    requestMethod: function Ext_ux_tree_TreeGridLoaderConfig$requestMethod(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['requestMethod'] = value;
        return this;
    },
    
    uiProviders: function Ext_ux_tree_TreeGridLoaderConfig$uiProviders(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['uiProviders'] = value;
        return this;
    },
    
    url: function Ext_ux_tree_TreeGridLoaderConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridLoaderConfig"></returns>
        this.o['url'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.tree.TreeGridSorterConfig

Ext.ux.tree.TreeGridSorterConfig = function Ext_ux_tree_TreeGridSorterConfig() {
    Ext.ux.tree.TreeGridSorterConfig.initializeBase(this);
}
Ext.ux.tree.TreeGridSorterConfig.prototype = {
    
    caseSensitive: function Ext_ux_tree_TreeGridSorterConfig$caseSensitive(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridSorterConfig"></returns>
        this.o['caseSensitive'] = value;
        return this;
    },
    
    dir: function Ext_ux_tree_TreeGridSorterConfig$dir(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridSorterConfig"></returns>
        this.o['dir'] = value;
        return this;
    },
    
    folderSort: function Ext_ux_tree_TreeGridSorterConfig$folderSort(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridSorterConfig"></returns>
        this.o['folderSort'] = value;
        return this;
    },
    
    leafAttr: function Ext_ux_tree_TreeGridSorterConfig$leafAttr(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridSorterConfig"></returns>
        this.o['leafAttr'] = value;
        return this;
    },
    
    property: function Ext_ux_tree_TreeGridSorterConfig$property(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridSorterConfig"></returns>
        this.o['property'] = value;
        return this;
    },
    
    sortAscText: function Ext_ux_tree_TreeGridSorterConfig$sortAscText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridSorterConfig"></returns>
        this.o['sortAscText'] = value;
        return this;
    },
    
    sortClasses: function Ext_ux_tree_TreeGridSorterConfig$sortClasses(value) {
        /// <param name="value" type="Array">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridSorterConfig"></returns>
        this.o['sortClasses'] = value;
        return this;
    },
    
    sortDescText: function Ext_ux_tree_TreeGridSorterConfig$sortDescText(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridSorterConfig"></returns>
        this.o['sortDescText'] = value;
        return this;
    },
    
    sortType: function Ext_ux_tree_TreeGridSorterConfig$sortType(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.tree.TreeGridSorterConfig"></returns>
        this.o['sortType'] = value;
        return this;
    }
}


////////////////////////////////////////////////////////////////////////////////
// Ext.ux.tree.XmlTreeLoaderConfig

Ext.ux.tree.XmlTreeLoaderConfig = function Ext_ux_tree_XmlTreeLoaderConfig() {
    Ext.ux.tree.XmlTreeLoaderConfig.initializeBase(this);
}
Ext.ux.tree.XmlTreeLoaderConfig.prototype = {
    
    baseAttrs: function Ext_ux_tree_XmlTreeLoaderConfig$baseAttrs(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['baseAttrs'] = value;
        return this;
    },
    
    baseParams: function Ext_ux_tree_XmlTreeLoaderConfig$baseParams(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['baseParams'] = value;
        return this;
    },
    
    clearOnLoad: function Ext_ux_tree_XmlTreeLoaderConfig$clearOnLoad(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['clearOnLoad'] = value;
        return this;
    },
    
    dataUrl: function Ext_ux_tree_XmlTreeLoaderConfig$dataUrl(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['dataUrl'] = value;
        return this;
    },
    
    directFn: function Ext_ux_tree_XmlTreeLoaderConfig$directFn(value) {
        /// <param name="value" type="ss.Delegate">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['directFn'] = value;
        return this;
    },
    
    listeners: function Ext_ux_tree_XmlTreeLoaderConfig$listeners(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['listeners'] = value;
        return this;
    },
    
    nodeParameter: function Ext_ux_tree_XmlTreeLoaderConfig$nodeParameter(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['nodeParameter'] = value;
        return this;
    },
    
    paramOrder: function Ext_ux_tree_XmlTreeLoaderConfig$paramOrder(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['paramOrder'] = value;
        return this;
    },
    
    paramsAsHash: function Ext_ux_tree_XmlTreeLoaderConfig$paramsAsHash(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['paramsAsHash'] = value;
        return this;
    },
    
    preloadChildren: function Ext_ux_tree_XmlTreeLoaderConfig$preloadChildren(value) {
        /// <param name="value" type="Boolean">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['preloadChildren'] = value;
        return this;
    },
    
    requestMethod: function Ext_ux_tree_XmlTreeLoaderConfig$requestMethod(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['requestMethod'] = value;
        return this;
    },
    
    uiProviders: function Ext_ux_tree_XmlTreeLoaderConfig$uiProviders(value) {
        /// <param name="value" type="Object">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['uiProviders'] = value;
        return this;
    },
    
    url: function Ext_ux_tree_XmlTreeLoaderConfig$url(value) {
        /// <param name="value" type="String">
        /// </param>
        /// <returns type="Ext.ux.tree.XmlTreeLoaderConfig"></returns>
        this.o['url'] = value;
        return this;
    }
}


Ext.AbstractConfig.registerClass('Ext.AbstractConfig');
Ext.util.ObservableConfig.registerClass('Ext.util.ObservableConfig', Ext.AbstractConfig);
Ext.ComponentConfig.registerClass('Ext.ComponentConfig', Ext.util.ObservableConfig);
Ext.EditorConfig.registerClass('Ext.EditorConfig', Ext.ComponentConfig);
Ext.DataViewLabelEditorConfig.registerClass('Ext.DataViewLabelEditorConfig', Ext.EditorConfig);
Ext.ScriptSharpAdaptor.registerClass('Ext.ScriptSharpAdaptor');
Ext.ActionConfig.registerClass('Ext.ActionConfig', Ext.AbstractConfig);
Ext.data.ConnectionConfig.registerClass('Ext.data.ConnectionConfig', Ext.util.ObservableConfig);
Ext.AjaxConfig.registerClass('Ext.AjaxConfig', Ext.data.ConnectionConfig);
Ext.BoxComponentConfig.registerClass('Ext.BoxComponentConfig', Ext.ComponentConfig);
Ext.ButtonConfig.registerClass('Ext.ButtonConfig', Ext.BoxComponentConfig);
Ext.ContainerConfig.registerClass('Ext.ContainerConfig', Ext.BoxComponentConfig);
Ext.PanelConfig.registerClass('Ext.PanelConfig', Ext.ContainerConfig);
Ext.ButtonGroupConfig.registerClass('Ext.ButtonGroupConfig', Ext.PanelConfig);
Ext.ColorPaletteConfig.registerClass('Ext.ColorPaletteConfig', Ext.ComponentConfig);
Ext.SplitButtonConfig.registerClass('Ext.SplitButtonConfig', Ext.ButtonConfig);
Ext.CycleButtonConfig.registerClass('Ext.CycleButtonConfig', Ext.SplitButtonConfig);
Ext.DataViewConfig.registerClass('Ext.DataViewConfig', Ext.BoxComponentConfig);
Ext.DatePickerConfig.registerClass('Ext.DatePickerConfig', Ext.ComponentConfig);
Ext.DirectConfig.registerClass('Ext.DirectConfig', Ext.util.ObservableConfig);
Ext.ElementConfig.registerClass('Ext.ElementConfig', Ext.AbstractConfig);
Ext.FlashComponentConfig.registerClass('Ext.FlashComponentConfig', Ext.BoxComponentConfig);
Ext.FxConfig.registerClass('Ext.FxConfig', Ext.AbstractConfig);
Ext.HistoryConfig.registerClass('Ext.HistoryConfig', Ext.util.ObservableConfig);
Ext.KeyNavConfig.registerClass('Ext.KeyNavConfig', Ext.AbstractConfig);
Ext.LayerConfig.registerClass('Ext.LayerConfig', Ext.ElementConfig);
Ext.LoadMaskConfig.registerClass('Ext.LoadMaskConfig', Ext.AbstractConfig);
Ext.ToolbarConfig.registerClass('Ext.ToolbarConfig', Ext.ContainerConfig);
Ext.PagingToolbarConfig.registerClass('Ext.PagingToolbarConfig', Ext.ToolbarConfig);
Ext.ProgressBarConfig.registerClass('Ext.ProgressBarConfig', Ext.BoxComponentConfig);
Ext.TipConfig.registerClass('Ext.TipConfig', Ext.PanelConfig);
Ext.ToolTipConfig.registerClass('Ext.ToolTipConfig', Ext.TipConfig);
Ext.QuickTipConfig.registerClass('Ext.QuickTipConfig', Ext.ToolTipConfig);
Ext.ResizableConfig.registerClass('Ext.ResizableConfig', Ext.util.ObservableConfig);
Ext.ShadowConfig.registerClass('Ext.ShadowConfig', Ext.AbstractConfig);
Ext.SpacerConfig.registerClass('Ext.SpacerConfig', Ext.BoxComponentConfig);
Ext.SplitBarConfig.registerClass('Ext.SplitBarConfig', Ext.util.ObservableConfig);
Ext.util.MixedCollectionConfig.registerClass('Ext.util.MixedCollectionConfig', Ext.util.ObservableConfig);
Ext.StoreMgrConfig.registerClass('Ext.StoreMgrConfig', Ext.util.MixedCollectionConfig);
Ext.TabPanelConfig.registerClass('Ext.TabPanelConfig', Ext.PanelConfig);
Ext.TemplateConfig.registerClass('Ext.TemplateConfig', Ext.AbstractConfig);
Ext.ToolbarItemConfig.registerClass('Ext.ToolbarItemConfig', Ext.BoxComponentConfig);
Ext.ToolbarSpacerConfig.registerClass('Ext.ToolbarSpacerConfig', Ext.ToolbarItemConfig);
Ext.ToolbarFillConfig.registerClass('Ext.ToolbarFillConfig', Ext.ToolbarSpacerConfig);
Ext.ToolbarSeparatorConfig.registerClass('Ext.ToolbarSeparatorConfig', Ext.ToolbarItemConfig);
Ext.ToolbarTextItemConfig.registerClass('Ext.ToolbarTextItemConfig', Ext.ToolbarItemConfig);
Ext.UpdaterConfig.registerClass('Ext.UpdaterConfig', Ext.util.ObservableConfig);
Ext.ViewportConfig.registerClass('Ext.ViewportConfig', Ext.ContainerConfig);
Ext.WindowConfig.registerClass('Ext.WindowConfig', Ext.PanelConfig);
Ext.XTemplateConfig.registerClass('Ext.XTemplateConfig', Ext.TemplateConfig);
Ext.tree.ColumnResizerConfig.registerClass('Ext.tree.ColumnResizerConfig', Ext.util.ObservableConfig);
Ext.data.NodeConfig.registerClass('Ext.data.NodeConfig', Ext.util.ObservableConfig);
Ext.tree.TreeNodeConfig.registerClass('Ext.tree.TreeNodeConfig', Ext.data.NodeConfig);
Ext.tree.AsyncTreeNodeConfig.registerClass('Ext.tree.AsyncTreeNodeConfig', Ext.tree.TreeNodeConfig);
Ext.tree.DefaultSelectionModelConfig.registerClass('Ext.tree.DefaultSelectionModelConfig', Ext.util.ObservableConfig);
Ext.tree.MultiSelectionModelConfig.registerClass('Ext.tree.MultiSelectionModelConfig', Ext.util.ObservableConfig);
Ext.dd.DragSourceConfig.registerClass('Ext.dd.DragSourceConfig', Ext.AbstractConfig);
Ext.dd.DragZoneConfig.registerClass('Ext.dd.DragZoneConfig', Ext.dd.DragSourceConfig);
Ext.tree.TreeDragZoneConfig.registerClass('Ext.tree.TreeDragZoneConfig', Ext.dd.DragZoneConfig);
Ext.dd.DropTargetConfig.registerClass('Ext.dd.DropTargetConfig', Ext.AbstractConfig);
Ext.dd.DropZoneConfig.registerClass('Ext.dd.DropZoneConfig', Ext.dd.DropTargetConfig);
Ext.tree.TreeDropZoneConfig.registerClass('Ext.tree.TreeDropZoneConfig', Ext.dd.DropZoneConfig);
Ext.tree.TreeEditorConfig.registerClass('Ext.tree.TreeEditorConfig', Ext.EditorConfig);
Ext.tree.TreeLoaderConfig.registerClass('Ext.tree.TreeLoaderConfig', Ext.util.ObservableConfig);
Ext.tree.TreePanelConfig.registerClass('Ext.tree.TreePanelConfig', Ext.PanelConfig);
Ext.tree.TreeSorterConfig.registerClass('Ext.tree.TreeSorterConfig', Ext.AbstractConfig);
Ext.grid.ColumnModelConfig.registerClass('Ext.grid.ColumnModelConfig', Ext.util.ObservableConfig);
Ext.ux.grid.LockingColumnModelConfig.registerClass('Ext.ux.grid.LockingColumnModelConfig', Ext.grid.ColumnModelConfig);
Ext.grid.GridViewConfig.registerClass('Ext.grid.GridViewConfig', Ext.util.ObservableConfig);
Ext.ux.grid.LockingGridViewConfig.registerClass('Ext.ux.grid.LockingGridViewConfig', Ext.grid.GridViewConfig);
Ext.ux.grid.BufferViewConfig.registerClass('Ext.ux.grid.BufferViewConfig', Ext.grid.GridViewConfig);
Ext.grid.ColumnConfig.registerClass('Ext.grid.ColumnConfig', Ext.util.ObservableConfig);
Ext.ux.grid.CheckColumnConfig.registerClass('Ext.ux.grid.CheckColumnConfig', Ext.grid.ColumnConfig);
Ext.ux.grid.GridFiltersConfig.registerClass('Ext.ux.grid.GridFiltersConfig', Ext.util.ObservableConfig);
Ext.ux.grid.GroupSummaryConfig.registerClass('Ext.ux.grid.GroupSummaryConfig', Ext.util.ObservableConfig);
Ext.ux.grid.HybridSummaryConfig.registerClass('Ext.ux.grid.HybridSummaryConfig', Ext.ux.grid.GroupSummaryConfig);
Ext.ux.grid.RowEditorConfig.registerClass('Ext.ux.grid.RowEditorConfig', Ext.PanelConfig);
Ext.ux.grid.RowExpanderConfig.registerClass('Ext.ux.grid.RowExpanderConfig', Ext.util.ObservableConfig);
Ext.grid.GridPanelConfig.registerClass('Ext.grid.GridPanelConfig', Ext.PanelConfig);
Ext.ux.grid.TableGridConfig.registerClass('Ext.ux.grid.TableGridConfig', Ext.grid.GridPanelConfig);
Ext.ux.GroupTabConfig.registerClass('Ext.ux.GroupTabConfig', Ext.ContainerConfig);
Ext.ux.GroupTabPanelConfig.registerClass('Ext.ux.GroupTabPanelConfig', Ext.TabPanelConfig);
Ext.ux.GMapPanelConfig.registerClass('Ext.ux.GMapPanelConfig', Ext.PanelConfig);
Ext.ux.ProgressBarPagerConfig.registerClass('Ext.ux.ProgressBarPagerConfig', Ext.AbstractConfig);
Ext.ux.SpinnerConfig.registerClass('Ext.ux.SpinnerConfig', Ext.util.ObservableConfig);
Ext.ux.StatusBarConfig.registerClass('Ext.ux.StatusBarConfig', Ext.ToolbarConfig);
Ext.ux.TabCloseMenuConfig.registerClass('Ext.ux.TabCloseMenuConfig', Ext.AbstractConfig);
Ext.ux.TabScrollerMenuConfig.registerClass('Ext.ux.TabScrollerMenuConfig', Ext.AbstractConfig);
Ext.ux.ValidationStatusConfig.registerClass('Ext.ux.ValidationStatusConfig', Ext.ComponentConfig);
Ext.chart.ChartConfig.registerClass('Ext.chart.ChartConfig', Ext.FlashComponentConfig);
Ext.chart.CartesianChartConfig.registerClass('Ext.chart.CartesianChartConfig', Ext.chart.ChartConfig);
Ext.chart.BarChartConfig.registerClass('Ext.chart.BarChartConfig', Ext.chart.CartesianChartConfig);
Ext.chart.ColumnChartConfig.registerClass('Ext.chart.ColumnChartConfig', Ext.chart.CartesianChartConfig);
Ext.chart.LineChartConfig.registerClass('Ext.chart.LineChartConfig', Ext.chart.CartesianChartConfig);
Ext.chart.PieChartConfig.registerClass('Ext.chart.PieChartConfig', Ext.chart.ChartConfig);
Ext.chart.StackedBarChartConfig.registerClass('Ext.chart.StackedBarChartConfig', Ext.chart.CartesianChartConfig);
Ext.chart.StackedColumnChartConfig.registerClass('Ext.chart.StackedColumnChartConfig', Ext.chart.CartesianChartConfig);
Ext.data.DataReaderConfig.registerClass('Ext.data.DataReaderConfig', Ext.AbstractConfig);
Ext.data.JsonReaderConfig.registerClass('Ext.data.JsonReaderConfig', Ext.data.DataReaderConfig);
Ext.data.ArrayReaderConfig.registerClass('Ext.data.ArrayReaderConfig', Ext.data.JsonReaderConfig);
Ext.data.StoreConfig.registerClass('Ext.data.StoreConfig', Ext.util.ObservableConfig);
Ext.data.ArrayStoreConfig.registerClass('Ext.data.ArrayStoreConfig', Ext.data.StoreConfig);
Ext.data.DataProxyConfig.registerClass('Ext.data.DataProxyConfig', Ext.util.ObservableConfig);
Ext.data.DataWriterConfig.registerClass('Ext.data.DataWriterConfig', Ext.AbstractConfig);
Ext.data.DirectProxyConfig.registerClass('Ext.data.DirectProxyConfig', Ext.data.DataProxyConfig);
Ext.data.DirectStoreConfig.registerClass('Ext.data.DirectStoreConfig', Ext.data.StoreConfig);
Ext.data.FieldConfig.registerClass('Ext.data.FieldConfig', Ext.AbstractConfig);
Ext.data.GroupingStoreConfig.registerClass('Ext.data.GroupingStoreConfig', Ext.data.StoreConfig);
Ext.data.HttpProxyConfig.registerClass('Ext.data.HttpProxyConfig', Ext.data.DataProxyConfig);
Ext.data.JsonStoreConfig.registerClass('Ext.data.JsonStoreConfig', Ext.data.StoreConfig);
Ext.data.JsonWriterConfig.registerClass('Ext.data.JsonWriterConfig', Ext.data.DataWriterConfig);
Ext.data.MemoryProxyConfig.registerClass('Ext.data.MemoryProxyConfig', Ext.data.DataProxyConfig);
Ext.data.RequestConfig.registerClass('Ext.data.RequestConfig', Ext.AbstractConfig);
Ext.data.ResponseConfig.registerClass('Ext.data.ResponseConfig', Ext.AbstractConfig);
Ext.data.ScriptTagProxyConfig.registerClass('Ext.data.ScriptTagProxyConfig', Ext.data.DataProxyConfig);
Ext.data.TreeConfig.registerClass('Ext.data.TreeConfig', Ext.util.ObservableConfig);
Ext.data.XmlReaderConfig.registerClass('Ext.data.XmlReaderConfig', Ext.data.DataReaderConfig);
Ext.data.XmlStoreConfig.registerClass('Ext.data.XmlStoreConfig', Ext.data.StoreConfig);
Ext.data.XmlWriterConfig.registerClass('Ext.data.XmlWriterConfig', Ext.data.DataWriterConfig);
Ext.dd.DragTrackerConfig.registerClass('Ext.dd.DragTrackerConfig', Ext.util.ObservableConfig);
Ext.dd.PanelProxyConfig.registerClass('Ext.dd.PanelProxyConfig', Ext.AbstractConfig);
Ext.dd.StatusProxyConfig.registerClass('Ext.dd.StatusProxyConfig', Ext.AbstractConfig);
Ext.direct.ProviderConfig.registerClass('Ext.direct.ProviderConfig', Ext.util.ObservableConfig);
Ext.direct.JsonProviderConfig.registerClass('Ext.direct.JsonProviderConfig', Ext.direct.ProviderConfig);
Ext.direct.PollingProviderConfig.registerClass('Ext.direct.PollingProviderConfig', Ext.direct.JsonProviderConfig);
Ext.direct.RemotingProviderConfig.registerClass('Ext.direct.RemotingProviderConfig', Ext.direct.JsonProviderConfig);
Ext.form.ActionConfig.registerClass('Ext.form.ActionConfig', Ext.AbstractConfig);
Ext.form.ActionLoadConfig.registerClass('Ext.form.ActionLoadConfig', Ext.form.ActionConfig);
Ext.form.ActionDirectLoadConfig.registerClass('Ext.form.ActionDirectLoadConfig', Ext.form.ActionLoadConfig);
Ext.form.ActionSubmitConfig.registerClass('Ext.form.ActionSubmitConfig', Ext.form.ActionConfig);
Ext.form.ActionDirectSubmitConfig.registerClass('Ext.form.ActionDirectSubmitConfig', Ext.form.ActionSubmitConfig);
Ext.form.BasicFormConfig.registerClass('Ext.form.BasicFormConfig', Ext.util.ObservableConfig);
Ext.form.FieldConfig.registerClass('Ext.form.FieldConfig', Ext.BoxComponentConfig);
Ext.form.CheckboxConfig.registerClass('Ext.form.CheckboxConfig', Ext.form.FieldConfig);
Ext.form.CheckboxGroupConfig.registerClass('Ext.form.CheckboxGroupConfig', Ext.form.FieldConfig);
Ext.form.TextFieldConfig.registerClass('Ext.form.TextFieldConfig', Ext.form.FieldConfig);
Ext.form.TriggerFieldConfig.registerClass('Ext.form.TriggerFieldConfig', Ext.form.TextFieldConfig);
Ext.form.ComboBoxConfig.registerClass('Ext.form.ComboBoxConfig', Ext.form.TriggerFieldConfig);
Ext.form.CompositeFieldConfig.registerClass('Ext.form.CompositeFieldConfig', Ext.form.FieldConfig);
Ext.form.DateFieldConfig.registerClass('Ext.form.DateFieldConfig', Ext.form.TriggerFieldConfig);
Ext.form.DisplayFieldConfig.registerClass('Ext.form.DisplayFieldConfig', Ext.form.FieldConfig);
Ext.form.FieldSetConfig.registerClass('Ext.form.FieldSetConfig', Ext.PanelConfig);
Ext.form.FormPanelConfig.registerClass('Ext.form.FormPanelConfig', Ext.PanelConfig);
Ext.form.HiddenConfig.registerClass('Ext.form.HiddenConfig', Ext.form.FieldConfig);
Ext.form.HtmlEditorConfig.registerClass('Ext.form.HtmlEditorConfig', Ext.form.FieldConfig);
Ext.form.LabelConfig.registerClass('Ext.form.LabelConfig', Ext.BoxComponentConfig);
Ext.form.NumberFieldConfig.registerClass('Ext.form.NumberFieldConfig', Ext.form.TextFieldConfig);
Ext.form.RadioConfig.registerClass('Ext.form.RadioConfig', Ext.form.CheckboxConfig);
Ext.form.RadioGroupConfig.registerClass('Ext.form.RadioGroupConfig', Ext.form.CheckboxGroupConfig);
Ext.form.SliderFieldConfig.registerClass('Ext.form.SliderFieldConfig', Ext.form.FieldConfig);
Ext.form.TextAreaConfig.registerClass('Ext.form.TextAreaConfig', Ext.form.TextFieldConfig);
Ext.form.TimeFieldConfig.registerClass('Ext.form.TimeFieldConfig', Ext.form.ComboBoxConfig);
Ext.form.TwinTriggerFieldConfig.registerClass('Ext.form.TwinTriggerFieldConfig', Ext.form.TriggerFieldConfig);
Ext.grid.AbstractSelectionModelConfig.registerClass('Ext.grid.AbstractSelectionModelConfig', Ext.util.ObservableConfig);
Ext.grid.ActionColumnConfig.registerClass('Ext.grid.ActionColumnConfig', Ext.grid.ColumnConfig);
Ext.grid.BooleanColumnConfig.registerClass('Ext.grid.BooleanColumnConfig', Ext.grid.ColumnConfig);
Ext.grid.CellSelectionModelConfig.registerClass('Ext.grid.CellSelectionModelConfig', Ext.grid.AbstractSelectionModelConfig);
Ext.grid.RowSelectionModelConfig.registerClass('Ext.grid.RowSelectionModelConfig', Ext.grid.AbstractSelectionModelConfig);
Ext.grid.CheckboxSelectionModelConfig.registerClass('Ext.grid.CheckboxSelectionModelConfig', Ext.grid.RowSelectionModelConfig);
Ext.grid.DateColumnConfig.registerClass('Ext.grid.DateColumnConfig', Ext.grid.ColumnConfig);
Ext.grid.EditorGridPanelConfig.registerClass('Ext.grid.EditorGridPanelConfig', Ext.grid.GridPanelConfig);
Ext.grid.GridDragZoneConfig.registerClass('Ext.grid.GridDragZoneConfig', Ext.dd.DragZoneConfig);
Ext.grid.GroupingViewConfig.registerClass('Ext.grid.GroupingViewConfig', Ext.grid.GridViewConfig);
Ext.grid.NumberColumnConfig.registerClass('Ext.grid.NumberColumnConfig', Ext.grid.ColumnConfig);
Ext.grid.PivotAxisConfig.registerClass('Ext.grid.PivotAxisConfig', Ext.ComponentConfig);
Ext.grid.PivotGridConfig.registerClass('Ext.grid.PivotGridConfig', Ext.grid.GridPanelConfig);
Ext.grid.PivotGridViewConfig.registerClass('Ext.grid.PivotGridViewConfig', Ext.grid.GridViewConfig);
Ext.grid.PropertyColumnModelConfig.registerClass('Ext.grid.PropertyColumnModelConfig', Ext.grid.ColumnModelConfig);
Ext.grid.PropertyGridConfig.registerClass('Ext.grid.PropertyGridConfig', Ext.grid.EditorGridPanelConfig);
Ext.grid.PropertyStoreConfig.registerClass('Ext.grid.PropertyStoreConfig', Ext.util.ObservableConfig);
Ext.grid.RowNumbererConfig.registerClass('Ext.grid.RowNumbererConfig', Ext.AbstractConfig);
Ext.grid.TemplateColumnConfig.registerClass('Ext.grid.TemplateColumnConfig', Ext.grid.ColumnConfig);
Ext.layout.ContainerLayoutConfig.registerClass('Ext.layout.ContainerLayoutConfig', Ext.AbstractConfig);
Ext.layout.AnchorLayoutConfig.registerClass('Ext.layout.AnchorLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.layout.AbsoluteLayoutConfig.registerClass('Ext.layout.AbsoluteLayoutConfig', Ext.layout.AnchorLayoutConfig);
Ext.layout.FitLayoutConfig.registerClass('Ext.layout.FitLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.layout.AccordionLayoutConfig.registerClass('Ext.layout.AccordionLayoutConfig', Ext.layout.FitLayoutConfig);
Ext.layout.AutoLayoutConfig.registerClass('Ext.layout.AutoLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.layout.BorderLayoutConfig.registerClass('Ext.layout.BorderLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.layout.BorderLayoutRegionConfig.registerClass('Ext.layout.BorderLayoutRegionConfig', Ext.AbstractConfig);
Ext.layout.BorderLayoutSplitRegionConfig.registerClass('Ext.layout.BorderLayoutSplitRegionConfig', Ext.layout.BorderLayoutRegionConfig);
Ext.layout.BoxLayoutConfig.registerClass('Ext.layout.BoxLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.layout.CardLayoutConfig.registerClass('Ext.layout.CardLayoutConfig', Ext.layout.FitLayoutConfig);
Ext.layout.ColumnLayoutConfig.registerClass('Ext.layout.ColumnLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.layout.FormLayoutConfig.registerClass('Ext.layout.FormLayoutConfig', Ext.layout.AnchorLayoutConfig);
Ext.layout.HBoxLayoutConfig.registerClass('Ext.layout.HBoxLayoutConfig', Ext.layout.BoxLayoutConfig);
Ext.layout.MenuLayoutConfig.registerClass('Ext.layout.MenuLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.layout.TableLayoutConfig.registerClass('Ext.layout.TableLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.layout.ToolbarLayoutConfig.registerClass('Ext.layout.ToolbarLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.layout.VBoxLayoutConfig.registerClass('Ext.layout.VBoxLayoutConfig', Ext.layout.BoxLayoutConfig);
Ext.list.ColumnConfig.registerClass('Ext.list.ColumnConfig', Ext.AbstractConfig);
Ext.list.BooleanColumnConfig.registerClass('Ext.list.BooleanColumnConfig', Ext.list.ColumnConfig);
Ext.list.ColumnResizerConfig.registerClass('Ext.list.ColumnResizerConfig', Ext.util.ObservableConfig);
Ext.list.DateColumnConfig.registerClass('Ext.list.DateColumnConfig', Ext.list.ColumnConfig);
Ext.list.ListViewConfig.registerClass('Ext.list.ListViewConfig', Ext.DataViewConfig);
Ext.list.NumberColumnConfig.registerClass('Ext.list.NumberColumnConfig', Ext.list.ColumnConfig);
Ext.list.SorterConfig.registerClass('Ext.list.SorterConfig', Ext.util.ObservableConfig);
Ext.menu.BaseItemConfig.registerClass('Ext.menu.BaseItemConfig', Ext.ComponentConfig);
Ext.menu.ItemConfig.registerClass('Ext.menu.ItemConfig', Ext.menu.BaseItemConfig);
Ext.menu.CheckItemConfig.registerClass('Ext.menu.CheckItemConfig', Ext.menu.ItemConfig);
Ext.menu.MenuConfig.registerClass('Ext.menu.MenuConfig', Ext.ContainerConfig);
Ext.menu.ColorMenuConfig.registerClass('Ext.menu.ColorMenuConfig', Ext.menu.MenuConfig);
Ext.menu.DateMenuConfig.registerClass('Ext.menu.DateMenuConfig', Ext.menu.MenuConfig);
Ext.menu.SeparatorConfig.registerClass('Ext.menu.SeparatorConfig', Ext.menu.BaseItemConfig);
Ext.menu.TextItemConfig.registerClass('Ext.menu.TextItemConfig', Ext.menu.BaseItemConfig);
Ext.slider.MultiSliderConfig.registerClass('Ext.slider.MultiSliderConfig', Ext.BoxComponentConfig);
Ext.slider.SingleSliderConfig.registerClass('Ext.slider.SingleSliderConfig', Ext.slider.MultiSliderConfig);
Ext.slider.ThumbConfig.registerClass('Ext.slider.ThumbConfig', Ext.AbstractConfig);
Ext.slider.TipConfig.registerClass('Ext.slider.TipConfig', Ext.TipConfig);
Ext.state.ProviderConfig.registerClass('Ext.state.ProviderConfig', Ext.util.ObservableConfig);
Ext.state.CookieProviderConfig.registerClass('Ext.state.CookieProviderConfig', Ext.state.ProviderConfig);
Ext.util.ClickRepeaterConfig.registerClass('Ext.util.ClickRepeaterConfig', Ext.util.ObservableConfig);
Ext.ux.data.PagingMemoryProxyConfig.registerClass('Ext.ux.data.PagingMemoryProxyConfig', Ext.data.MemoryProxyConfig);
Ext.ux.form.FileUploadFieldConfig.registerClass('Ext.ux.form.FileUploadFieldConfig', Ext.form.TextFieldConfig);
Ext.ux.form.ItemSelectorConfig.registerClass('Ext.ux.form.ItemSelectorConfig', Ext.form.FieldConfig);
Ext.ux.form.MultiSelectConfig.registerClass('Ext.ux.form.MultiSelectConfig', Ext.form.FieldConfig);
Ext.ux.form.SelectBoxConfig.registerClass('Ext.ux.form.SelectBoxConfig', Ext.form.ComboBoxConfig);
Ext.ux.form.SpinnerFieldConfig.registerClass('Ext.ux.form.SpinnerFieldConfig', Ext.form.NumberFieldConfig);
Ext.ux.grid.filter.FilterConfig.registerClass('Ext.ux.grid.filter.FilterConfig', Ext.util.ObservableConfig);
Ext.ux.grid.filter.BooleanFilterConfig.registerClass('Ext.ux.grid.filter.BooleanFilterConfig', Ext.ux.grid.filter.FilterConfig);
Ext.ux.grid.filter.DateFilterConfig.registerClass('Ext.ux.grid.filter.DateFilterConfig', Ext.ux.grid.filter.FilterConfig);
Ext.ux.grid.filter.ListFilterConfig.registerClass('Ext.ux.grid.filter.ListFilterConfig', Ext.ux.grid.filter.FilterConfig);
Ext.ux.grid.filter.NumericFilterConfig.registerClass('Ext.ux.grid.filter.NumericFilterConfig', Ext.ux.grid.filter.FilterConfig);
Ext.ux.grid.filter.StringFilterConfig.registerClass('Ext.ux.grid.filter.StringFilterConfig', Ext.ux.grid.filter.FilterConfig);
Ext.ux.layout.CenterLayoutConfig.registerClass('Ext.ux.layout.CenterLayoutConfig', Ext.layout.FitLayoutConfig);
Ext.ux.layout.RowLayoutConfig.registerClass('Ext.ux.layout.RowLayoutConfig', Ext.layout.ContainerLayoutConfig);
Ext.ux.menu.ListMenuConfig.registerClass('Ext.ux.menu.ListMenuConfig', Ext.menu.MenuConfig);
Ext.ux.menu.RangeMenuConfig.registerClass('Ext.ux.menu.RangeMenuConfig', Ext.menu.MenuConfig);
Ext.ux.tree.ColumnTreeConfig.registerClass('Ext.ux.tree.ColumnTreeConfig', Ext.tree.TreePanelConfig);
Ext.ux.tree.TreeGridConfig.registerClass('Ext.ux.tree.TreeGridConfig', Ext.tree.TreePanelConfig);
Ext.ux.tree.TreeGridLoaderConfig.registerClass('Ext.ux.tree.TreeGridLoaderConfig', Ext.tree.TreeLoaderConfig);
Ext.ux.tree.TreeGridSorterConfig.registerClass('Ext.ux.tree.TreeGridSorterConfig', Ext.tree.TreeSorterConfig);
Ext.ux.tree.XmlTreeLoaderConfig.registerClass('Ext.ux.tree.XmlTreeLoaderConfig', Ext.tree.TreeLoaderConfig);
(function () {
    Ext.ScriptSharpAdaptor._registerClass(Ext.History, 'Ext.History', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.ClickRepeater, 'Ext.util.ClickRepeater', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.AbstractManager, 'Ext.AbstractManager', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.KeyMap, 'Ext.KeyMap', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.MixedCollection, 'Ext.util.MixedCollection', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.XTemplate, 'Ext.XTemplate', Ext.Template);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Updater, 'Ext.Updater', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Updater.defaults, 'Ext.Updater.defaults', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Updater.BasicRenderer, 'Ext.Updater.BasicRenderer', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.CSS, 'Ext.util.CSS', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.KeyNav, 'Ext.KeyNav', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.Observable, 'Ext.util.Observable', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.Cookies, 'Ext.util.Cookies', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.Format, 'Ext.util.Format', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.Functions, 'Ext.util.Functions', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.TextMetrics, 'Ext.util.TextMetrics', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DropTarget, 'Ext.dd.DropTarget', Ext.dd.DDTarget);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.ScrollManager, 'Ext.dd.ScrollManager', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DragDrop, 'Ext.dd.DragDrop', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DragDropMgr, 'Ext.dd.DragDropMgr', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DragDropMgr.ElementWrapper, 'Ext.dd.DragDropMgr.ElementWrapper', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DD, 'Ext.dd.DD', Ext.dd.DragDrop);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DDProxy, 'Ext.dd.DDProxy', Ext.dd.DD);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DDTarget, 'Ext.dd.DDTarget', Ext.dd.DragDrop);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.StatusProxy, 'Ext.dd.StatusProxy', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DragZone, 'Ext.dd.DragZone', Ext.dd.DragSource);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DragTracker, 'Ext.dd.DragTracker', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DragSource, 'Ext.dd.DragSource', Ext.dd.DDProxy);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.Registry, 'Ext.dd.Registry', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.DropZone, 'Ext.dd.DropZone', Ext.dd.DropTarget);
    Ext.ScriptSharpAdaptor._registerClass(Ext.state.Manager, 'Ext.state.Manager', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.state.CookieProvider, 'Ext.state.CookieProvider', Ext.state.Provider);
    Ext.ScriptSharpAdaptor._registerClass(Ext.state.Provider, 'Ext.state.Provider', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.list.Column, 'Ext.list.Column', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.list.NumberColumn, 'Ext.list.NumberColumn', Ext.list.Column);
    Ext.ScriptSharpAdaptor._registerClass(Ext.list.DateColumn, 'Ext.list.DateColumn', Ext.list.Column);
    Ext.ScriptSharpAdaptor._registerClass(Ext.list.BooleanColumn, 'Ext.list.BooleanColumn', Ext.list.Column);
    Ext.ScriptSharpAdaptor._registerClass(Ext.list.ColumnResizer, 'Ext.list.ColumnResizer', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.list.Sorter, 'Ext.list.Sorter', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.list.ListView, 'Ext.list.ListView', Ext.DataView);
    Ext.ScriptSharpAdaptor._registerClass(Ext.dd.PanelProxy, 'Ext.dd.PanelProxy', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.WindowGroup, 'Ext.WindowGroup', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.WindowMgr, 'Ext.WindowMgr', Ext.WindowGroup);
    Ext.ScriptSharpAdaptor._registerClass(Ext.QuickTip, 'Ext.QuickTip', Ext.ToolTip);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Tip, 'Ext.Tip', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.QuickTips, 'Ext.QuickTips', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ToolTip, 'Ext.ToolTip', Ext.Tip);
    Ext.ScriptSharpAdaptor._registerClass(Ext.slider.Tip, 'Ext.slider.Tip', Ext.Tip);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ButtonGroup, 'Ext.ButtonGroup', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Shadow, 'Ext.Shadow', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.LoadMask, 'Ext.LoadMask', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.DatePicker, 'Ext.DatePicker', Ext.Component);
    Ext.ScriptSharpAdaptor._registerClass(Ext.PagingToolbar, 'Ext.PagingToolbar', Ext.Toolbar);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Viewport, 'Ext.Viewport', Ext.Container);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Layer, 'Ext.Layer', Ext.Element);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Editor, 'Ext.Editor', Ext.Component);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Component, 'Ext.Component', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.GridDragZone, 'Ext.grid.GridDragZone', Ext.dd.DragZone);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.GridView, 'Ext.grid.GridView', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.RowNumberer, 'Ext.grid.RowNumberer', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.EditorGridPanel, 'Ext.grid.EditorGridPanel', Ext.grid.GridPanel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.Column, 'Ext.grid.Column', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.BooleanColumn, 'Ext.grid.BooleanColumn', Ext.grid.Column);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.NumberColumn, 'Ext.grid.NumberColumn', Ext.grid.Column);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.DateColumn, 'Ext.grid.DateColumn', Ext.grid.Column);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.TemplateColumn, 'Ext.grid.TemplateColumn', Ext.grid.Column);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.ActionColumn, 'Ext.grid.ActionColumn', Ext.grid.Column);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.PivotGrid, 'Ext.grid.PivotGrid', Ext.grid.GridPanel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.GridPanel, 'Ext.grid.GridPanel', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.ColumnModel, 'Ext.grid.ColumnModel', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.CellSelectionModel, 'Ext.grid.CellSelectionModel', Ext.grid.AbstractSelectionModel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.RowSelectionModel, 'Ext.grid.RowSelectionModel', Ext.grid.AbstractSelectionModel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.PivotAxis, 'Ext.grid.PivotAxis', Ext.Component);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.CheckboxSelectionModel, 'Ext.grid.CheckboxSelectionModel', Ext.grid.RowSelectionModel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.AbstractSelectionModel, 'Ext.grid.AbstractSelectionModel', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.GroupingView, 'Ext.grid.GroupingView', Ext.grid.GridView);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.PivotGridView, 'Ext.grid.PivotGridView', Ext.grid.GridView);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.PropertyRecord, 'Ext.grid.PropertyRecord', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.PropertyStore, 'Ext.grid.PropertyStore', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.PropertyColumnModel, 'Ext.grid.PropertyColumnModel', Ext.grid.ColumnModel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.grid.PropertyGrid, 'Ext.grid.PropertyGrid', Ext.grid.EditorGridPanel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.SplitBar, 'Ext.SplitBar', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.SplitBar.BasicLayoutAdapter, 'Ext.SplitBar.BasicLayoutAdapter', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.SplitBar.AbsoluteLayoutAdapter, 'Ext.SplitBar.AbsoluteLayoutAdapter', Ext.SplitBar.BasicLayoutAdapter);
    Ext.ScriptSharpAdaptor._registerClass(Ext.menu.Separator, 'Ext.menu.Separator', Ext.menu.BaseItem);
    Ext.ScriptSharpAdaptor._registerClass(Ext.menu.MenuMgr, 'Ext.menu.MenuMgr', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.menu.BaseItem, 'Ext.menu.BaseItem', Ext.Component);
    Ext.ScriptSharpAdaptor._registerClass(Ext.menu.Menu, 'Ext.menu.Menu', Ext.Container);
    Ext.ScriptSharpAdaptor._registerClass(Ext.menu.Item, 'Ext.menu.Item', Ext.menu.BaseItem);
    Ext.ScriptSharpAdaptor._registerClass(Ext.menu.DateMenu, 'Ext.menu.DateMenu', Ext.menu.Menu);
    Ext.ScriptSharpAdaptor._registerClass(Ext.menu.ColorMenu, 'Ext.menu.ColorMenu', Ext.menu.Menu);
    Ext.ScriptSharpAdaptor._registerClass(Ext.menu.TextItem, 'Ext.menu.TextItem', Ext.menu.BaseItem);
    Ext.ScriptSharpAdaptor._registerClass(Ext.menu.CheckItem, 'Ext.menu.CheckItem', Ext.menu.Item);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Container, 'Ext.Container', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.MessageBox, 'Ext.MessageBox', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Msg, 'Ext.Msg', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Window, 'Ext.Window', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ComponentMgr, 'Ext.ComponentMgr', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.DataView, 'Ext.DataView', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.BoxComponent, 'Ext.BoxComponent', Ext.Component);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Spacer, 'Ext.Spacer', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ColorPalette, 'Ext.ColorPalette', Ext.Component);
    Ext.ScriptSharpAdaptor._registerClass(Ext.CycleButton, 'Ext.CycleButton', Ext.SplitButton);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ProgressBar, 'Ext.ProgressBar', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.FlashProxy, 'Ext.FlashProxy', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.Chart, 'Ext.chart.Chart', Ext.FlashComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.PieChart, 'Ext.chart.PieChart', Ext.chart.Chart);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.CartesianChart, 'Ext.chart.CartesianChart', Ext.chart.Chart);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.LineChart, 'Ext.chart.LineChart', Ext.chart.CartesianChart);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.ColumnChart, 'Ext.chart.ColumnChart', Ext.chart.CartesianChart);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.StackedColumnChart, 'Ext.chart.StackedColumnChart', Ext.chart.CartesianChart);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.BarChart, 'Ext.chart.BarChart', Ext.chart.CartesianChart);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.StackedBarChart, 'Ext.chart.StackedBarChart', Ext.chart.CartesianChart);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.Axis, 'Ext.chart.Axis', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.NumericAxis, 'Ext.chart.NumericAxis', Ext.chart.Axis);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.TimeAxis, 'Ext.chart.TimeAxis', Ext.chart.Axis);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.CategoryAxis, 'Ext.chart.CategoryAxis', Ext.chart.Axis);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.Series, 'Ext.chart.Series', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.CartesianSeries, 'Ext.chart.CartesianSeries', Ext.chart.Series);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.ColumnSeries, 'Ext.chart.ColumnSeries', Ext.chart.CartesianSeries);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.LineSeries, 'Ext.chart.LineSeries', Ext.chart.CartesianSeries);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.BarSeries, 'Ext.chart.BarSeries', Ext.chart.CartesianSeries);
    Ext.ScriptSharpAdaptor._registerClass(Ext.chart.PieSeries, 'Ext.chart.PieSeries', Ext.chart.Series);
    Ext.ScriptSharpAdaptor._registerClass(Ext.FlashComponent, 'Ext.FlashComponent', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Button, 'Ext.Button', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.SplitButton, 'Ext.SplitButton', Ext.Button);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.TriggerField, 'Ext.form.TriggerField', Ext.form.TextField);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.TwinTriggerField, 'Ext.form.TwinTriggerField', Ext.form.TriggerField);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.RadioGroup, 'Ext.form.RadioGroup', Ext.form.CheckboxGroup);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.FormPanel, 'Ext.form.FormPanel', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.DisplayField, 'Ext.form.DisplayField', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.TimeField, 'Ext.form.TimeField', Ext.form.ComboBox);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.TextArea, 'Ext.form.TextArea', Ext.form.TextField);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.FieldSet, 'Ext.form.FieldSet', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.SliderField, 'Ext.form.SliderField', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.HtmlEditor, 'Ext.form.HtmlEditor', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.CompositeField, 'Ext.form.CompositeField', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.DateField, 'Ext.form.DateField', Ext.form.TriggerField);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.NumberField, 'Ext.form.NumberField', Ext.form.TextField);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.BasicForm, 'Ext.form.BasicForm', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.CheckboxGroup, 'Ext.form.CheckboxGroup', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Action, 'Ext.form.Action', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Action.Submit, 'Ext.form.Action.Submit', Ext.form.Action);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Action.Load, 'Ext.form.Action.Load', Ext.form.Action);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Action.DirectLoad, 'Ext.form.Action.DirectLoad', Ext.form.Action.Load);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Action.DirectSubmit, 'Ext.form.Action.DirectSubmit', Ext.form.Action.Submit);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Label, 'Ext.form.Label', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Radio, 'Ext.form.Radio', Ext.form.Checkbox);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.VTypes, 'Ext.form.VTypes', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Checkbox, 'Ext.form.Checkbox', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.ComboBox, 'Ext.form.ComboBox', Ext.form.TriggerField);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.TextField, 'Ext.form.TextField', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Field, 'Ext.form.Field', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.form.Hidden, 'Ext.form.Hidden', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Resizable, 'Ext.Resizable', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.slider.Thumb, 'Ext.slider.Thumb', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.slider.MultiSlider, 'Ext.slider.MultiSlider', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.slider.SingleSlider, 'Ext.slider.SingleSlider', Ext.slider.MultiSlider);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Action, 'Ext.Action', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.AsyncTreeNode, 'Ext.tree.AsyncTreeNode', Ext.tree.TreeNode);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.TreeLoader, 'Ext.tree.TreeLoader', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.TreeDragZone, 'Ext.tree.TreeDragZone', Ext.dd.DragZone);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.TreeSorter, 'Ext.tree.TreeSorter', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.TreeFilter, 'Ext.tree.TreeFilter', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.TreeNode, 'Ext.tree.TreeNode', Ext.data.Node);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.TreePanel, 'Ext.tree.TreePanel', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.TreeEditor, 'Ext.tree.TreeEditor', Ext.Editor);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.TreeNodeUI, 'Ext.tree.TreeNodeUI', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.RootTreeNodeUI, 'Ext.tree.RootTreeNodeUI', Ext.tree.TreeNodeUI);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.DefaultSelectionModel, 'Ext.tree.DefaultSelectionModel', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.MultiSelectionModel, 'Ext.tree.MultiSelectionModel', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.TreeDropZone, 'Ext.tree.TreeDropZone', Ext.dd.DropZone);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Panel, 'Ext.Panel', Ext.Container);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.AccordionLayout, 'Ext.layout.AccordionLayout', Ext.layout.FitLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.BoxLayout, 'Ext.layout.BoxLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.boxOverflow.None, 'Ext.layout.boxOverflow.None', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.HBoxLayout, 'Ext.layout.HBoxLayout', Ext.layout.BoxLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.BorderLayout, 'Ext.layout.BorderLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.BorderLayout.Region, 'Ext.layout.BorderLayout.Region', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.BorderLayout.SplitRegion, 'Ext.layout.BorderLayout.SplitRegion', Ext.layout.BorderLayout.Region);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.CardLayout, 'Ext.layout.CardLayout', Ext.layout.FitLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.FormLayout, 'Ext.layout.FormLayout', Ext.layout.AnchorLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.FitLayout, 'Ext.layout.FitLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.AutoLayout, 'Ext.layout.AutoLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.TableLayout, 'Ext.layout.TableLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.ContainerLayout, 'Ext.layout.ContainerLayout', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.boxOverflow.Scroller, 'Ext.layout.boxOverflow.Scroller', Ext.layout.boxOverflow.None);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.boxOverflow.VerticalScroller, 'Ext.layout.boxOverflow.VerticalScroller', Ext.layout.boxOverflow.Scroller);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.boxOverflow.HorizontalScroller, 'Ext.layout.boxOverflow.HorizontalScroller', Ext.layout.boxOverflow.Scroller);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.boxOverflow.Menu, 'Ext.layout.boxOverflow.Menu', Ext.layout.boxOverflow.None);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.boxOverflow.HorizontalMenu, 'Ext.layout.boxOverflow.HorizontalMenu', Ext.layout.boxOverflow.Menu);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.AbsoluteLayout, 'Ext.layout.AbsoluteLayout', Ext.layout.AnchorLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.VBoxLayout, 'Ext.layout.VBoxLayout', Ext.layout.BoxLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.MenuLayout, 'Ext.layout.MenuLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.AnchorLayout, 'Ext.layout.AnchorLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.ColumnLayout, 'Ext.layout.ColumnLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.layout.ToolbarLayout, 'Ext.layout.ToolbarLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.TabPanel, 'Ext.TabPanel', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Toolbar, 'Ext.Toolbar', Ext.Container);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Toolbar.Item, 'Ext.Toolbar.Item', Ext.BoxComponent);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Toolbar.Separator, 'Ext.Toolbar.Separator', Ext.Toolbar.Item);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Toolbar.Spacer, 'Ext.Toolbar.Spacer', Ext.Toolbar.Item);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Toolbar.Fill, 'Ext.Toolbar.Fill', Ext.Toolbar.Spacer);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Toolbar.TextItem, 'Ext.Toolbar.TextItem', Ext.Toolbar.Item);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Store, 'Ext.data.Store', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Store.Error, 'Ext.data.Store.Error', Ext.Error);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.XmlStore, 'Ext.data.XmlStore', Ext.data.Store);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.ArrayReader, 'Ext.data.ArrayReader', Ext.data.JsonReader);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.MemoryProxy, 'Ext.data.MemoryProxy', Ext.data.DataProxy);
    Ext.ScriptSharpAdaptor._registerClass(Ext.StoreMgr, 'Ext.StoreMgr', Ext.util.MixedCollection);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Api, 'Ext.data.Api', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Response, 'Ext.data.Response', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Api.Error, 'Ext.data.Api.Error', Ext.Error);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.GroupingStore, 'Ext.data.GroupingStore', Ext.data.Store);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.DataReader, 'Ext.data.DataReader', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.DataReader.Error, 'Ext.data.DataReader.Error', Ext.Error);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.DataWriter, 'Ext.data.DataWriter', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.HttpProxy, 'Ext.data.HttpProxy', Ext.data.DataProxy);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.JsonReader, 'Ext.data.JsonReader', Ext.data.DataReader);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.JsonReader.Error, 'Ext.data.JsonReader.Error', Ext.Error);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.JsonWriter, 'Ext.data.JsonWriter', Ext.data.DataWriter);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Types, 'Ext.data.Types', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.XmlReader, 'Ext.data.XmlReader', Ext.data.DataReader);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.JsonStore, 'Ext.data.JsonStore', Ext.data.Store);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Tree, 'Ext.data.Tree', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Node, 'Ext.data.Node', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.DirectStore, 'Ext.data.DirectStore', Ext.data.Store);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.XmlWriter, 'Ext.data.XmlWriter', Ext.data.DataWriter);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.DirectProxy, 'Ext.data.DirectProxy', Ext.data.DataProxy);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.ArrayStore, 'Ext.data.ArrayStore', Ext.data.Store);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Record, 'Ext.data.Record', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.SortTypes, 'Ext.data.SortTypes', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.ScriptTagProxy, 'Ext.data.ScriptTagProxy', Ext.data.DataProxy);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Request, 'Ext.data.Request', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Field, 'Ext.data.Field', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.DataProxy, 'Ext.data.DataProxy', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.DataProxy.Error, 'Ext.data.DataProxy.Error', Ext.Error);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Element, 'Ext.Element', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Error, 'Ext.Error', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Template, 'Ext.Template', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.CompositeElement, 'Ext.CompositeElement', Ext.CompositeElementLite);
    Ext.ScriptSharpAdaptor._registerClass(Ext.CompositeElementLite, 'Ext.CompositeElementLite', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext, 'Ext', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.DomHelper, 'Ext.DomHelper', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.EventManager, 'Ext.EventManager', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.JSON, 'Ext.util.JSON', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.TaskRunner, 'Ext.util.TaskRunner', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.TaskMgr, 'Ext.TaskMgr', Ext.util.TaskRunner);
    Ext.ScriptSharpAdaptor._registerClass(Ext.util.DelayedTask, 'Ext.util.DelayedTask', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.data.Connection, 'Ext.data.Connection', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Ajax, 'Ext.Ajax', Ext.data.Connection);
    Ext.ScriptSharpAdaptor._registerClass(Ext.DomQuery, 'Ext.DomQuery', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Loader, 'Ext.Loader', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Fx, 'Ext.Fx', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.EventObject, 'Ext.EventObject', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.direct.JsonProvider, 'Ext.direct.JsonProvider', Ext.direct.Provider);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Direct.Transaction, 'Ext.Direct.Transaction', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.direct.RemotingProvider, 'Ext.direct.RemotingProvider', Ext.direct.JsonProvider);
    Ext.ScriptSharpAdaptor._registerClass(Ext.direct.PollingProvider, 'Ext.direct.PollingProvider', Ext.direct.JsonProvider);
    Ext.ScriptSharpAdaptor._registerClass(Ext.direct.Provider, 'Ext.direct.Provider', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.Direct, 'Ext.Direct', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.GroupTabPanel, 'Ext.ux.GroupTabPanel', Ext.TabPanel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.data.PagingMemoryProxy, 'Ext.ux.data.PagingMemoryProxy', Ext.data.MemoryProxy);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.TabCloseMenu, 'Ext.ux.TabCloseMenu', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.DataView.LabelEditor, 'Ext.DataView.LabelEditor', Ext.Editor);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.ToolbarReorderer, 'Ext.ux.ToolbarReorderer', Ext.ux.Reorderer);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.layout.CenterLayout, 'Ext.ux.layout.CenterLayout', Ext.layout.FitLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.ValidationStatus, 'Ext.ux.ValidationStatus', Ext.Component);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.StatusBar, 'Ext.ux.StatusBar', Ext.Toolbar);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.CheckColumn, 'Ext.ux.grid.CheckColumn', Ext.grid.Column);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.GMapPanel, 'Ext.ux.GMapPanel', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.GridFilters, 'Ext.ux.grid.GridFilters', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.filter.BooleanFilter, 'Ext.ux.grid.filter.BooleanFilter', Ext.ux.grid.filter.Filter);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.filter.NumericFilter, 'Ext.ux.grid.filter.NumericFilter', Ext.ux.grid.filter.Filter);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.filter.ListFilter, 'Ext.ux.grid.filter.ListFilter', Ext.ux.grid.filter.Filter);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.filter.StringFilter, 'Ext.ux.grid.filter.StringFilter', Ext.ux.grid.filter.Filter);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.filter.Filter, 'Ext.ux.grid.filter.Filter', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.filter.DateFilter, 'Ext.ux.grid.filter.DateFilter', Ext.ux.grid.filter.Filter);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.menu.ListMenu, 'Ext.ux.menu.ListMenu', Ext.menu.Menu);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.menu.RangeMenu, 'Ext.ux.menu.RangeMenu', Ext.menu.Menu);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.FieldReplicator, 'Ext.ux.FieldReplicator', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.SlidingPager, 'Ext.ux.SlidingPager', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.tree.XmlTreeLoader, 'Ext.ux.tree.XmlTreeLoader', Ext.tree.TreeLoader);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.TableGrid, 'Ext.ux.grid.TableGrid', Ext.grid.GridPanel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.GroupTab, 'Ext.ux.GroupTab', Ext.Container);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.form.MultiSelect, 'Ext.ux.form.MultiSelect', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.form.FileUploadField, 'Ext.ux.form.FileUploadField', Ext.form.TextField);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.BufferView, 'Ext.ux.grid.BufferView', Ext.grid.GridView);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.RowEditor, 'Ext.ux.grid.RowEditor', Ext.Panel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.ToolbarDroppable, 'Ext.ux.ToolbarDroppable', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.DataViewTransition, 'Ext.ux.DataViewTransition', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.FieldLabeler, 'Ext.ux.FieldLabeler', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.TabScrollerMenu, 'Ext.ux.TabScrollerMenu', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.RowExpander, 'Ext.ux.grid.RowExpander', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.form.SelectBox, 'Ext.ux.form.SelectBox', Ext.form.ComboBox);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.form.ItemSelector, 'Ext.ux.form.ItemSelector', Ext.form.Field);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.ProgressBarPager, 'Ext.ux.ProgressBarPager', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.tree.ColumnTree, 'Ext.ux.tree.ColumnTree', Ext.tree.TreePanel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.tree.ColumnNodeUI, 'Ext.ux.tree.ColumnNodeUI', Ext.tree.TreeNodeUI);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.Reorderer, 'Ext.ux.Reorderer', Object);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.HBoxReorderer, 'Ext.ux.HBoxReorderer', Ext.ux.Reorderer);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.tree.TreeGridNodeUI, 'Ext.ux.tree.TreeGridNodeUI', Ext.tree.TreeNodeUI);
    Ext.ScriptSharpAdaptor._registerClass(Ext.tree.ColumnResizer, 'Ext.tree.ColumnResizer', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.tree.TreeGridLoader, 'Ext.ux.tree.TreeGridLoader', Ext.tree.TreeLoader);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.tree.TreeGridSorter, 'Ext.ux.tree.TreeGridSorter', Ext.tree.TreeSorter);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.tree.TreeGrid, 'Ext.ux.tree.TreeGrid', Ext.tree.TreePanel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.Spinner, 'Ext.ux.Spinner', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.form.SpinnerField, 'Ext.ux.form.SpinnerField', Ext.form.NumberField);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.layout.RowLayout, 'Ext.ux.layout.RowLayout', Ext.layout.ContainerLayout);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.LockingGridView, 'Ext.ux.grid.LockingGridView', Ext.grid.GridView);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.LockingColumnModel, 'Ext.ux.grid.LockingColumnModel', Ext.grid.ColumnModel);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.GroupSummary, 'Ext.ux.grid.GroupSummary', Ext.util.Observable);
    Ext.ScriptSharpAdaptor._registerClass(Ext.ux.grid.HybridSummary, 'Ext.ux.grid.HybridSummary', Ext.ux.grid.GroupSummary);
})();


})();

//! This script was generated using Script# v0.7.4.0
