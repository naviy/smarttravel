//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LxnBase.Data;
using LxnBase.Net;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
using jQueryApi;


namespace LxnBase.Data
{
	
	
	public partial class DeleteOperationResponse
	{
		
		[PreserveCase()]
		public bool Success;
		
		[PreserveCase()]
		public RangeResponse RangeResponse;
		
		[PreserveCase()]
		public Object[] UndeletableObjects;
	}
	
	public partial class DocumentExportArgs
	{
		
		[PreserveCase()]
		public DocumentExportMode Mode;
		
		[PreserveCase()]
		public RangeRequest Request;
		
		[PreserveCase()]
		public Object[] SelectedDocuments;
	}
	
	public enum DocumentExportMode
	{
		
		All = 0,
		
		Selected = 1,
		
		ExceptSelected = 2,
	}
	
	public enum FilterOperator
	{
		
		None = 0,
		
		Equals = 1,
		
		IsNull = 2,
		
		StartsWith = 3,
		
		Contains = 4,
		
		EndsWith = 5,
		
		Less = 6,
		
		LessOrEquals = 7,
		
		GreaterOrEquals = 8,
		
		Greater = 9,
		
		IsIn = 10,
		
		IsIdIn = 11,
	}
	
	public partial class ItemResponse
	{

		public static ItemResponse Create(object item)
		{
			ItemResponse r = new ItemResponse();
			r.Item = item;
			return r;
		}

		[PreserveCase()]
		public object Item;
		
		[PreserveCase()]
		public RangeResponse RangeResponse;
		
		[PreserveCase()]
		public object Errors;
	}
	
	public partial class Reference
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public string Name;
		
		[PreserveCase()]
		public string Type;
		
		[PreserveCase()]
		public static int IdPos = 0;
		
		[PreserveCase()]
		public static int NamePos = 1;
		
		[PreserveCase()]
		public static int TypePos = 2;
	}
	
	public partial class OperationPermissions
	{

		[PreserveCase()]
		public OperationStatus CanList;

		[PreserveCase()]
		public OperationStatus CanCreate;

		[PreserveCase()]
		public OperationStatus CanUpdate;
		
		[PreserveCase()]
		public OperationStatus CanDelete;
		
		[PreserveCase()]
		public Dictionary CustomActionPermissions;
	}
	
	public partial class OperationStatus
	{
		
		[PreserveCase()]
		public bool IsEnabled;
		
		[PreserveCase()]
		public bool IsDisabled;
		
		[PreserveCase()]
		public bool IsHidden;
		
		[PreserveCase()]
		public bool Visible;
		
		[PreserveCase()]
		public string DisableInfo;
	}
	
	public partial class PropertyFilter
	{
		
		[PreserveCase()]
		public string InternalPath;
		
		[PreserveCase()]
		public string Property;
		
		[PreserveCase()]
		public PropertyFilterCondition[] Conditions;
	}
	
	public partial class PropertyFilterCondition
	{
		
		[PreserveCase()]
		public bool Not;
		
		[PreserveCase()]
		public FilterOperator Operator;
		
		[PreserveCase()]
		public object Value;
	}
	
	public partial class RangeRequest
	{
		
		[PreserveCase()]
		public string ClassName;
		
		[PreserveCase()]
		public String[] NamedFilters;
		
		[PreserveCase()]
		public PropertyFilter[] Filters;
		
		public string Query;
		
		[PreserveCase()]
		public string GeneralFilter;
		
		[PreserveCase()]
		public String[] VisibleProperties;
		
		[PreserveCase()]
		public String[] HiddenProperties;
		
		public int Start;
		
		public int Limit;
		
		public string Sort;
		
		public string Dir;
		
		[PreserveCase()]
		public object PositionableObjectId;

		[PreserveCase()]
		public Dictionary Params;

	}
	
	public partial class RangeResponse
	{
		
		[PreserveCase()]
		public int Start;
		
		[PreserveCase()]
		public string Sort;
		
		[PreserveCase()]
		public string Dir;
		
		[PreserveCase()]
		public int TotalCount;
		
		[PreserveCase()]
		public Object[] List;
		
		[PreserveCase()]
		public int SelectedRow;
	}
}
namespace LxnBase.Services
{
	
	
	public partial class ColumnConfig
	{
		
		[PreserveCase()]
		public string Name;
		
		[PreserveCase()]
		public string Caption;
		
		[PreserveCase()]
		public TypeEnum Type;
		
		[PreserveCase()]
		public bool IsRequired;
		
		[PreserveCase()]
		public bool IsReadOnly;
		
		[PreserveCase()]
		public bool IsPersistent;
		
		[PreserveCase()]
		public bool IsReference;
		
		[PreserveCase()]
		public decimal ListWidth;
		
		[PreserveCase()]
		public bool Hidden;
		
		[PreserveCase()]
		public object DefaultValue;
	}
	
	public partial class ClassColumnConfig : ColumnConfig
	{
		
		[PreserveCase()]
		public string Clazz;
		
		[PreserveCase()]
		public TypeEnum FilterType;
		
		[PreserveCase()]
		public int Length;
		
		[PreserveCase()]
		public bool RenderAsString;
	}
	
	public partial class ClassDefinition
	{
		
		[PreserveCase()]
		public string ClassId;
		
		[PreserveCase()]
		public string Caption;
		
		[PreserveCase()]
		public string ListCaption;
	}
	
	public partial class CustomTypeColumnConfig : ColumnConfig
	{
		
		[PreserveCase()]
		public string TypeName;
	}
	
	public partial class DateTimeColumnConfig : ColumnConfig
	{
		
		[PreserveCase()]
		public string FormatString;
	}
	
	public partial class GenericService
	{
		
		public static WebService Service;
		
		static GenericService()
		{
			Service = new WebService("GenericService.asmx");
		}
		
		[PreserveCase()]
		public static void GetRange(string className, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetRange", new Dictionary("className", className, "params", @params), false, null, onSuccess, onError);
		}
		
		public static WebServiceProxy GetRangeProxy(string className)
		{
			WebServiceProxy proxy = new WebServiceProxy(Service, "GetRange");
			proxy.Arguments = new Dictionary("className", className);
			return proxy;
		}
		
		[PreserveCase()]
		public static void Refresh(string className, Object[] ids, String[] visibleProperties, String[] hiddenProperties, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Refresh", new Dictionary("className", className, "ids", ids, "visibleProperties", visibleProperties, "hiddenProperties", hiddenProperties), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetRangeConfig(string className, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetRangeConfig", new Dictionary("className", className), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void Get(string className, object id, bool viewMode, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Get", new Dictionary("className", className, "id", id, "viewMode", viewMode), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetItemConfig(string className, bool viewMode, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetItemConfig", new Dictionary("className", className, "viewMode", viewMode), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void Suggest(string className, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Suggest", new Dictionary("className", className, "params", @params), false, null, onSuccess, onError);
		}
		
		public static WebServiceProxy SuggestProxy(string className)
		{
			WebServiceProxy proxy = new WebServiceProxy(Service, "Suggest");
			proxy.Arguments = new Dictionary("className", className);
			return proxy;
		}
		
		[PreserveCase()]
		public static void CanUpdate(string className, object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanUpdate", new Dictionary("className", className, "id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void Update(string className, object id, object version, object data, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Dictionary d = (Dictionary)data;
			d.Remove("__reference");
			d.Remove("__class");

			Service.Invoke("Update", new Dictionary("className", className, "id", id, "version", version, "data", data, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CanDelete(string className, Object[] ids, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanDelete", new Dictionary("className", className, "ids", ids), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void Delete(string className, Object[] ids, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Delete", new Dictionary("className", className, "ids", ids, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CanList(string className, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanList", new Dictionary("className", className), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetDependencies(string className, object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetDependencies", new Dictionary("className", className, "id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CanReplace(string className, object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanReplace", new Dictionary("className", className, "id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void Replace(string className, object oldId, object newId, bool deleteOld, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Replace", new Dictionary("className", className, "oldId", oldId, "newId", newId, "deleteOld", deleteOld), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void Export(string className, DocumentExportArgs args, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Export", new Dictionary("className", className, "args", args), false, null, onSuccess, onError);
		}
	}
	
	public partial class ItemConfig
	{
		
		[PreserveCase()]
		public ColumnConfig[] Columns;
		
		[PreserveCase()]
		public string Caption;
		
		[PreserveCase()]
		public string ListCaption;
		
		[PreserveCase()]
		public OperationStatus IsListAllowed;
		
		[PreserveCase()]
		public OperationStatus IsCreationAllowed;
		
		[PreserveCase()]
		public OperationStatus IsCopyingAllowed;
		
		[PreserveCase()]
		public OperationStatus IsEditAllowed;
		
		[PreserveCase()]
		public OperationStatus IsRemovingAllowed;
		
		[PreserveCase()]
		public Dictionary CustomActionPermissions;
	}
	
	public partial class ListColumnConfig : ColumnConfig
	{
		
		[PreserveCase()]
		public object[] Items;
	}
	
	public partial class ListConfig
	{
		
		[PreserveCase()]
		public ColumnConfig[] Columns;
		
		[PreserveCase()]
		public string Caption;
		
		[PreserveCase()]
		public bool Filterable;
		
		[PreserveCase()]
		public OperationStatus IsCreationAllowed;

		[PreserveCase()]
		public bool UseCustomCreation;
		

		[PreserveCase()]
		public OperationStatus IsCopyingAllowed;
		
		[PreserveCase()]
		public OperationStatus IsEditAllowed;
		
		[PreserveCase()]
		public OperationStatus IsRemovingAllowed;
		
		[PreserveCase()]
		public bool IsQuickEditAllowed;
		
		[PreserveCase()]
		public bool SingleSelect;
		
		[PreserveCase()]
		public Dictionary CustomActionPermissions;
	}
	
	public partial class NumberColumnConfig : ColumnConfig
	{
		
		[PreserveCase()]
		public bool IsInteger;
	}
	
	public partial class TextColumnConfig : ColumnConfig
	{
		
		[PreserveCase()]
		public int Length;
		
		[PreserveCase()]
		public int Lines;
	}
	
	public enum TypeEnum
	{
		
		Object = 0,
		
		Number = 1,
		
		List = 2,
		
		Bool = 3,
		
		String = 4,
		
		Date = 5,
		
		Custom = 6,
	}
}
