//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LxnBase.Data;
using LxnBase.Net;

using Luxena.Travel.Cfg;
using LxnTravel.Parties;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
using jQueryApi;

using LxnBase;


namespace Luxena.Travel
{
	
	
	public partial class OrderTransferDto
	{
		
		[PreserveCase()]
		public Reference Transfer;
		
		[PreserveCase()]
		public Date Date;
		
		[PreserveCase()]
		public Reference Party;
		
		[PreserveCase()]
		public Reference Order;
		
		[PreserveCase()]
		public decimal Amount;
	}
	
	public partial class QuickReceiptRequest
	{
		
		[PreserveCase()]
		public Reference Customer;
		
		[PreserveCase()]
		public MoneyDto NotaxedAmount;
		
		[PreserveCase()]
		public MoneyDto TaxedAmount;
		
		[PreserveCase()]
		public Reference Owner;
		
		[PreserveCase()]
		public string Note;
	}
	
	public partial class QuickReceiptResponse
	{
		
		[PreserveCase()]
		public Reference Order;
		
		[PreserveCase()]
		public Reference Receipt;
	}
	
	public partial class AviaPaymentResponse
	{
		
		[PreserveCase()]
		public Reference Payer;
		
		[PreserveCase()]
		public MoneyDto Total;
		
		[PreserveCase()]
		public MoneyDto Vat;
		
		[PreserveCase()]
		public Object[] DocumentIds;
		
		[PreserveCase()]
		public OrderItemDto[] OrderItems;
	}
	
	public partial class CashInOrderPaymentRequest
	{
		
		[PreserveCase()]
		public Date Date;
		
		[PreserveCase()]
		public Reference Payer;
		
		[PreserveCase()]
		public string Number;
		
		[PreserveCase()]
		public MoneyDto Amount;
		
		[PreserveCase()]
		public MoneyDto OrderVat;
		
		[PreserveCase()]
		public MoneyDto PaymentVat;
		
		[PreserveCase()]
		public string ReceivedFrom;
		
		[PreserveCase()]
		public Reference Owner;
		
		[PreserveCase()]
		public string Note;
		
		[PreserveCase()]
		public bool IsPosted;
		
		[PreserveCase()]
		public bool SeparateServiceFee;
		
		[PreserveCase()]
		public Object[] DocumentIds;
		
		[PreserveCase()]
		public bool IsAdditionalPayment;
		
		[PreserveCase()]
		public bool CreateConsignment;
	}
	
	public partial class ConsignmentItemsDto
	{

		[PreserveCase()]
		public Date IssueDate;
		
		[PreserveCase()]
		public Reference Supplier;
		
		[PreserveCase()]
		public Reference Acquirer;
		
		[PreserveCase()]
		public MoneyDto Discount;
		
		[PreserveCase()]
		public OrderItemDto[] Items;
	}
	
	public partial class GenerateOrderItemsResponse
	{
		
		[PreserveCase()]
		public Reference Customer;
		
		[PreserveCase()]
		public OrderItemDto[] Items;
		
		[PreserveCase()]
		public OrderItemDto[] OrderItems;
	}
	
	public partial class ClosedPeriodDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public int Version;
		
		[PreserveCase()]
		public Date DateFrom;
		
		[PreserveCase()]
		public Date DateTo;
		
		[PreserveCase()]
		public PeriodState PeriodState;
	}
	
	public partial class CashPaymentResponse
	{
		
		[PreserveCase()]
		public PaymentDto Payment;
		
		[PreserveCase()]
		public ConsignmentDto Consignment;
	}
	
	public partial class ConsignmentDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public int Version;
		
		[PreserveCase()]
		public string Number;
		
		[PreserveCase()]
		public Date IssueDate;
		
		[PreserveCase()]
		public Reference Supplier;
		
		[PreserveCase()]
		public Reference Acquirer;
		
		[PreserveCase()]
		public MoneyDto Vat;
		
		[PreserveCase()]
		public MoneyDto GrandTotal;
		
		[PreserveCase()]
		public MoneyDto Total;
		
		[PreserveCase()]
		public MoneyDto Discount;
		
		[PreserveCase()]
		public string TotalSupplied;
		
		[PreserveCase()]
		public OrderItemDto[] Items;
		
		[PreserveCase()]
		public IssuedConsignmentDto[] IssuedConsignments;
		
		[PreserveCase()]
		public OperationPermissions Permissions;
	}
	
	public partial class IssuedConsignmentDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public string Number;
		
		[PreserveCase()]
		public Date TimeStamp;
		
		[PreserveCase()]
		public Reference Consignment;
		
		[PreserveCase()]
		public Reference IssuedBy;
	}
	
	//public partial class OrderSourceLinkDto
	//{
		
	//	[PreserveCase()]
	//	public Reference Order;
		
	//	[PreserveCase()]
	//	public Reference Source;
	//}
	
	//public partial class OrderItemSourceLinkDto
	//{
		
	//	[PreserveCase()]
	//	public object Id;
	//}
	
	//public partial class OrderItemAviaLinkDto : OrderItemSourceLinkDto
	//{
		
	//	[PreserveCase()]
	//	public Reference Document;
		
	//	[PreserveCase()]
	//	public OrderItemAviaLinkType LinkType;
	//}
	
	public partial class OrderItemDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public int Version;
		
		[PreserveCase()]
		public Reference Order;

		[PreserveCase()]
		public Nullable<OrderItemLinkType> LinkType;

		[PreserveCase()]
		public Reference Product;

		[PreserveCase()]
		public string Text;

		[PreserveCase()]
		public string ProductText;

		[PreserveCase()]
		public MoneyDto Price;
		
		[PreserveCase()]
		public int Quantity;
		
		[PreserveCase()]
		public MoneyDto Total;
		
		[PreserveCase()]
		public MoneyDto Discount;
		
		[PreserveCase()]
		public MoneyDto GrandTotal;
		
		[PreserveCase()]
		public MoneyDto GivenVat;
		
		[PreserveCase()]
		public MoneyDto TaxedTotal;

		[PreserveCase()]
		public bool HasVat;

		[PreserveCase()]
		public bool IsForceDelivered;

		[PreserveCase()]
		public Reference Consignment;
	}
	
	public partial class PaymentDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public int Version;
		
		[PreserveCase()]
		public PaymentForm PaymentForm;
		
		[PreserveCase()]
		public Date Date;
		
		[PreserveCase()]
		public string Number;
		
		[PreserveCase()]
		public string DocumentNumber;
		
		[PreserveCase()]
		public string AuthorizationCode;
		
		[PreserveCase()]
		public Reference PaymentSystem;
		
		[PreserveCase()]
		public Reference Payer;
		
		[PreserveCase()]
		public MoneyDto Amount;
		
		[PreserveCase()]
		public MoneyDto Vat;
		
		[PreserveCase()]
		public string ReceivedFrom;
		
		[PreserveCase()]
		public Date PostedOn;

		[PreserveCase()]
		public bool SavePosted;
		
		[PreserveCase()]
		public Reference AssignedTo;
		
		[PreserveCase()]
		public Reference RegisteredBy;
		
		[PreserveCase()]
		public string Note;
		
		[PreserveCase()]
		public bool IsVoid;
		
		[PreserveCase()]
		public Reference Invoice;
		
		[PreserveCase()]
		public Reference Order;
		
		[PreserveCase()]
		public Reference Owner;
		
		[PreserveCase()]
		public Reference BankAccount;

		
		[PreserveCase()]
		public OperationPermissions Permissions;

	}



	
	public partial class InvoiceDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public string Number;
		
		[PreserveCase()]
		public Date IssueDate;
		
		[PreserveCase()]
		public Date TimeStamp;
		
		[PreserveCase()]
		public Reference IssuedBy;
		
		[PreserveCase()]
		public MoneyDto Total;
		
		[PreserveCase()]
		public InvoiceType Type;

		[PreserveCase()]
		public string FileExtension;

	}




	public enum PeriodState
	{
		
		Open = 0,
		
		Restricted = 1,
		
		Closed = 2,
	}
	
	public enum OrderItemLinkType
	{
		
		AirlineData = 0,
		
		ServiceFee = 1,
		
		FullDocument = 2,
	}
	
	public enum InvoiceType
	{
		
		Invoice = 0,
		
		Receipt = 1,

		CompletionCertificate = 2,
	}
	
	public enum PaymentForm
	{
		
		CashInOrder = 0,
		
		WireTransfer = 1,
		
		Check = 2,
		
		Electronic = 3,
	
		CashOutOrder = 4,
	}
	
	public partial class OrderDto
	{
		
		[PreserveCase()]
		public string Type;
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public string Text;
		
		[PreserveCase()]
		public int Version;
		
		[PreserveCase()]
		public string Number;
		
		[PreserveCase()]
		public Date IssueDate;
		
		[PreserveCase()]
		public Reference Customer;
		
		[PreserveCase()]
		public Reference BillTo;
		
		[PreserveCase()]
		public Reference ShipTo;

		[PreserveCase()]
		public Reference Intermediary;

		[PreserveCase()]
		public bool IsVoid;
		
		[PreserveCase()]
		public MoneyDto Discount;
		
		[PreserveCase()]
		public MoneyDto Vat;
		
		[PreserveCase()]
		public MoneyDto Total;
		
		[PreserveCase()]
		public MoneyDto Paid;
		
		[PreserveCase()]
		public MoneyDto TotalDue;
		
		[PreserveCase()]
		public MoneyDto VatDue;

		[PreserveCase()]
		public bool UseServiceFeeOnlyInVat;

		[PreserveCase()]
		public MoneyDto ServiceFee;

		[PreserveCase()]
		public decimal DeliveryBalance;
		
		[PreserveCase()]
		public Reference AssignedTo;
		
		[PreserveCase()]
		public Reference Owner;
		
		[PreserveCase()]
		public Reference BankAccount;


		[PreserveCase()]
		public Date BonusDate;
		[PreserveCase()]
		public Number BonusSpentAmount;
		[PreserveCase()]
		public Reference BonusRecipient;


		[PreserveCase()]
		public string Note;
		
		[PreserveCase()]
		public bool IsPublic;

		[PreserveCase()]
		public bool AllowAddProductsInClosedPeriod;

		[PreserveCase()]
		public bool IsSubjectOfPaymentsControl;
		
		[PreserveCase()]
		public OrderItemDto[] Items;
		
		[PreserveCase()]
		public InvoiceDto[] Invoices;
		
		[PreserveCase()]
		public PaymentDto[] Payments;
		
		[PreserveCase()]
		public TaskDto[] Tasks;
		
		[PreserveCase()]
		public OrderTransferDto[] Transfers;
		
		[PreserveCase()]
		public OperationPermissions Permissions;
		
		[PreserveCase()]
		public bool CanCreateTransfer;
		
		[PreserveCase()]
		public bool CanChangeAssignedTo;
	}
}
namespace Luxena.Travel.Cfg
{
	
	
	public enum AviaOrderItemGenerationOption
	{
		
		AlwaysOneOrderItem = 0,
		
		SeparateServiceFee = 1,
		
		ManualSetting = 2,
	}
}


namespace Luxena.Travel
{

	public partial class ProductProviderDto
	{
		[PreserveCase()]
		public string Id;

		[PreserveCase()]
		public int Version;

		[PreserveCase()]
		public string Name;

		[PreserveCase()]
		public bool UseForAccommodation;

		[PreserveCase()]
		public bool UseForCarRental;

		[PreserveCase()]
		public bool UseForInsurance;

		[PreserveCase()]
		public bool UseForPasteboard;

		[PreserveCase()]
		public bool UseForTransfer;
	}

	public partial class ProductDto
	{

		[PreserveCase()]
		public string Id;

		[PreserveCase()]
		public int Version;

		[PreserveCase()]
		public bool IsRefund;

		[PreserveCase()]
		public Reference ReissueFor;

		[PreserveCase()]
		public Reference RefundedProduct;

		[PreserveCase()]
		public Reference Refund;

		[PreserveCase()]
		public Date IssueDate;

		[PreserveCase()]
		public bool RequiresProcessing;

		[PreserveCase()]
		public bool IsVoid;

		[PreserveCase()]
		public Reference Customer;

		[PreserveCase()]
		public Reference Intermediary;

		[PreserveCase()]
		public string Note;

		[PreserveCase()]
		public int Originator;

		[PreserveCase()]
		public string OriginString;

		[PreserveCase()]
		public Reference OriginalDocument;

		[PreserveCase()]
		public string BookerOffice;

		[PreserveCase()]
		public string BookerCode;

		[PreserveCase()]
		public Reference Booker;

		[PreserveCase()]
		public string TicketerOffice;

		[PreserveCase()]
		public string TicketerCode;

		[PreserveCase()]
		public Reference Ticketer;

		[PreserveCase()]
		public Reference Seller;

		[PreserveCase()]
		public Reference Owner;

		[PreserveCase()]
		public Reference Country;

		[PreserveCase()]
		public string PnrCode;

		[PreserveCase()]
		public string TourCode;

		[PreserveCase()]
		public MoneyDto Fare;

		[PreserveCase()]
		public MoneyDto EqualFare;

		[PreserveCase()]
		public MoneyDto FeesTotal;

		[PreserveCase()]
		public MoneyDto Total;

		[PreserveCase()]
		public MoneyDto Vat;

		[PreserveCase()]
		public MoneyDto Commission;

		[PreserveCase()]
		public MoneyDto CommissionDiscount;

		[PreserveCase()]
		public decimal CommissionPercent;

		[PreserveCase()]
		public MoneyDto Discount;

		[PreserveCase()]
		public MoneyDto ServiceFee;

		[PreserveCase()]
		public MoneyDto Handling;

		[PreserveCase()]
		public MoneyDto GrandTotal;

		[PreserveCase()]
		public int PaymentType;

		[PreserveCase()]
		public string Name;

		[PreserveCase()]
		public Reference Order;

		[PreserveCase()]
		public OperationStatus CanUpdate;

		[PreserveCase()]
		public OperationStatus CanDelete;
	}


	public partial class ProductPassengerDto
	{
		[PreserveCase()]
		public string Id;

		[PreserveCase()]
		public int Version;

		[PreserveCase()]
		public string PassengerName;

		[PreserveCase()]
		public Reference Passenger;
	}


	public partial class GenericProductTypeDto
	{
		[PreserveCase()]
		public string Id;

		[PreserveCase()]
		public int Version;

		[PreserveCase()]
		public string Name;
	}

	public partial class GenericProductDto : ProductDto
	{
		[PreserveCase()]
		public ProductPassengerDto[] Passengers;

		[PreserveCase()]
		public Reference Provider;

		[PreserveCase()]
		public Reference GenericType;

		[PreserveCase()]
		public string Number;

		[PreserveCase()]
		public Date StartDate;

		[PreserveCase()]
		public Date FinishDate;
	}




	public partial class PasteboardDto : ProductDto
	{
		[PreserveCase()]
		public string PassengerName;

		[PreserveCase()]
		public Reference Passenger;

		[PreserveCase()]
		public string Number;

		[PreserveCase()]
		public string DeparturePlace;

		[PreserveCase()]
		public Date DepartureDate;

		[PreserveCase()]
		public string DepartureTime;


		[PreserveCase()]
		public string ArrivalPlace;

		[PreserveCase()]
		public Date ArrivalDate;

		[PreserveCase()]
		public string ArrivalTime;
	}

	public partial class SimCardDto : ProductDto
	{
		[PreserveCase()]
		public string PassengerName;

		[PreserveCase()]
		public Reference Passenger;

		[PreserveCase()]
		public string Number;

		[PreserveCase()]
		public int Operator;

		[PreserveCase()]
		public bool IsSale;
	}

	public partial class IsicDto : ProductDto
	{
		[PreserveCase()]
		public string PassengerName;

		[PreserveCase()]
		public Reference Passenger;

		[PreserveCase()]
		public int CardType;

		[PreserveCase()]
		public string Number1;

		[PreserveCase()]
		public string Number2;
	}

	public partial class BusTicketDto : ProductDto
	{
		[PreserveCase()]
		public string PassengerName;

		[PreserveCase()]
		public Reference Passenger;

		[PreserveCase()]
		public string DeparturePlace;

		[PreserveCase()]
		public Date DepartureDate;

		[PreserveCase()]
		public string DepartureTime;

		[PreserveCase()]
		public string ArrivalPlace;

		[PreserveCase()]
		public Date ArrivalDate;

		[PreserveCase()]
		public string ArrivalTime;

		[PreserveCase()]
		public string SeatNumber;
	}

	public partial class ExcursionDto : ProductDto
	{
		[PreserveCase()]
		public ProductPassengerDto[] Passengers;

		[PreserveCase()]
		public Date StartDate;

		[PreserveCase()]
		public Date FinishDate;

		[PreserveCase()]
		public string TourName;
	}

	public partial class TourDto : ProductDto
	{
		[PreserveCase()]
		public ProductPassengerDto[] Passengers;

		[PreserveCase()]
		public Date StartDate;

		[PreserveCase()]
		public Date FinishDate;

		[PreserveCase()]
		public string HotelName;

		[PreserveCase()]
		public string HotelOffice;

		[PreserveCase()]
		public string HotelCode;

		[PreserveCase()]
		public string HotelRoom;

		[PreserveCase()]
		public string PlacementName;

		[PreserveCase()]
		public string PlacementOffice;

		[PreserveCase()]
		public string PlacementCode;

		[PreserveCase()]
		public string Diet;

		[PreserveCase()]
		public string AviaDescription;

		[PreserveCase()]
		public string TransferDescription;
	}


	public partial class AccommodationDto : ProductDto
	{
		[PreserveCase()]
		public ProductPassengerDto[] Passengers;

		[PreserveCase()]
		public Reference[] Provider;

		[PreserveCase()]
		public Date StartDate;

		[PreserveCase()]
		public Date FinishDate;

		[PreserveCase()]
		public string HotelName;

		[PreserveCase()]
		public string HotelOffice;

		[PreserveCase()]
		public string HotelCode;

		[PreserveCase()]
		public string HotelRoom;

		[PreserveCase()]
		public string PlacementName;

		[PreserveCase()]
		public string PlacementOffice;

		[PreserveCase()]
		public string PlacementCode;

		[PreserveCase()]
		public string Diet;
	}

	public partial class TransferDto : ProductDto
	{
		[PreserveCase()]
		public ProductPassengerDto[] Passengers;

		[PreserveCase()]
		public Reference[] Provider;

		[PreserveCase()]
		public Date StartDate;
	}

	public partial class InsuranceDto : ProductDto
	{
		[PreserveCase()]
		public ProductPassengerDto[] Passengers;

		[PreserveCase()]
		public Reference[] Provider;

		[PreserveCase()]
		public Date StartDate;

		[PreserveCase()]
		public Date FinishDate;
	}

	public partial class CarRentalDto : ProductDto
	{
		[PreserveCase()]
		public ProductPassengerDto[] Passengers;

		[PreserveCase()]
		public Reference[] Provider;

		[PreserveCase()]
		public Date StartDate;

		[PreserveCase()]
		public Date FinishDate;

		[PreserveCase()]
		public string CarBrand;
	}

}


namespace Luxena.Travel
{
	
	
	public partial class AviaDocumentProcessDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public ProductType Type;
		
		[PreserveCase()]
		public string AirlinePrefixCode;
		
		[PreserveCase()]
		public long Number;
		
		[PreserveCase()]
		public GdsOriginator Originator;
		
		[PreserveCase()]
		public string PassengerName;
		
		[PreserveCase()]
		public Reference Customer;
		
		[PreserveCase()]
		public Reference Intermediary;
		
		[PreserveCase()]
		public Reference Seller;
		
		[PreserveCase()]
		public MoneyDto Commission;
		
		[PreserveCase()]
		public MoneyDto CommissionDiscount;
		
		[PreserveCase()]
		public decimal CommissionPercent;
		
		[PreserveCase()]
		public MoneyDto Fare;
		
		[PreserveCase()]
		public MoneyDto EqualFare;
		
		[PreserveCase()]
		public MoneyDto Total;
		
		[PreserveCase()]
		public MoneyDto ServiceFee;
		
		[PreserveCase()]
		public MoneyDto Handling;
		
		[PreserveCase()]
		public MoneyDto Discount;
		
		[PreserveCase()]
		public MoneyDto GrandTotal;
		
		[PreserveCase()]
		public int PaymentType;
		
		[PreserveCase()]
		public bool RequiresProcessing;
		
		[PreserveCase()]
		public bool IsVoid;
		
		[PreserveCase()]
		public string Note;
		
		[PreserveCase()]
		public Reference Order;
		
		[PreserveCase()]
		public string Name;
	}
	
	public partial class AviaMcoProcessDto : AviaDocumentProcessDto
	{
		
		[PreserveCase()]
		public string Description;
	}
	
	public partial class AviaDocumentProcessArgs
	{
		
		[PreserveCase()]
		public bool AllowSaveAndContinue;
		
		[PreserveCase()]
		public bool AllowEditParty;
		
		[PreserveCase()]
		public bool HasAccessToDocumentList;
	}
	
	public partial class AviaTicketProcessDto : AviaDocumentProcessDto
	{
		
		[PreserveCase()]
		public PenalizeOperationDto[] PenalizeOperations;
		
		[PreserveCase()]
		public int SegmentCount;
		
		[PreserveCase()]
		public Reference Passenger;
		
		[PreserveCase()]
		public string GdsPassport;
		
		[PreserveCase()]
		public GdsPassportStatus GdsPassportStatus;
		
		[PreserveCase()]
		public PassportDto Passport;
		
		[PreserveCase()]
		public bool PassportRequired;
		
		[PreserveCase()]
		public PassportValidationResult PassportValidationResult;
		
		[PreserveCase()]
		public Reference SuggestPassenger;
	}
	
	public partial class PassportValidationResponse
	{
		
		[PreserveCase()]
		public PassportDto Passport;
		
		[PreserveCase()]
		public PassportValidationResult PassportValidationResult;
	}
	
	public partial class PenalizeOperationDto
	{
		
		[PreserveCase()]
		public PenalizeOperationType Type;
		
		[PreserveCase()]
		public PenalizeOperationStatus Status;
		
		[PreserveCase()]
		public string Description;
	}
	
	public partial class ProcessOperationPermissionsResponse : OperationPermissions
	{
		
		[PreserveCase()]
		public AviaDocumentProcessArgs Args;
	}
	
	public partial class GdsAgentDto
	{
		
		[PreserveCase()]
		public string Origin;
		
		[PreserveCase()]
		public string OfficeCode;
		
		[PreserveCase()]
		public string AgentCode;
	}
	
	public enum GdsPassportStatus
	{
		
		Unknown = 0,
		
		Exist = 1,
		
		NotExist = 2,
		
		Incorrect = 3,
	}
	
	public enum AirlinePassportRequirement
	{
		
		SystemDefault = 0,
		
		Required = 1,
		
		NotRequired = 2,
	}
	
	public enum PenalizeOperationStatus
	{
		
		NotAllowed = 0,
		
		NotChargeable = 1,
		
		Chargeable = 2,
	}
	
	public enum PenalizeOperationType
	{
		
		ChangesBeforeDeparture = 0,
		
		ChangesAfterDeparture = 1,
		
		RefundBeforeDeparture = 2,
		
		RefundAfterDeparture = 3,
		
		NoShowBeforeDeparture = 4,
		
		NoShowAfterDeparture = 5,
	}


	public partial class AviaDocumentDto : ProductDto
	{
		[PreserveCase()]
		public long Number;

		[PreserveCase()]
		public string Conjunction;
		
		[PreserveCase()]
		public string AirlinePrefixCode;
		
		[PreserveCase()]
		public Reference Producer;
		
		[PreserveCase()]
		public string PassengerName;
		
		[PreserveCase()]
		public Reference Passenger;
		
		[PreserveCase()]
		public GdsPassportStatus GdsPassportStatus;
		
		[PreserveCase()]
		public string GdsPassport;
		
		[PreserveCase()]
		public string Itinerary;
		
		[PreserveCase()]
		public string AirlinePnrCode;

	
		[PreserveCase()]
		public string TicketingIataOffice;
		
		[PreserveCase()]
		public String[] Voidings;
		
		[PreserveCase()]
		public string PaymentForm;
		
		[PreserveCase()]
		public string PaymentDetails;
		
		[PreserveCase()]
		public AviaDocumentFeeDto[] Fees;
	}
	
	public partial class AviaMcoDto : AviaDocumentDto
	{
		
		[PreserveCase()]
		public string Description;
		
		[PreserveCase()]
		public Reference InConnectionWith;
	}
	
	public partial class AviaRefundDto : AviaDocumentDto
	{
	
		[PreserveCase()]
		public MoneyDto CancelFee;
		
		[PreserveCase()]
		public MoneyDto ServiceFeePenalty;
		
		[PreserveCase()]
		public MoneyDto RefundServiceFee;
	}
	
	public partial class AviaRefundProcessDto : AviaDocumentProcessDto
	{
		
		[PreserveCase()]
		public MoneyDto ServiceFeePenalty;
		
		[PreserveCase()]
		public MoneyDto RefundServiceFee;
	}
	
	public partial class AviaDocumentFeeDto
	{
		
		[PreserveCase()]
		public string Code;
		
		[PreserveCase()]
		public MoneyDto Amount;
	}
	
	public partial class AviaTicketDto : AviaDocumentDto
	{
		
		[PreserveCase()]
		public FlightSegmentDto[] Segments;
		
		[PreserveCase()]
		public PenalizeOperationDto[] PenalizeOperations;
		
		[PreserveCase()]
		public bool PassportRequired;
		
		[PreserveCase()]
		public PassportValidationResult PassportValidationResult;
	}
	
	public partial class FlightSegmentDto
	{
		
		//[PreserveCase()]
		//public string StateInfo;
		
		[PreserveCase()]
		public string Id;

		[PreserveCase()]
		public int Position;

		[PreserveCase()]
		public Reference FromAirport;
		
		[PreserveCase()]
		public string FromAirportName;
		
		[PreserveCase()]
		public Reference ToAirport;
		
		[PreserveCase()]
		public string ToAirportName;
		
		[PreserveCase()]
		public string CarrierCode;
		
		[PreserveCase()]
		public Reference Carrier;
		
		[PreserveCase()]
		public string FlightNumber;
		
		[PreserveCase()]
		public string ServiceClassCode;

		[PreserveCase()]
		public string ServiceClass;

		[PreserveCase()]
		public string ServiceClassName;

		[PreserveCase()]
		public object DepartureTime;
		
		[PreserveCase()]
		public object ArrivalTime;
		
		[PreserveCase()]
		public string MealValue;
		
		[PreserveCase()]
		public string MealString;
		
		[PreserveCase()]
		public string NumberOfStops;
		
		[PreserveCase()]
		public string Luggage;
		
		[PreserveCase()]
		public string CheckInTerminal;
		
		[PreserveCase()]
		public string CheckInTime;
		
		[PreserveCase()]
		public string Duration;
		
		[PreserveCase()]
		public string ArrivalTerminal;
		
		[PreserveCase()]
		public string Seat;
		
		[PreserveCase()]
		public string FareBasis;
		
		[PreserveCase()]
		public bool Stopover;
		
		[PreserveCase()]
		public FlightSegmentType Type;

		[PreserveCase()]
		public MoneyDto CouponAmount;
	}
	
	public enum AviaDocumentOrigin
	{
		
		AmadeusAir = 0,
		
		AmadeusPrint = 1,
		
		GalileoMir = 2,
		
		GalileoTkt = 3,
		
		BspLink = 4,
		
		Manual = 5,
		
		SirenaXml = 6,
	}
	
	public enum ProductType
	{
		
		AviaTicket = 0,
		
		AviaRefund = 1,
		
		AviaMco = 2,
	}
	
	public enum FlightSegmentType
	{
		
		Ticketed = 0,
		
		Unticketed = 1,
		
		Voided = 2,
	}
	
	public enum PaymentType
	{
		
		Unknown = 0,
		
		Cash = 1,
		
		Invoice = 2,
		
		Check = 3,
		
		CreditCard = 4,
		
		Exchange = 5,
		
		WithoutPayment = 6,
	}
	
	public enum ServiceClass
	{
		
		Unknown = 0,
		
		Economy = 1,
		
		PremiumEconomy = 2,
		
		Business = 3,
		
		First = 4,
	}
	
	public enum GdsOriginator
	{
		
		Unknown = 0,
		
		Amadeus = 1,
		
		Galileo = 2,
		
		Sirena = 3,
		
		Airline = 4,
	}
	
	public enum MealType
	{
		
		NoData = 0,
		
		Breakfast = 1,
		
		ContinentalBreakfast = 2,
		
		Lunch = 4,
		
		Dinner = 8,
		
		Snack = 16,
		
		ColdMeal = 32,
		
		HotMeal = 64,
		
		Meal = 128,
		
		Refreshment = 256,
		
		AlcoholicComplimentaryBeverages = 512,
		
		Food = 1024,
		
		AlcoholicBeveragesForPurchase = 2048,
		
		DutyFree = 4096,
	}
	
	public enum PassportValidationResult
	{
		
		NoPassport = 0,
		
		NotValid = 1,
		
		ExpirationDateNotValid = 2,
		
		Valid = 3,
	}
}
namespace Luxena.Travel
{
	
	
	public partial class DayStats
	{
		
		[PreserveCase()]
		public Date Date;
		
		[PreserveCase()]
		public string DateText;
		
		[PreserveCase()]
		public long Unprocessed;
		
		[PreserveCase()]
		public long Total;
		
		[PreserveCase()]
		public long Void;
		
		[PreserveCase()]
		public string ReportUrl;
	}
	
	public partial class ItemListResponse
	{
		
		[PreserveCase()]
		public Object[] Items;
		
		[PreserveCase()]
		public RangeResponse RangeResponse;
	}
	
	public partial class SystemConfigurationDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public string CompanyName;

		[PreserveCase()]
		public decimal VatRate;
		
		[PreserveCase()]
		public Reference DefaultCurrency;
		
		[PreserveCase()]
		public bool UseDefaultCurrencyForInput;

		[PreserveCase()]
		public bool UseConsolidatorCommission;

		[PreserveCase()]
		public bool UseAviaHandling;

		[PreserveCase()]
		public bool UseBonuses;

		[PreserveCase()]
		public AviaOrderItemGenerationOption AviaOrderItemGenerationOption;
		
		[PreserveCase()]
		public bool IsOrganizationCodeRequired;

		[PreserveCase()]
		public bool IsOrderRequiredForProcessedDocument;

		[PreserveCase()]
		public bool ReservationsInOfficeMetrics;

		[PreserveCase()]
		public bool Order_UseServiceFeeOnlyInVat;

		[PreserveCase()]
		public bool Invoice_CanOwnerSelect;

		[PreserveCase()]
		public Reference Invoice_DefaultIssuedBy;


		[PreserveCase()]
		public bool Ticket_NoPrintReservations;
	}



	
	public partial class AppParameters
	{
		
		[PreserveCase()]
		public Reference UserPerson;
		
		[PreserveCase()]
		public Reference CurrentUser;
		
		[PreserveCase()]
		public object AllowedActions;
		
		[PreserveCase()]
		public object MainPageSettings;
		
		[PreserveCase()]
		public SystemConfigurationDto SystemConfiguration;
		
		[PreserveCase()]
		public Reference[] Departments;

		[PreserveCase()]
		public Reference[] BankAccounts;

		[PreserveCase()]
		public string Version;


		//[PreserveCase()]
		//public string InvoiceFileExtension;

	}



	public partial class AppStateResponse
	{
		
		[PreserveCase()]
		public Reference[] ImportedDocuments;
		
		[PreserveCase()]
		public Reference[] AssignedTasks;
		
		[PreserveCase()]
		public bool IsUserRolesChanged;
		
		[PreserveCase()]
		public string Version;
	}
	
	public partial class AppStateRequest
	{
		
		[PreserveCase()]
		public bool ClearUserData;
		
		[PreserveCase()]
		public bool CheckImportedDocuments;
		
		[PreserveCase()]
		public bool CheckNewTasks;
		
		[PreserveCase()]
		public bool CheckUserRoleChanges;
	}
	
	public enum AviaDocumentState
	{
		
		Imported = 0,
		
		Voided = 1,
		
		Restored = 2,
	}
	
	public partial class ObjectStateInfo : Reference
	{
		
		[PreserveCase()]
		public object State;
	}
	
	public partial class ProfileDto
	{
		
		[PreserveCase()]
		public Reference Person;
		
		[PreserveCase()]
		public string Login;
		
		[PreserveCase()]
		public string Roles;
		
		[PreserveCase()]
		public GdsAgentDto[] GdsAgents;
	}
	
	public partial class MoneyDto
	{
		
		[PreserveCase()]
		public decimal Amount;
		
		[PreserveCase()]
		public Reference Currency;
	}
}
namespace Luxena.Travel
{
	
	
	public partial class FileDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public string FileName;
		
		[PreserveCase()]
		public Date TimeStamp;
		
		[PreserveCase()]
		public Reference UploadedBy;
		
		[PreserveCase()]
		public Reference Party;
	}
	
	public partial class PartyDto
	{
		
		[PreserveCase()]
		public string Type;
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public string Text;
		
		[PreserveCase()]
		public int Version;
		
		[PreserveCase()]
		public string Name;
		
		[PreserveCase()]
		public string LegalName;
		
		[PreserveCase()]
		public string Phone1;
		
		[PreserveCase()]
		public string Phone2;
		
		[PreserveCase()]
		public string Fax;
		
		[PreserveCase()]
		public string Email1;
		
		[PreserveCase()]
		public string Email2;
		
		[PreserveCase()]
		public string WebAddress;
		
		[PreserveCase()]
		public bool IsCustomer;
		
		[PreserveCase()]
		public bool IsSupplier;
		
		[PreserveCase()]
		public Reference ReportsTo;
		
		[PreserveCase()]
		public string LegalAddress;
		
		[PreserveCase()]
		public string ActualAddress;
		
		[PreserveCase()]
		public string Note;
		
		[PreserveCase()]
		public FileDto[] Files;
		
		[PreserveCase()]
		public OperationPermissions Permissions;
		
		[PreserveCase()]
		public PartyBalance Balance;
	}
	
	public partial class DepartmentDto : PartyDto
	{
		
		[PreserveCase()]
		public OrganizationDto Organization;
	}
	
	public partial class OpeningBalanceDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public string Text;
		
		[PreserveCase()]
		public string Type;
		
		[PreserveCase()]
		public Date Date;
		
		[PreserveCase()]
		public decimal Balance;
	}
	
	public partial class OrderBalance
	{
		
		[PreserveCase()]
		public Reference Order;
		
		[PreserveCase()]
		public string Owner;
		
		[PreserveCase()]
		public Date FirstDocumentDate;
		
		[PreserveCase()]
		public Date LastDocumentDate;
		
		[PreserveCase()]
		public decimal Delivered;
		
		[PreserveCase()]
		public decimal Paid;
		
		[PreserveCase()]
		public decimal Balance;
	}
	
	public partial class PartyBalance
	{
		
		[PreserveCase()]
		public Reference Party;
		
		[PreserveCase()]
		public OpeningBalanceDto OpeningBalance;
		
		[PreserveCase()]
		public Date FirstDocumentDate;
		
		[PreserveCase()]
		public Date LastDocumentDate;
		
		[PreserveCase()]
		public decimal Delivered;
		
		[PreserveCase()]
		public decimal Paid;
		
		[PreserveCase()]
		public decimal Overall;
		
		[PreserveCase()]
		public OrderBalance[] ByOrders;
	}
	
	public partial class TaskDto
	{
		
		[PreserveCase()]
		public string Type;
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public string Text;
		
		[PreserveCase()]
		public int Version;
		
		[PreserveCase()]
		public string Number;
		
		[PreserveCase()]
		public string Subject;
		
		[PreserveCase()]
		public string Description;
		
		[PreserveCase()]
		public Reference RelatedTo;
		
		[PreserveCase()]
		public Reference Order;
		
		[PreserveCase()]
		public Reference AssignedTo;
		
		[PreserveCase()]
		public TaskStatus Status;
		
		[PreserveCase()]
		public Date DueDate;
		
		[PreserveCase()]
		public bool Overdue;
		
		[PreserveCase()]
		public bool CanModify;
	}
	
	public partial class UploadFileResponse
	{
		
		[PreserveCase()]
		public bool success;
		
		[PreserveCase()]
		public FileDto File;
		
		[PreserveCase()]
		public string ErrorMessage;
	}
	
	public partial class MilesCardDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public object Version;

		[PreserveCase()]
		public Reference Owner;

		[PreserveCase()]
		public string Number;
		
		[PreserveCase()]
		public Reference Organization;
	}
	
	public partial class PassportDto
	{
		
		[PreserveCase()]
		public object Id;
		
		[PreserveCase()]
		public object Version;
		
		[PreserveCase()]
		public string FirstName;
		
		[PreserveCase()]
		public string MiddleName;
		
		[PreserveCase()]
		public string LastName;
		
		[PreserveCase()]
		public Reference Owner;
		
		[PreserveCase()]
		public int Gender;
		
		[PreserveCase()]
		public string GenderString;
		
		[PreserveCase()]
		public string Number;
		
		[PreserveCase()]
		public Reference Citizenship;
		
		[PreserveCase()]
		public Reference IssuedBy;
		
		[PreserveCase()]
		public string IssuedByCode;
		
		[PreserveCase()]
		public Date Birthday;
		
		[PreserveCase()]
		public Date ExpiredOn;
		
		[PreserveCase()]
		public string Note;
		
		[PreserveCase()]
		public string AmadeusString;
		
		[PreserveCase()]
		public string GalileoString;
	}
	
	public partial class PersonDto : PartyDto
	{
		[PreserveCase()]
		public Date Birthday;

		[PreserveCase()]
		public string BonusCardNumber;

		[PreserveCase()]
		public PassportDto[] Passports;
		
		[PreserveCase()]
		public MilesCardDto[] MilesCards;
		
		[PreserveCase()]
		public Reference Organization;
		
		[PreserveCase()]
		public string Title;
	}
	
	public enum Gender
	{
		
		Male = 0,
		
		Female = 1,
	}
	
	public enum TaskStatus
	{
		
		Open = 0,
		
		InProgress = 1,
		
		WaitForResponse = 2,
		
		Closed = 3,
	}
	
	public partial class OrganizationDto : PartyDto
	{
		
		[PreserveCase()]
		public string Code;
		
	}
}
namespace Luxena.Travel.Reports
{
	
	
	public enum ReportType
	{
		
		Pdf = 0,
		
		Excel = 1,
	}
}
namespace Luxena.Travel.Services
{
	
	
	public partial class ConsignmentService
	{
		
		public static WebService Service;
		
		static ConsignmentService()
		{
			Service = new WebService("ConsignmentService.asmx");
		}
		
		[PreserveCase()]
		public static void GetConsignmentFile(object issuedConsignmentId, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetConsignmentFile", new Dictionary("issuedConsignmentId", issuedConsignmentId), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetLastIssuedConsignment(object consignmentId, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetLastIssuedConsignment", new Dictionary("consignmentId", consignmentId), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetConsignment(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetConsignment", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void UpdateConsignment(ConsignmentDto dto, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("UpdateConsignment", new Dictionary("dto", dto, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetConsignmentItems(Object[] orderIds, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetConsignmentItems", new Dictionary("orderIds", orderIds), false, null, onSuccess, onError);
		}
	}
	
	public partial class ClosedPeriodService
	{
		
		public static WebService Service;
		
		static ClosedPeriodService()
		{
			Service = new WebService("ClosedPeriodService.asmx");
		}
		
		[PreserveCase()]
		public static void GetLastClosedPeriod(AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetLastClosedPeriod", new Dictionary(), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CanUpdate(ClosedPeriodDto dto, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanUpdate", new Dictionary("dto", dto), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void UpdateClosedPeriod(ClosedPeriodDto dto, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("UpdateClosedPeriod", new Dictionary("dto", dto, "params", @params), false, null, onSuccess, onError);
		}
	}
	
	public partial class HomeModel
	{
		
		[PreserveCase()]
		public TaskDto[] MyTasks;
		
		[PreserveCase()]
		public int MyTasksTotal;
		
		[PreserveCase()]
		public Date MetricsFromDate;
		
		[PreserveCase()]
		public DocumentStatsModel MyDocuments;
		
		[PreserveCase()]
		public bool ShowOfficeBlocks;
		
		[PreserveCase()]
		public TaskDto[] OfficeTasks;
		
		[PreserveCase()]
		public int OfficeTasksTotal;
		
		[PreserveCase()]
		public DocumentStatsModel OfficeDocuments;
	}
	
	public partial class DocumentStatsModel
	{
		
		[PreserveCase()]
		public int UnprocessedDocuments;

		[PreserveCase()]
		public int DocumentsWithoutOwners;

		[PreserveCase()]
		public int UnpaidDocuments;
		
		[PreserveCase()]
		public Object[] PassportRequirements;
		
		[PreserveCase()]
		public Object[] UrgentPassportRequirements;
		
		[PreserveCase()]
		public Object[] IncorrectPassports;
		
		[PreserveCase()]
		public int OrdersToPay;
		
		[PreserveCase()]
		public int OrdersToExecute;
		
		[PreserveCase()]
		public int OrdersWithDebt;
		
		[PreserveCase()]
		public DayStats[] DayStats;
	}
	
	public partial class AppService
	{
		
		public static WebService Service;
		
		static AppService()
		{
			Service = new WebService("AppService.asmx");
		}
		
		[PreserveCase()]
		public static void GetAppParameters(AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetAppParameters", new Dictionary(), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetHomeModel(Date statsFrom, Date statsTo, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetHomeModel", new Dictionary("statsFrom", statsFrom, "statsTo", statsTo), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CloseTask(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CloseTask", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetAppStateChanges(AppStateRequest request, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetAppStateChanges", new Dictionary("request", request), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetDocumentOwners(AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetDocumentOwners", new Dictionary(), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void UpdateAnalytics(AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("UpdateAnalytics", new Dictionary(), false, null, onSuccess, onError);
		}
	}


	public class DomainService
	{
		public static WebService Service;

		static DomainService()
		{
			Service = new WebService("DomainService.asmx");
		}

		public static void Get(string className, object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			if (Script.IsValue(id))
				Service.Invoke("Get" + className, new Dictionary("id", id), false, null, onSuccess, onError);
			else
				onSuccess(null);
		}

		public static void Update(string className, object dto, RangeRequest prms, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Update" + className, new Dictionary("dto", dto, "params", prms), false, null, onSuccess, onError);
		}
	}

	public partial class ProductService
	{
		public static WebService Service;

		static ProductService()
		{
			Service = new WebService("ProductService.asmx");
		}


		[PreserveCase()]
		public static void CanUpdate(Object[] ids, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanUpdate", new Dictionary("ids", ids), false, null, onSuccess, onError);
		}


		public static void GetObject1(string className, object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			if (Script.IsValue(id))
				Service.Invoke("Get" + className, new Dictionary("id", id), false, null, onSuccess, onError);
			else
				onSuccess(null);
		}

		public static void UpdateObject1(string className, object dto, RangeRequest prms, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Update" + className, new Dictionary("dto", dto, "params", prms), false, null, onSuccess, onError);
		}


		[PreserveCase()]
		public static void ChangeVoidStatus(Object[] ids, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ChangeVoidStatus", new Dictionary("ids", ids, "params", @params), false, null, onSuccess, onError);
		}

		public static void GetProducers(string className, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetProducers", new Dictionary("className", className), false, null, onSuccess, onError);
		}

		public static void GetProviders(string className, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetProviders", new Dictionary("className", className), false, null, onSuccess, onError);
		}

		public static void GetGenericProductTypes(AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetGenericProductTypes", new Dictionary(), false, null, onSuccess, onError);
		}

	}


	public partial class AviaService
	{
		public static WebService Service;
		
		static AviaService()
		{
			Service = new WebService("AviaService.asmx");
		}
		
		[PreserveCase()]
		public static void GetAviaDocument(object id, string type, bool editMode, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetAviaDocument", new Dictionary("id", id, "type", type, "editMode", editMode), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetAviaReservationForProcess(object documentId, string className, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetAviaReservationForProcess", new Dictionary("documentId", documentId, "className", className), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CanProcess(object documentId, string className, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanProcess", new Dictionary("documentId", documentId, "className", className), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void ProcessAviaTickets(AviaTicketProcessDto[] dtos, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ProcessAviaTickets", new Dictionary("dtos", dtos), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void ProcessAviaRefunds(AviaRefundProcessDto[] dtos, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ProcessAviaRefunds", new Dictionary("dtos", dtos), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void ProcessAviaMcos(AviaMcoProcessDto[] dtos, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ProcessAviaMcos", new Dictionary("dtos", dtos), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetAviaDocumentForHandlingByNumber(string number, string className, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetAviaDocumentForHandlingByNumber", new Dictionary("number", number, "className", className), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetAviaDocumentsForProcess(Object[] ids, string className, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetAviaDocumentsForProcess", new Dictionary("ids", ids, "className", className), false, null, onSuccess, onError);
		}
		
		//[PreserveCase()]
		//public static void UpdateFlightSegment(object ticketId, Dictionary @params, AjaxCallback onSuccess, WebServiceFailure onError)
		//{
		//	Service.Invoke("UpdateFlightSegment", new Dictionary("ticketId", ticketId, "params", @params), false, null, onSuccess, onError);
		//}
		
		//[PreserveCase()]
		//public static void UpdateFlightSegments(object ticketId, FlightSegmentDto[] @params, AjaxCallback onSuccess, WebServiceFailure onError)
		//{
		//	Service.Invoke("UpdateFlightSegments", new Dictionary("ticketId", ticketId, "params", @params), false, null, onSuccess, onError);
		//}
		
		[PreserveCase()]
		public static void ChangeVoidStatus(Object[] ids, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ChangeVoidStatus", new Dictionary("ids", ids, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void UpdateAviaTicket(AviaTicketDto dto, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("UpdateAviaTicket", new Dictionary("dto", dto, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void UpdateAviaMco(AviaMcoDto dto, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("UpdateAviaMco", new Dictionary("dto", dto, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void UpdateAviaRefund(AviaRefundDto dto, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("UpdateAviaRefund", new Dictionary("dto", dto, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void FindAirlineByPrefixCode(string code, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("FindAirlineByPrefixCode", new Dictionary("code", code), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void FindAirportNameById(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("FindAirportNameById", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetReservationDocumentCount(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetReservationDocumentCount", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void SuggestNotRefundedDocuments(RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("SuggestNotRefundedDocuments", new Dictionary("params", @params), false, null, onSuccess, onError);
		}
		
		public static WebServiceProxy SuggestNotRefundedDocumentsProxy()
		{
			WebServiceProxy proxy = new WebServiceProxy(Service, "SuggestNotRefundedDocuments");
			proxy.Arguments = new Dictionary();
			return proxy;
		}
		
		[PreserveCase()]
		public static void CanUpdate(Object[] ids, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanUpdate", new Dictionary("ids", ids), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetDocumentCountForUpdate(string className, Object[] ids, object dateFrom, object dateTo, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetDocumentCountForUpdate", new Dictionary("className", className, "ids", ids, "dateFrom", dateFrom, "dateTo", dateTo), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void ApplyDataToDocuments(string className, Object[] ids, object dateFrom, object dateTo, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ApplyDataToDocuments", new Dictionary("className", className, "ids", ids, "dateFrom", dateFrom, "dateTo", dateTo), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void ValidatePassengerPassport(string ticketId, string passengerId, bool isGdsPassportNull, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ValidatePassengerPassport", new Dictionary("ticketId", ticketId, "passengerId", passengerId, "isGdsPassportNull", isGdsPassportNull), false, null, onSuccess, onError);
		}



		[PreserveCase()]
		public static void AddDocumentsByConsoleContent(string content, string sellerId, string ownerId, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke(
				"AddDocumentsByConsoleContent", 
				new Dictionary("content", content, "sellerId", sellerId, "ownerId", ownerId), 
				false, null, onSuccess, onError
			);
		}

	}
	


	public partial class GdsFileService
	{
		
		public static WebService Service;
		
		static GdsFileService()
		{
			Service = new WebService("GdsFileService.asmx");
		}
		
		[PreserveCase()]
		public static void Reimport(Object[] ids, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Reimport", new Dictionary("ids", ids, "params", @params), false, null, onSuccess, onError);
		}
	}
	
	public partial class OrderService
	{
		
		public static WebService Service;
		
		static OrderService()
		{
			Service = new WebService("OrderService.asmx");
		}


		[PreserveCase()]
		public static void ForceRefreshOrder(object orderId, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ForceRefreshOrder", new Dictionary("orderId", orderId), false, null, onSuccess, onError);
		}


		[PreserveCase()]
		public static void GetOrdersByAviaDocuments(Object[] aviaDocumentIds, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetOrdersByAviaDocuments", new Dictionary("aviaDocumentIds", aviaDocumentIds), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void FindAviaDocumentByNumer(string number, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("FindAviaDocumentByNumer", new Dictionary("number", number), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void AddAviaDocuments(object orderId, Object[] documentIds, bool separateServiceFee, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("AddAviaDocuments", new Dictionary("orderId", orderId, "documentIds", documentIds, "separateServiceFee", separateServiceFee), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GenerateOrderItems(
			Object[] documentIds, 
			bool separateServiceFee, 
			string orderId, 
			string bankAccountId,
			AjaxCallback onSuccess, 
			WebServiceFailure onError
		)
		{
			Service.Invoke("GenerateOrderItems", 
				new Dictionary(
					"documentIds", documentIds, 
					"separateServiceFee", separateServiceFee, 
					"orderId", orderId,
					"bankAccountId", bankAccountId
				),
				false, null, onSuccess, onError
			);
		}
		
		[PreserveCase()]
		public static void GetOrder(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetOrder", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void UpdateOrder(OrderDto dto, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("UpdateOrder", new Dictionary("dto", dto, "params", @params), false, null, onSuccess, onError);
		}



		[PreserveCase()]
		public static void IssueInvoice(
			object id, 
			string number,
			Date issueDate,
			object issuedById,
			object ownerId,
			object bankAccountId,
			int? formNumber, 
			bool showPaid, 
			AjaxCallback onSuccess, 
			WebServiceFailure onError
		)
		{
			Service.Invoke(
				"IssueInvoice", 
				new Dictionary(
					"id", id, 
					"number", number, 
					"issueDate", issueDate,
					"issuedById", issuedById,
					"ownerId", ownerId,
					"bankAccountId", bankAccountId,
					"formNumber", formNumber,
					"showPaid", showPaid
				), 
				false, 
				null,
				onSuccess, onError
			);
		}



		[PreserveCase()]
		public static void IssueCompletionCertificate(
			object id, 
			string number, 
			Date issueDate,
			object issuedById,
			object ownerId,
			object bankAccountId,
			bool showPaid,
			AjaxCallback onSuccess,
			WebServiceFailure onError
		)
		{
			Service.Invoke(
				"IssueCompletionCertificate", 
				new Dictionary(
					"id", id, 
					"number", number,
					"issueDate", issueDate,
					"issuedById", issuedById,
					"ownerId", ownerId,
					"bankAccountId", bankAccountId,
					"showPaid", showPaid
				), 
				false, null, 
				onSuccess, onError
			);
		}

		[PreserveCase()]
		public static void GetInvoiceFile(object invoiceId, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetInvoiceFile", new Dictionary("invoiceId", invoiceId), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void DeleteInvoice(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("DeleteInvoice", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetOrderItemsByNumber(string number, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetOrderItemsByNumber", new Dictionary("number", number), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetOrders(Object[] ids, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetOrders", new Dictionary("ids", ids), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void IssueReceipt(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("IssueReceipt", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CreateQuickReceipt(QuickReceiptRequest request, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CreateQuickReceipt", new Dictionary("request", request), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void SuggestInvoices(RangeRequest @params, string paymentType, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("SuggestInvoices", new Dictionary("params", @params, "paymentType", paymentType), false, null, onSuccess, onError);
		}
		
		public static WebServiceProxy SuggestInvoicesProxy(string paymentType)
		{
			WebServiceProxy proxy = new WebServiceProxy(Service, "SuggestInvoices");
			proxy.Arguments = new Dictionary("paymentType", paymentType);
			return proxy;
		}
		
		[PreserveCase()]
		public static void SetIsVoid(object orderId, bool value, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("SetIsVoid", new Dictionary("orderId", orderId, "value", value), false, null, onSuccess, onError);
		}
	}
	
	public partial class PartyService
	{
		
		public static WebService Service;
		
		static PartyService()
		{
			Service = new WebService("PartyService.asmx");
		}

		public static void GetObject1(string className, object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			if (Script.IsValue(id))
				Service.Invoke("Get" + className, new Dictionary("id", id), false, null, onSuccess, onError);
			else
				onSuccess(null);
		}

		public static void UpdateObject1(string className, object dto, RangeRequest prms, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Update" + className, new Dictionary("dto", dto, "params", prms), false, null, onSuccess, onError);
		}


		[PreserveCase()]
		public static void SuggestCustomers(RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("SuggestCustomers", new Dictionary("params", @params), false, null, onSuccess, onError);
		}
		
		public static WebServiceProxy SuggestCustomersProxy()
		{
			WebServiceProxy proxy = new WebServiceProxy(Service, "SuggestCustomers");
			proxy.Arguments = new Dictionary();
			return proxy;
		}
		
		[PreserveCase()]
		public static void SuggestUsers(RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("SuggestUsers", new Dictionary("params", @params), false, null, onSuccess, onError);
		}
		
		public static WebServiceProxy SuggestUsersProxy()
		{
			WebServiceProxy proxy = new WebServiceProxy(Service, "SuggestUsers");
			proxy.Arguments = new Dictionary();
			return proxy;
		}

		[PreserveCase()]
		public static void CreateCustomer(string type, string name, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CreateCustomer", new Dictionary("type", type, "name", name), false, null, onSuccess, onError);
		}

		[PreserveCase()]
		public static void Replace(string fromId, string toId, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("Replace", new Dictionary("fromId", fromId, "toId", toId), false, null, onSuccess, onError);
		}

		[PreserveCase()]
		public static void GetPerson(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetPerson", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void UpdatePerson(PersonDto dto, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("UpdatePerson", new Dictionary("dto", dto, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetDepartment(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetDepartment", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void UploadFile(string partyId, string fileName, Byte[] content, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("UploadFile", new Dictionary("partyId", partyId, "fileName", fileName, "content", content), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void DeleteFile(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("DeleteFile", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetFile(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetFile", new Dictionary("id", id), false, null, onSuccess, onError);
		}
	}
	
	public partial class PaymentService
	{
		
		public static WebService Service;
		
		static PaymentService()
		{
			Service = new WebService("PaymentService.asmx");
		}
		
//		[PreserveCase()]
//		public static void GetPayment(object id, AjaxCallback onSuccess, WebServiceFailure onError)
//		{
//			Service.Invoke("GetPayment", new Dictionary("id", id), false, null, onSuccess, onError);
//		}
//		
//		[PreserveCase()]
//		public static void UpdatePayment(PaymentDto dto, string className, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
//		{
//			Service.Invoke("UpdatePayment", new Dictionary("dto", dto, "className", className, "params", @params), false, null, onSuccess, onError);
//		}
		
		[PreserveCase()]
		public static void ChangeVoidStatus(Object[] ids, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ChangeVoidStatus", new Dictionary("ids", ids, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CanUpdate(Object[] ids, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanUpdate", new Dictionary("ids", ids), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CanCreatePayment(Object[] aviaDocumentIds, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CanCreatePayment", new Dictionary("aviaDocumentIds", aviaDocumentIds), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void CreateCashPayment(CashInOrderPaymentRequest request, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("CreateCashPayment", new Dictionary("request", request), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void PostPayments(Object[] ids, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("PostPayments", new Dictionary("ids", ids, "params", @params), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetCashOrderFile(object paymentId, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetCashOrderFile", new Dictionary("paymentId", paymentId), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void GetPaymentSystems(AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetPaymentSystems", new Dictionary(), false, null, onSuccess, onError);
		}
	}
	
	public partial class ReportService
	{
		
		public static WebService Service;
		
		static ReportService()
		{
			Service = new WebService("ReportService.asmx");
		}
		
		[PreserveCase()]
		public static void GetCustomerDocumentCount(object customerId, object billToId, string passenger, object airlineId, object paymentType, object dateFrom, object dateTo, bool unpayedDocumentsOnly, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetCustomerDocumentCount", 
				new Dictionary(
					"customerId", customerId, 
					"billToId", billToId, 
					"passenger", passenger, 
					"airlineId", airlineId, 
					"paymentType", paymentType, 
					"dateFrom", dateFrom, 
					"dateTo", dateTo, 
					"unpayedDocumentsOnly", unpayedDocumentsOnly
				), 
				false, null, onSuccess, onError
			);
		}
		
		[PreserveCase()]
		public static void PrintTickets(Object[] ids, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("PrintTickets", new Dictionary("ids", ids), false, null, onSuccess, onError);
		}
	}
	
	public partial class TaskService
	{
		
		public static WebService Service;
		
		static TaskService()
		{
			Service = new WebService("TaskService.asmx");
		}
		
		[PreserveCase()]
		public static void ChangeStatus(Object[] ids, TaskStatus status, RangeRequest @params, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ChangeStatus", new Dictionary("ids", ids, "status", status, "params", @params), false, null, onSuccess, onError);
		}
	}
	
	public partial class UserService
	{
		
		public static WebService Service;
		
		static UserService()
		{
			Service = new WebService("UserService.asmx");
		}
		
		[PreserveCase()]
		public static void GetUserProfile(object id, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("GetUserProfile", new Dictionary("id", id), false, null, onSuccess, onError);
		}
		
		[PreserveCase()]
		public static void ChangeUserPassword(string oldPassword, string newPassword, AjaxCallback onSuccess, WebServiceFailure onError)
		{
			Service.Invoke("ChangeUserPassword", new Dictionary("oldPassword", oldPassword, "newPassword", newPassword), false, null, onSuccess, onError);
		}
	}
}
